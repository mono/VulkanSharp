/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;

namespace Vulkan.Interop
{
	internal partial struct BaseOutStructure
	{
		internal StructureType SType;
		internal IntPtr Next;
	}

	internal partial struct BaseInStructure
	{
		internal StructureType SType;
		internal IntPtr Next;
	}

	internal partial struct PhysicalDeviceProperties
	{
		internal UInt32 ApiVersion;
		internal UInt32 DriverVersion;
		internal UInt32 VendorId;
		internal UInt32 DeviceId;
		internal PhysicalDeviceType DeviceType;
		internal unsafe fixed byte DeviceName[256];
		internal unsafe fixed byte PipelineCacheUuid[16];
		internal PhysicalDeviceLimits Limits;
		internal PhysicalDeviceSparseProperties SparseProperties;
	}

	internal partial struct ExtensionProperties
	{
		internal unsafe fixed byte ExtensionName[256];
		internal UInt32 SpecVersion;
	}

	internal partial struct LayerProperties
	{
		internal unsafe fixed byte LayerName[256];
		internal UInt32 SpecVersion;
		internal UInt32 ImplementationVersion;
		internal unsafe fixed byte Description[256];
	}

	internal partial struct ApplicationInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal IntPtr ApplicationName;
		internal UInt32 ApplicationVersion;
		internal IntPtr EngineName;
		internal UInt32 EngineVersion;
		internal UInt32 ApiVersion;
	}

	internal partial struct AllocationCallbacks
	{
		internal IntPtr UserData;
		internal IntPtr PfnAllocation;
		internal IntPtr PfnReallocation;
		internal IntPtr PfnFree;
		internal IntPtr PfnInternalAllocation;
		internal IntPtr PfnInternalFree;
	}

	internal partial struct DeviceQueueCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DeviceQueueCreateFlags Flags;
		internal UInt32 QueueFamilyIndex;
		internal UInt32 QueueCount;
		internal IntPtr QueuePriorities;
	}

	internal partial struct DeviceCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt32 QueueCreateInfoCount;
		internal IntPtr QueueCreateInfos;
		internal UInt32 EnabledLayerCount;
		internal IntPtr EnabledLayerNames;
		internal UInt32 EnabledExtensionCount;
		internal IntPtr EnabledExtensionNames;
		internal IntPtr EnabledFeatures;
	}

	internal partial struct InstanceCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal IntPtr ApplicationInfo;
		internal UInt32 EnabledLayerCount;
		internal IntPtr EnabledLayerNames;
		internal UInt32 EnabledExtensionCount;
		internal IntPtr EnabledExtensionNames;
	}

	internal partial struct PhysicalDeviceMemoryProperties
	{
		internal UInt32 MemoryTypeCount;
		internal MemoryType MemoryTypes0;
		internal MemoryType MemoryTypes1;
		internal MemoryType MemoryTypes2;
		internal MemoryType MemoryTypes3;
		internal MemoryType MemoryTypes4;
		internal MemoryType MemoryTypes5;
		internal MemoryType MemoryTypes6;
		internal MemoryType MemoryTypes7;
		internal MemoryType MemoryTypes8;
		internal MemoryType MemoryTypes9;
		internal MemoryType MemoryTypes10;
		internal MemoryType MemoryTypes11;
		internal MemoryType MemoryTypes12;
		internal MemoryType MemoryTypes13;
		internal MemoryType MemoryTypes14;
		internal MemoryType MemoryTypes15;
		internal MemoryType MemoryTypes16;
		internal MemoryType MemoryTypes17;
		internal MemoryType MemoryTypes18;
		internal MemoryType MemoryTypes19;
		internal MemoryType MemoryTypes20;
		internal MemoryType MemoryTypes21;
		internal MemoryType MemoryTypes22;
		internal MemoryType MemoryTypes23;
		internal MemoryType MemoryTypes24;
		internal MemoryType MemoryTypes25;
		internal MemoryType MemoryTypes26;
		internal MemoryType MemoryTypes27;
		internal MemoryType MemoryTypes28;
		internal MemoryType MemoryTypes29;
		internal MemoryType MemoryTypes30;
		internal MemoryType MemoryTypes31;
		internal UInt32 MemoryHeapCount;
		internal MemoryHeap MemoryHeaps0;
		internal MemoryHeap MemoryHeaps1;
		internal MemoryHeap MemoryHeaps2;
		internal MemoryHeap MemoryHeaps3;
		internal MemoryHeap MemoryHeaps4;
		internal MemoryHeap MemoryHeaps5;
		internal MemoryHeap MemoryHeaps6;
		internal MemoryHeap MemoryHeaps7;
		internal MemoryHeap MemoryHeaps8;
		internal MemoryHeap MemoryHeaps9;
		internal MemoryHeap MemoryHeaps10;
		internal MemoryHeap MemoryHeaps11;
		internal MemoryHeap MemoryHeaps12;
		internal MemoryHeap MemoryHeaps13;
		internal MemoryHeap MemoryHeaps14;
		internal MemoryHeap MemoryHeaps15;
	}

	internal partial struct MemoryAllocateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DeviceSize AllocationSize;
		internal UInt32 MemoryTypeIndex;
	}

	internal partial struct MappedMemoryRange
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Memory;
		internal DeviceSize Offset;
		internal DeviceSize Size;
	}

	internal partial struct DescriptorBufferInfo
	{
		internal UInt64 Buffer;
		internal DeviceSize Offset;
		internal DeviceSize Range;
	}

	internal partial struct DescriptorImageInfo
	{
		internal UInt64 Sampler;
		internal UInt64 ImageView;
		internal ImageLayout ImageLayout;
	}

	internal partial struct WriteDescriptorSet
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 DstSet;
		internal UInt32 DstBinding;
		internal UInt32 DstArrayElement;
		internal UInt32 DescriptorCount;
		internal DescriptorType DescriptorType;
		internal IntPtr ImageInfo;
		internal IntPtr BufferInfo;
		internal IntPtr TexelBufferView;
	}

	internal partial struct CopyDescriptorSet
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 SrcSet;
		internal UInt32 SrcBinding;
		internal UInt32 SrcArrayElement;
		internal UInt64 DstSet;
		internal UInt32 DstBinding;
		internal UInt32 DstArrayElement;
		internal UInt32 DescriptorCount;
	}

	internal partial struct BufferCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal BufferCreateFlags Flags;
		internal DeviceSize Size;
		internal BufferUsageFlags Usage;
		internal SharingMode SharingMode;
		internal UInt32 QueueFamilyIndexCount;
		internal IntPtr QueueFamilyIndices;
	}

	internal partial struct BufferViewCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt64 Buffer;
		internal Format Format;
		internal DeviceSize Offset;
		internal DeviceSize Range;
	}

	internal partial struct MemoryBarrier
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal AccessFlags SrcAccessMask;
		internal AccessFlags DstAccessMask;
	}

	internal partial struct BufferMemoryBarrier
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal AccessFlags SrcAccessMask;
		internal AccessFlags DstAccessMask;
		internal UInt32 SrcQueueFamilyIndex;
		internal UInt32 DstQueueFamilyIndex;
		internal UInt64 Buffer;
		internal DeviceSize Offset;
		internal DeviceSize Size;
	}

	internal partial struct ImageMemoryBarrier
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal AccessFlags SrcAccessMask;
		internal AccessFlags DstAccessMask;
		internal ImageLayout OldLayout;
		internal ImageLayout NewLayout;
		internal UInt32 SrcQueueFamilyIndex;
		internal UInt32 DstQueueFamilyIndex;
		internal UInt64 Image;
		internal ImageSubresourceRange SubresourceRange;
	}

	internal partial struct ImageCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ImageCreateFlags Flags;
		internal ImageType ImageType;
		internal Format Format;
		internal Extent3D Extent;
		internal UInt32 MipLevels;
		internal UInt32 ArrayLayers;
		internal SampleCountFlags Samples;
		internal ImageTiling Tiling;
		internal ImageUsageFlags Usage;
		internal SharingMode SharingMode;
		internal UInt32 QueueFamilyIndexCount;
		internal IntPtr QueueFamilyIndices;
		internal ImageLayout InitialLayout;
	}

	internal partial struct ImageViewCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ImageViewCreateFlags Flags;
		internal UInt64 Image;
		internal ImageViewType ViewType;
		internal Format Format;
		internal ComponentMapping Components;
		internal ImageSubresourceRange SubresourceRange;
	}

	internal partial struct SparseMemoryBind
	{
		internal DeviceSize ResourceOffset;
		internal DeviceSize Size;
		internal UInt64 Memory;
		internal DeviceSize MemoryOffset;
		internal SparseMemoryBindFlags Flags;
	}

	internal partial struct SparseImageMemoryBind
	{
		internal ImageSubresource Subresource;
		internal Offset3D Offset;
		internal Extent3D Extent;
		internal UInt64 Memory;
		internal DeviceSize MemoryOffset;
		internal SparseMemoryBindFlags Flags;
	}

	internal partial struct SparseBufferMemoryBindInfo
	{
		internal UInt64 Buffer;
		internal UInt32 BindCount;
		internal IntPtr Binds;
	}

	internal partial struct SparseImageOpaqueMemoryBindInfo
	{
		internal UInt64 Image;
		internal UInt32 BindCount;
		internal IntPtr Binds;
	}

	internal partial struct SparseImageMemoryBindInfo
	{
		internal UInt64 Image;
		internal UInt32 BindCount;
		internal IntPtr Binds;
	}

	internal partial struct BindSparseInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 WaitSemaphoreCount;
		internal IntPtr WaitSemaphores;
		internal UInt32 BufferBindCount;
		internal IntPtr BufferBinds;
		internal UInt32 ImageOpaqueBindCount;
		internal IntPtr ImageOpaqueBinds;
		internal UInt32 ImageBindCount;
		internal IntPtr ImageBinds;
		internal UInt32 SignalSemaphoreCount;
		internal IntPtr SignalSemaphores;
	}

	internal partial struct ImageBlit
	{
		internal ImageSubresourceLayers SrcSubresource;
		internal Offset3D SrcOffsets0;
		internal Offset3D SrcOffsets1;
		internal ImageSubresourceLayers DstSubresource;
		internal Offset3D DstOffsets0;
		internal Offset3D DstOffsets1;
	}

	internal partial struct ShaderModuleCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UIntPtr CodeSize;
		internal IntPtr Code;
	}

	internal partial struct DescriptorSetLayoutBinding
	{
		internal UInt32 Binding;
		internal DescriptorType DescriptorType;
		internal UInt32 DescriptorCount;
		internal ShaderStageFlags StageFlags;
		internal IntPtr ImmutableSamplers;
	}

	internal partial struct DescriptorSetLayoutCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DescriptorSetLayoutCreateFlags Flags;
		internal UInt32 BindingCount;
		internal IntPtr Bindings;
	}

	internal partial struct DescriptorPoolCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DescriptorPoolCreateFlags Flags;
		internal UInt32 MaxSets;
		internal UInt32 PoolSizeCount;
		internal IntPtr PoolSizes;
	}

	internal partial struct DescriptorSetAllocateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 DescriptorPool;
		internal UInt32 DescriptorSetCount;
		internal IntPtr SetLayouts;
	}

	internal partial struct SpecializationInfo
	{
		internal UInt32 MapEntryCount;
		internal IntPtr MapEntries;
		internal UIntPtr DataSize;
		internal IntPtr Data;
	}

	internal partial struct PipelineShaderStageCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal ShaderStageFlags Stage;
		internal UInt64 Module;
		internal IntPtr Name;
		internal IntPtr SpecializationInfo;
	}

	internal partial struct ComputePipelineCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PipelineCreateFlags Flags;
		internal PipelineShaderStageCreateInfo Stage;
		internal UInt64 Layout;
		internal UInt64 BasePipelineHandle;
		internal Int32 BasePipelineIndex;
	}

	internal partial struct PipelineVertexInputStateCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt32 VertexBindingDescriptionCount;
		internal IntPtr VertexBindingDescriptions;
		internal UInt32 VertexAttributeDescriptionCount;
		internal IntPtr VertexAttributeDescriptions;
	}

	internal partial struct PipelineInputAssemblyStateCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal PrimitiveTopology Topology;
		internal Bool32 PrimitiveRestartEnable;
	}

	internal partial struct PipelineTessellationStateCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt32 PatchControlPoints;
	}

	internal partial struct PipelineViewportStateCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt32 ViewportCount;
		internal IntPtr Viewports;
		internal UInt32 ScissorCount;
		internal IntPtr Scissors;
	}

	internal partial struct PipelineRasterizationStateCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal Bool32 DepthClampEnable;
		internal Bool32 RasterizerDiscardEnable;
		internal PolygonMode PolygonMode;
		internal CullModeFlags CullMode;
		internal FrontFace FrontFace;
		internal Bool32 DepthBiasEnable;
		internal float DepthBiasConstantFactor;
		internal float DepthBiasClamp;
		internal float DepthBiasSlopeFactor;
		internal float LineWidth;
	}

	internal partial struct PipelineMultisampleStateCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal SampleCountFlags RasterizationSamples;
		internal Bool32 SampleShadingEnable;
		internal float MinSampleShading;
		internal IntPtr SampleMask;
		internal Bool32 AlphaToCoverageEnable;
		internal Bool32 AlphaToOneEnable;
	}

	internal partial struct PipelineColorBlendStateCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal Bool32 LogicOpEnable;
		internal LogicOp LogicOp;
		internal UInt32 AttachmentCount;
		internal IntPtr Attachments;
		internal unsafe fixed float BlendConstants[4];
	}

	internal partial struct PipelineDynamicStateCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt32 DynamicStateCount;
		internal IntPtr DynamicStates;
	}

	internal partial struct PipelineDepthStencilStateCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal Bool32 DepthTestEnable;
		internal Bool32 DepthWriteEnable;
		internal CompareOp DepthCompareOp;
		internal Bool32 DepthBoundsTestEnable;
		internal Bool32 StencilTestEnable;
		internal StencilOpState Front;
		internal StencilOpState Back;
		internal float MinDepthBounds;
		internal float MaxDepthBounds;
	}

	internal partial struct GraphicsPipelineCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PipelineCreateFlags Flags;
		internal UInt32 StageCount;
		internal IntPtr Stages;
		internal IntPtr VertexInputState;
		internal IntPtr InputAssemblyState;
		internal IntPtr TessellationState;
		internal IntPtr ViewportState;
		internal IntPtr RasterizationState;
		internal IntPtr MultisampleState;
		internal IntPtr DepthStencilState;
		internal IntPtr ColorBlendState;
		internal IntPtr DynamicState;
		internal UInt64 Layout;
		internal UInt64 RenderPass;
		internal UInt32 Subpass;
		internal UInt64 BasePipelineHandle;
		internal Int32 BasePipelineIndex;
	}

	internal partial struct PipelineCacheCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UIntPtr InitialDataSize;
		internal IntPtr InitialData;
	}

	internal partial struct PipelineLayoutCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt32 SetLayoutCount;
		internal IntPtr SetLayouts;
		internal UInt32 PushConstantRangeCount;
		internal IntPtr PushConstantRanges;
	}

	internal partial struct SamplerCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal SamplerCreateFlags Flags;
		internal Filter MagFilter;
		internal Filter MinFilter;
		internal SamplerMipmapMode MipmapMode;
		internal SamplerAddressMode AddressModeU;
		internal SamplerAddressMode AddressModeV;
		internal SamplerAddressMode AddressModeW;
		internal float MipLodBias;
		internal Bool32 AnisotropyEnable;
		internal float MaxAnisotropy;
		internal Bool32 CompareEnable;
		internal CompareOp CompareOp;
		internal float MinLod;
		internal float MaxLod;
		internal BorderColor BorderColor;
		internal Bool32 UnnormalizedCoordinates;
	}

	internal partial struct CommandPoolCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal CommandPoolCreateFlags Flags;
		internal UInt32 QueueFamilyIndex;
	}

	internal partial struct CommandBufferAllocateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 CommandPool;
		internal CommandBufferLevel Level;
		internal UInt32 CommandBufferCount;
	}

	internal partial struct CommandBufferInheritanceInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 RenderPass;
		internal UInt32 Subpass;
		internal UInt64 Framebuffer;
		internal Bool32 OcclusionQueryEnable;
		internal QueryControlFlags QueryFlags;
		internal QueryPipelineStatisticFlags PipelineStatistics;
	}

	internal partial struct CommandBufferBeginInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal CommandBufferUsageFlags Flags;
		internal IntPtr InheritanceInfo;
	}

	internal partial struct RenderPassBeginInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 RenderPass;
		internal UInt64 Framebuffer;
		internal Rect2D RenderArea;
		internal UInt32 ClearValueCount;
		internal IntPtr ClearValues;
	}

	internal partial struct ClearAttachment
	{
		internal ImageAspectFlags AspectMask;
		internal UInt32 ColorAttachment;
		internal ClearValue ClearValue;
	}

	internal partial struct SubpassDescription
	{
		internal SubpassDescriptionFlags Flags;
		internal PipelineBindPoint PipelineBindPoint;
		internal UInt32 InputAttachmentCount;
		internal IntPtr InputAttachments;
		internal UInt32 ColorAttachmentCount;
		internal IntPtr ColorAttachments;
		internal IntPtr ResolveAttachments;
		internal IntPtr DepthStencilAttachment;
		internal UInt32 PreserveAttachmentCount;
		internal IntPtr PreserveAttachments;
	}

	internal partial struct RenderPassCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt32 AttachmentCount;
		internal IntPtr Attachments;
		internal UInt32 SubpassCount;
		internal IntPtr Subpasses;
		internal UInt32 DependencyCount;
		internal IntPtr Dependencies;
	}

	internal partial struct EventCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
	}

	internal partial struct FenceCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal FenceCreateFlags Flags;
	}

	internal partial struct PhysicalDeviceLimits
	{
		internal UInt32 MaxImageDimension1D;
		internal UInt32 MaxImageDimension2D;
		internal UInt32 MaxImageDimension3D;
		internal UInt32 MaxImageDimensionCube;
		internal UInt32 MaxImageArrayLayers;
		internal UInt32 MaxTexelBufferElements;
		internal UInt32 MaxUniformBufferRange;
		internal UInt32 MaxStorageBufferRange;
		internal UInt32 MaxPushConstantsSize;
		internal UInt32 MaxMemoryAllocationCount;
		internal UInt32 MaxSamplerAllocationCount;
		internal DeviceSize BufferImageGranularity;
		internal DeviceSize SparseAddressSpaceSize;
		internal UInt32 MaxBoundDescriptorSets;
		internal UInt32 MaxPerStageDescriptorSamplers;
		internal UInt32 MaxPerStageDescriptorUniformBuffers;
		internal UInt32 MaxPerStageDescriptorStorageBuffers;
		internal UInt32 MaxPerStageDescriptorSampledImages;
		internal UInt32 MaxPerStageDescriptorStorageImages;
		internal UInt32 MaxPerStageDescriptorInputAttachments;
		internal UInt32 MaxPerStageResources;
		internal UInt32 MaxDescriptorSetSamplers;
		internal UInt32 MaxDescriptorSetUniformBuffers;
		internal UInt32 MaxDescriptorSetUniformBuffersDynamic;
		internal UInt32 MaxDescriptorSetStorageBuffers;
		internal UInt32 MaxDescriptorSetStorageBuffersDynamic;
		internal UInt32 MaxDescriptorSetSampledImages;
		internal UInt32 MaxDescriptorSetStorageImages;
		internal UInt32 MaxDescriptorSetInputAttachments;
		internal UInt32 MaxVertexInputAttributes;
		internal UInt32 MaxVertexInputBindings;
		internal UInt32 MaxVertexInputAttributeOffset;
		internal UInt32 MaxVertexInputBindingStride;
		internal UInt32 MaxVertexOutputComponents;
		internal UInt32 MaxTessellationGenerationLevel;
		internal UInt32 MaxTessellationPatchSize;
		internal UInt32 MaxTessellationControlPerVertexInputComponents;
		internal UInt32 MaxTessellationControlPerVertexOutputComponents;
		internal UInt32 MaxTessellationControlPerPatchOutputComponents;
		internal UInt32 MaxTessellationControlTotalOutputComponents;
		internal UInt32 MaxTessellationEvaluationInputComponents;
		internal UInt32 MaxTessellationEvaluationOutputComponents;
		internal UInt32 MaxGeometryShaderInvocations;
		internal UInt32 MaxGeometryInputComponents;
		internal UInt32 MaxGeometryOutputComponents;
		internal UInt32 MaxGeometryOutputVertices;
		internal UInt32 MaxGeometryTotalOutputComponents;
		internal UInt32 MaxFragmentInputComponents;
		internal UInt32 MaxFragmentOutputAttachments;
		internal UInt32 MaxFragmentDualSrcAttachments;
		internal UInt32 MaxFragmentCombinedOutputResources;
		internal UInt32 MaxComputeSharedMemorySize;
		internal unsafe fixed UInt32 MaxComputeWorkGroupCount[3];
		internal UInt32 MaxComputeWorkGroupInvocations;
		internal unsafe fixed UInt32 MaxComputeWorkGroupSize[3];
		internal UInt32 SubPixelPrecisionBits;
		internal UInt32 SubTexelPrecisionBits;
		internal UInt32 MipmapPrecisionBits;
		internal UInt32 MaxDrawIndexedIndexValue;
		internal UInt32 MaxDrawIndirectCount;
		internal float MaxSamplerLodBias;
		internal float MaxSamplerAnisotropy;
		internal UInt32 MaxViewports;
		internal unsafe fixed UInt32 MaxViewportDimensions[2];
		internal unsafe fixed float ViewportBoundsRange[2];
		internal UInt32 ViewportSubPixelBits;
		internal UIntPtr MinMemoryMapAlignment;
		internal DeviceSize MinTexelBufferOffsetAlignment;
		internal DeviceSize MinUniformBufferOffsetAlignment;
		internal DeviceSize MinStorageBufferOffsetAlignment;
		internal Int32 MinTexelOffset;
		internal UInt32 MaxTexelOffset;
		internal Int32 MinTexelGatherOffset;
		internal UInt32 MaxTexelGatherOffset;
		internal float MinInterpolationOffset;
		internal float MaxInterpolationOffset;
		internal UInt32 SubPixelInterpolationOffsetBits;
		internal UInt32 MaxFramebufferWidth;
		internal UInt32 MaxFramebufferHeight;
		internal UInt32 MaxFramebufferLayers;
		internal SampleCountFlags FramebufferColorSampleCounts;
		internal SampleCountFlags FramebufferDepthSampleCounts;
		internal SampleCountFlags FramebufferStencilSampleCounts;
		internal SampleCountFlags FramebufferNoAttachmentsSampleCounts;
		internal UInt32 MaxColorAttachments;
		internal SampleCountFlags SampledImageColorSampleCounts;
		internal SampleCountFlags SampledImageIntegerSampleCounts;
		internal SampleCountFlags SampledImageDepthSampleCounts;
		internal SampleCountFlags SampledImageStencilSampleCounts;
		internal SampleCountFlags StorageImageSampleCounts;
		internal UInt32 MaxSampleMaskWords;
		internal Bool32 TimestampComputeAndGraphics;
		internal float TimestampPeriod;
		internal UInt32 MaxClipDistances;
		internal UInt32 MaxCullDistances;
		internal UInt32 MaxCombinedClipAndCullDistances;
		internal UInt32 DiscreteQueuePriorities;
		internal unsafe fixed float PointSizeRange[2];
		internal unsafe fixed float LineWidthRange[2];
		internal float PointSizeGranularity;
		internal float LineWidthGranularity;
		internal Bool32 StrictLines;
		internal Bool32 StandardSampleLocations;
		internal DeviceSize OptimalBufferCopyOffsetAlignment;
		internal DeviceSize OptimalBufferCopyRowPitchAlignment;
		internal DeviceSize NonCoherentAtomSize;
	}

	internal partial struct SemaphoreCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
	}

	internal partial struct QueryPoolCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal QueryType QueryType;
		internal UInt32 QueryCount;
		internal QueryPipelineStatisticFlags PipelineStatistics;
	}

	internal partial struct FramebufferCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt64 RenderPass;
		internal UInt32 AttachmentCount;
		internal IntPtr Attachments;
		internal UInt32 Width;
		internal UInt32 Height;
		internal UInt32 Layers;
	}

	internal partial struct SubmitInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 WaitSemaphoreCount;
		internal IntPtr WaitSemaphores;
		internal IntPtr WaitDstStageMask;
		internal UInt32 CommandBufferCount;
		internal IntPtr CommandBuffers;
		internal UInt32 SignalSemaphoreCount;
		internal IntPtr SignalSemaphores;
	}

	internal partial struct DisplayPropertiesKhr
	{
		internal UInt64 Display;
		internal IntPtr DisplayName;
		internal Extent2D PhysicalDimensions;
		internal Extent2D PhysicalResolution;
		internal SurfaceTransformFlagsKhr SupportedTransforms;
		internal Bool32 PlaneReorderPossible;
		internal Bool32 PersistentContent;
	}

	internal partial struct DisplayPlanePropertiesKhr
	{
		internal UInt64 CurrentDisplay;
		internal UInt32 CurrentStackIndex;
	}

	internal partial struct DisplayModePropertiesKhr
	{
		internal UInt64 DisplayMode;
		internal DisplayModeParametersKhr Parameters;
	}

	internal partial struct DisplayModeCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal DisplayModeParametersKhr Parameters;
	}

	internal partial struct DisplaySurfaceCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt64 DisplayMode;
		internal UInt32 PlaneIndex;
		internal UInt32 PlaneStackIndex;
		internal SurfaceTransformFlagsKhr Transform;
		internal float GlobalAlpha;
		internal DisplayPlaneAlphaFlagsKhr AlphaMode;
		internal Extent2D ImageExtent;
	}

	internal partial struct DisplayPresentInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Rect2D SrcRect;
		internal Rect2D DstRect;
		internal Bool32 Persistent;
	}

	internal partial struct ViSurfaceCreateInfoNn
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal IntPtr Window;
	}

	internal partial struct ImagePipeSurfaceCreateInfoFUCHSIA
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt32 ImagePipeHandle;
	}

	internal partial struct StreamDescriptorSurfaceCreateInfoGGP
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal int StreamDescriptor;
	}

	internal partial struct SwapchainCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal SwapchainCreateFlagsKhr Flags;
		internal UInt64 Surface;
		internal UInt32 MinImageCount;
		internal Format ImageFormat;
		internal ColorSpaceKhr ImageColorSpace;
		internal Extent2D ImageExtent;
		internal UInt32 ImageArrayLayers;
		internal ImageUsageFlags ImageUsage;
		internal SharingMode ImageSharingMode;
		internal UInt32 QueueFamilyIndexCount;
		internal IntPtr QueueFamilyIndices;
		internal SurfaceTransformFlagsKhr PreTransform;
		internal CompositeAlphaFlagsKhr CompositeAlpha;
		internal PresentModeKhr PresentMode;
		internal Bool32 Clipped;
		internal UInt64 OldSwapchain;
	}

	internal partial struct PresentInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 WaitSemaphoreCount;
		internal IntPtr WaitSemaphores;
		internal UInt32 SwapchainCount;
		internal IntPtr Swapchains;
		internal IntPtr ImageIndices;
		internal IntPtr Results;
	}

	internal partial struct DebugReportCallbackCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DebugReportFlagsExt Flags;
		internal IntPtr PfnCallback;
		internal IntPtr UserData;
	}

	internal partial struct ValidationFlagsExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 DisabledValidationCheckCount;
		internal IntPtr DisabledValidationChecks;
	}

	internal partial struct ValidationFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 EnabledValidationFeatureCount;
		internal IntPtr EnabledValidationFeatures;
		internal UInt32 DisabledValidationFeatureCount;
		internal IntPtr DisabledValidationFeatures;
	}

	internal partial struct PipelineRasterizationStateRasterizationOrderAmd
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal RasterizationOrderAmd RasterizationOrder;
	}

	internal partial struct DebugMarkerObjectNameInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DebugReportObjectTypeExt ObjectType;
		internal UInt64 Object;
		internal IntPtr ObjectName;
	}

	internal partial struct DebugMarkerObjectTagInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DebugReportObjectTypeExt ObjectType;
		internal UInt64 Object;
		internal UInt64 TagName;
		internal UIntPtr TagSize;
		internal IntPtr Tag;
	}

	internal partial struct DebugMarkerMarkerInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal IntPtr MarkerName;
		internal unsafe fixed float Color[4];
	}

	internal partial struct DedicatedAllocationImageCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 DedicatedAllocation;
	}

	internal partial struct DedicatedAllocationBufferCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 DedicatedAllocation;
	}

	internal partial struct DedicatedAllocationMemoryAllocateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Image;
		internal UInt64 Buffer;
	}

	internal partial struct ExternalMemoryImageCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryHandleTypeFlagsNv HandleTypes;
	}

	internal partial struct ExportMemoryAllocateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryHandleTypeFlagsNv HandleTypes;
	}

	internal partial struct DeviceGeneratedCommandsFeaturesNvx
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ComputeBindingPointSupport;
	}

	internal partial struct DeviceGeneratedCommandsLimitsNvx
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MaxIndirectCommandsLayoutTokenCount;
		internal UInt32 MaxObjectEntryCounts;
		internal UInt32 MinSequenceCountBufferOffsetAlignment;
		internal UInt32 MinSequenceIndexBufferOffsetAlignment;
		internal UInt32 MinCommandsTokenBufferOffsetAlignment;
	}

	internal partial struct IndirectCommandsTokenNvx
	{
		internal IndirectCommandsTokenTypeNvx TokenType;
		internal UInt64 Buffer;
		internal DeviceSize Offset;
	}

	internal partial struct IndirectCommandsLayoutCreateInfoNvx
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PipelineBindPoint PipelineBindPoint;
		internal IndirectCommandsLayoutUsageFlagsNvx Flags;
		internal UInt32 TokenCount;
		internal IntPtr Tokens;
	}

	internal partial struct CmdProcessCommandsInfoNvx
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 ObjectTable;
		internal UInt64 IndirectCommandsLayout;
		internal UInt32 IndirectCommandsTokenCount;
		internal IntPtr IndirectCommandsTokens;
		internal UInt32 MaxSequencesCount;
		internal IntPtr TargetCommandBuffer;
		internal UInt64 SequencesCountBuffer;
		internal DeviceSize SequencesCountOffset;
		internal UInt64 SequencesIndexBuffer;
		internal DeviceSize SequencesIndexOffset;
	}

	internal partial struct CmdReserveSpaceForCommandsInfoNvx
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 ObjectTable;
		internal UInt64 IndirectCommandsLayout;
		internal UInt32 MaxSequencesCount;
	}

	internal partial struct ObjectTableCreateInfoNvx
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 ObjectCount;
		internal IntPtr ObjectEntryTypes;
		internal IntPtr ObjectEntryCounts;
		internal IntPtr ObjectEntryUsageFlags;
		internal UInt32 MaxUniformBuffersPerDescriptor;
		internal UInt32 MaxStorageBuffersPerDescriptor;
		internal UInt32 MaxStorageImagesPerDescriptor;
		internal UInt32 MaxSampledImagesPerDescriptor;
		internal UInt32 MaxPipelineLayouts;
	}

	internal partial struct ObjectTablePipelineEntryNvx
	{
		internal ObjectEntryTypeNvx Type;
		internal ObjectEntryUsageFlagsNvx Flags;
		internal UInt64 Pipeline;
	}

	internal partial struct ObjectTableDescriptorSetEntryNvx
	{
		internal ObjectEntryTypeNvx Type;
		internal ObjectEntryUsageFlagsNvx Flags;
		internal UInt64 PipelineLayout;
		internal UInt64 DescriptorSet;
	}

	internal partial struct ObjectTableVertexBufferEntryNvx
	{
		internal ObjectEntryTypeNvx Type;
		internal ObjectEntryUsageFlagsNvx Flags;
		internal UInt64 Buffer;
	}

	internal partial struct ObjectTableIndexBufferEntryNvx
	{
		internal ObjectEntryTypeNvx Type;
		internal ObjectEntryUsageFlagsNvx Flags;
		internal UInt64 Buffer;
		internal IndexType IndexType;
	}

	internal partial struct ObjectTablePushConstantEntryNvx
	{
		internal ObjectEntryTypeNvx Type;
		internal ObjectEntryUsageFlagsNvx Flags;
		internal UInt64 PipelineLayout;
		internal ShaderStageFlags StageFlags;
	}

	internal partial struct PhysicalDeviceFeatures2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PhysicalDeviceFeatures Features;
	}

	internal partial struct PhysicalDeviceFeatures2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PhysicalDeviceFeatures Features;

		public static implicit operator PhysicalDeviceFeatures2Khr (PhysicalDeviceFeatures2 that) {
			var ret = new PhysicalDeviceFeatures2Khr {
				SType = that.SType,
				Next = that.Next,
				Features = that.Features,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceFeatures2 (PhysicalDeviceFeatures2Khr that) {
			var ret = new PhysicalDeviceFeatures2 {
				SType = that.SType,
				Next = that.Next,
				Features = that.Features,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceProperties2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PhysicalDeviceProperties Properties;
	}

	internal partial struct PhysicalDeviceProperties2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PhysicalDeviceProperties Properties;

		public static implicit operator PhysicalDeviceProperties2Khr (PhysicalDeviceProperties2 that) {
			var ret = new PhysicalDeviceProperties2Khr {
				SType = that.SType,
				Next = that.Next,
				Properties = that.Properties,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceProperties2 (PhysicalDeviceProperties2Khr that) {
			var ret = new PhysicalDeviceProperties2 {
				SType = that.SType,
				Next = that.Next,
				Properties = that.Properties,
			};

			return ret;
		}
	}

	internal partial struct FormatProperties2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal FormatProperties FormatProperties;
	}

	internal partial struct FormatProperties2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal FormatProperties FormatProperties;

		public static implicit operator FormatProperties2Khr (FormatProperties2 that) {
			var ret = new FormatProperties2Khr {
				SType = that.SType,
				Next = that.Next,
				FormatProperties = that.FormatProperties,
			};

			return ret;
		}

		public static implicit operator FormatProperties2 (FormatProperties2Khr that) {
			var ret = new FormatProperties2 {
				SType = that.SType,
				Next = that.Next,
				FormatProperties = that.FormatProperties,
			};

			return ret;
		}
	}

	internal partial struct ImageFormatProperties2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ImageFormatProperties ImageFormatProperties;
	}

	internal partial struct ImageFormatProperties2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ImageFormatProperties ImageFormatProperties;

		public static implicit operator ImageFormatProperties2Khr (ImageFormatProperties2 that) {
			var ret = new ImageFormatProperties2Khr {
				SType = that.SType,
				Next = that.Next,
				ImageFormatProperties = that.ImageFormatProperties,
			};

			return ret;
		}

		public static implicit operator ImageFormatProperties2 (ImageFormatProperties2Khr that) {
			var ret = new ImageFormatProperties2 {
				SType = that.SType,
				Next = that.Next,
				ImageFormatProperties = that.ImageFormatProperties,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceImageFormatInfo2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Format Format;
		internal ImageType Type;
		internal ImageTiling Tiling;
		internal ImageUsageFlags Usage;
		internal ImageCreateFlags Flags;
	}

	internal partial struct PhysicalDeviceImageFormatInfo2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Format Format;
		internal ImageType Type;
		internal ImageTiling Tiling;
		internal ImageUsageFlags Usage;
		internal ImageCreateFlags Flags;

		public static implicit operator PhysicalDeviceImageFormatInfo2Khr (PhysicalDeviceImageFormatInfo2 that) {
			var ret = new PhysicalDeviceImageFormatInfo2Khr {
				SType = that.SType,
				Next = that.Next,
				Format = that.Format,
				Type = that.Type,
				Tiling = that.Tiling,
				Usage = that.Usage,
				Flags = that.Flags,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceImageFormatInfo2 (PhysicalDeviceImageFormatInfo2Khr that) {
			var ret = new PhysicalDeviceImageFormatInfo2 {
				SType = that.SType,
				Next = that.Next,
				Format = that.Format,
				Type = that.Type,
				Tiling = that.Tiling,
				Usage = that.Usage,
				Flags = that.Flags,
			};

			return ret;
		}
	}

	internal partial struct QueueFamilyProperties2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal QueueFamilyProperties QueueFamilyProperties;
	}

	internal partial struct QueueFamilyProperties2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal QueueFamilyProperties QueueFamilyProperties;

		public static implicit operator QueueFamilyProperties2Khr (QueueFamilyProperties2 that) {
			var ret = new QueueFamilyProperties2Khr {
				SType = that.SType,
				Next = that.Next,
				QueueFamilyProperties = that.QueueFamilyProperties,
			};

			return ret;
		}

		public static implicit operator QueueFamilyProperties2 (QueueFamilyProperties2Khr that) {
			var ret = new QueueFamilyProperties2 {
				SType = that.SType,
				Next = that.Next,
				QueueFamilyProperties = that.QueueFamilyProperties,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceMemoryProperties2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PhysicalDeviceMemoryProperties MemoryProperties;
	}

	internal partial struct PhysicalDeviceMemoryProperties2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PhysicalDeviceMemoryProperties MemoryProperties;

		public static implicit operator PhysicalDeviceMemoryProperties2Khr (PhysicalDeviceMemoryProperties2 that) {
			var ret = new PhysicalDeviceMemoryProperties2Khr {
				SType = that.SType,
				Next = that.Next,
				MemoryProperties = that.MemoryProperties,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceMemoryProperties2 (PhysicalDeviceMemoryProperties2Khr that) {
			var ret = new PhysicalDeviceMemoryProperties2 {
				SType = that.SType,
				Next = that.Next,
				MemoryProperties = that.MemoryProperties,
			};

			return ret;
		}
	}

	internal partial struct SparseImageFormatProperties2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal SparseImageFormatProperties Properties;
	}

	internal partial struct SparseImageFormatProperties2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal SparseImageFormatProperties Properties;

		public static implicit operator SparseImageFormatProperties2Khr (SparseImageFormatProperties2 that) {
			var ret = new SparseImageFormatProperties2Khr {
				SType = that.SType,
				Next = that.Next,
				Properties = that.Properties,
			};

			return ret;
		}

		public static implicit operator SparseImageFormatProperties2 (SparseImageFormatProperties2Khr that) {
			var ret = new SparseImageFormatProperties2 {
				SType = that.SType,
				Next = that.Next,
				Properties = that.Properties,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceSparseImageFormatInfo2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Format Format;
		internal ImageType Type;
		internal SampleCountFlags Samples;
		internal ImageUsageFlags Usage;
		internal ImageTiling Tiling;
	}

	internal partial struct PhysicalDeviceSparseImageFormatInfo2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Format Format;
		internal ImageType Type;
		internal SampleCountFlags Samples;
		internal ImageUsageFlags Usage;
		internal ImageTiling Tiling;

		public static implicit operator PhysicalDeviceSparseImageFormatInfo2Khr (PhysicalDeviceSparseImageFormatInfo2 that) {
			var ret = new PhysicalDeviceSparseImageFormatInfo2Khr {
				SType = that.SType,
				Next = that.Next,
				Format = that.Format,
				Type = that.Type,
				Samples = that.Samples,
				Usage = that.Usage,
				Tiling = that.Tiling,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceSparseImageFormatInfo2 (PhysicalDeviceSparseImageFormatInfo2Khr that) {
			var ret = new PhysicalDeviceSparseImageFormatInfo2 {
				SType = that.SType,
				Next = that.Next,
				Format = that.Format,
				Type = that.Type,
				Samples = that.Samples,
				Usage = that.Usage,
				Tiling = that.Tiling,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDevicePushDescriptorPropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MaxPushDescriptors;
	}

	internal partial struct PhysicalDeviceDriverPropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DriverIdKhr DriverId;
		internal unsafe fixed byte DriverName[256];
		internal unsafe fixed byte DriverInfo[256];
		internal ConformanceVersionKhr ConformanceVersion;
	}

	internal partial struct PresentRegionsKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 SwapchainCount;
		internal IntPtr Regions;
	}

	internal partial struct PresentRegionKhr
	{
		internal UInt32 RectangleCount;
		internal IntPtr Rectangles;
	}

	internal partial struct PhysicalDeviceVariablePointersFeatures
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 VariablePointersStorageBuffer;
		internal Bool32 VariablePointers;
	}

	internal partial struct PhysicalDeviceVariablePointersFeaturesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 VariablePointersStorageBuffer;
		internal Bool32 VariablePointers;

		public static implicit operator PhysicalDeviceVariablePointersFeaturesKhr (PhysicalDeviceVariablePointersFeatures that) {
			var ret = new PhysicalDeviceVariablePointersFeaturesKhr {
				SType = that.SType,
				Next = that.Next,
				VariablePointersStorageBuffer = that.VariablePointersStorageBuffer,
				VariablePointers = that.VariablePointers,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceVariablePointersFeatures (PhysicalDeviceVariablePointersFeaturesKhr that) {
			var ret = new PhysicalDeviceVariablePointersFeatures {
				SType = that.SType,
				Next = that.Next,
				VariablePointersStorageBuffer = that.VariablePointersStorageBuffer,
				VariablePointers = that.VariablePointers,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceVariablePointerFeaturesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 VariablePointersStorageBuffer;
		internal Bool32 VariablePointers;

		public static implicit operator PhysicalDeviceVariablePointerFeaturesKhr (PhysicalDeviceVariablePointersFeatures that) {
			var ret = new PhysicalDeviceVariablePointerFeaturesKhr {
				SType = that.SType,
				Next = that.Next,
				VariablePointersStorageBuffer = that.VariablePointersStorageBuffer,
				VariablePointers = that.VariablePointers,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceVariablePointersFeatures (PhysicalDeviceVariablePointerFeaturesKhr that) {
			var ret = new PhysicalDeviceVariablePointersFeatures {
				SType = that.SType,
				Next = that.Next,
				VariablePointersStorageBuffer = that.VariablePointersStorageBuffer,
				VariablePointers = that.VariablePointers,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceVariablePointerFeatures
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 VariablePointersStorageBuffer;
		internal Bool32 VariablePointers;

		public static implicit operator PhysicalDeviceVariablePointerFeatures (PhysicalDeviceVariablePointersFeatures that) {
			var ret = new PhysicalDeviceVariablePointerFeatures {
				SType = that.SType,
				Next = that.Next,
				VariablePointersStorageBuffer = that.VariablePointersStorageBuffer,
				VariablePointers = that.VariablePointers,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceVariablePointersFeatures (PhysicalDeviceVariablePointerFeatures that) {
			var ret = new PhysicalDeviceVariablePointersFeatures {
				SType = that.SType,
				Next = that.Next,
				VariablePointersStorageBuffer = that.VariablePointersStorageBuffer,
				VariablePointers = that.VariablePointers,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceExternalImageFormatInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryHandleTypeFlags HandleType;
	}

	internal partial struct PhysicalDeviceExternalImageFormatInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryHandleTypeFlags HandleType;

		public static implicit operator PhysicalDeviceExternalImageFormatInfoKhr (PhysicalDeviceExternalImageFormatInfo that) {
			var ret = new PhysicalDeviceExternalImageFormatInfoKhr {
				SType = that.SType,
				Next = that.Next,
				HandleType = that.HandleType,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceExternalImageFormatInfo (PhysicalDeviceExternalImageFormatInfoKhr that) {
			var ret = new PhysicalDeviceExternalImageFormatInfo {
				SType = that.SType,
				Next = that.Next,
				HandleType = that.HandleType,
			};

			return ret;
		}
	}

	internal partial struct ExternalImageFormatProperties
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryProperties ExternalMemoryProperties;
	}

	internal partial struct ExternalImageFormatPropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryProperties ExternalMemoryProperties;

		public static implicit operator ExternalImageFormatPropertiesKhr (ExternalImageFormatProperties that) {
			var ret = new ExternalImageFormatPropertiesKhr {
				SType = that.SType,
				Next = that.Next,
				ExternalMemoryProperties = that.ExternalMemoryProperties,
			};

			return ret;
		}

		public static implicit operator ExternalImageFormatProperties (ExternalImageFormatPropertiesKhr that) {
			var ret = new ExternalImageFormatProperties {
				SType = that.SType,
				Next = that.Next,
				ExternalMemoryProperties = that.ExternalMemoryProperties,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceExternalBufferInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal BufferCreateFlags Flags;
		internal BufferUsageFlags Usage;
		internal ExternalMemoryHandleTypeFlags HandleType;
	}

	internal partial struct PhysicalDeviceExternalBufferInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal BufferCreateFlags Flags;
		internal BufferUsageFlags Usage;
		internal ExternalMemoryHandleTypeFlags HandleType;

		public static implicit operator PhysicalDeviceExternalBufferInfoKhr (PhysicalDeviceExternalBufferInfo that) {
			var ret = new PhysicalDeviceExternalBufferInfoKhr {
				SType = that.SType,
				Next = that.Next,
				Flags = that.Flags,
				Usage = that.Usage,
				HandleType = that.HandleType,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceExternalBufferInfo (PhysicalDeviceExternalBufferInfoKhr that) {
			var ret = new PhysicalDeviceExternalBufferInfo {
				SType = that.SType,
				Next = that.Next,
				Flags = that.Flags,
				Usage = that.Usage,
				HandleType = that.HandleType,
			};

			return ret;
		}
	}

	internal partial struct ExternalBufferProperties
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryProperties ExternalMemoryProperties;
	}

	internal partial struct ExternalBufferPropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryProperties ExternalMemoryProperties;

		public static implicit operator ExternalBufferPropertiesKhr (ExternalBufferProperties that) {
			var ret = new ExternalBufferPropertiesKhr {
				SType = that.SType,
				Next = that.Next,
				ExternalMemoryProperties = that.ExternalMemoryProperties,
			};

			return ret;
		}

		public static implicit operator ExternalBufferProperties (ExternalBufferPropertiesKhr that) {
			var ret = new ExternalBufferProperties {
				SType = that.SType,
				Next = that.Next,
				ExternalMemoryProperties = that.ExternalMemoryProperties,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceIDProperties
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal unsafe fixed byte DeviceUuid[16];
		internal unsafe fixed byte DriverUuid[16];
		internal unsafe fixed byte DeviceLuid[8];
		internal UInt32 DeviceNodeMask;
		internal Bool32 DeviceLuidvalid;
	}

	internal partial struct PhysicalDeviceIDPropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal unsafe fixed byte DeviceUuid[16];
		internal unsafe fixed byte DriverUuid[16];
		internal unsafe fixed byte DeviceLuid[8];
		internal UInt32 DeviceNodeMask;
		internal Bool32 DeviceLuidvalid;

		unsafe public static implicit operator PhysicalDeviceIDPropertiesKhr (PhysicalDeviceIDProperties that) {
			var ret = new PhysicalDeviceIDPropertiesKhr {
				SType = that.SType,
				Next = that.Next,
				DeviceNodeMask = that.DeviceNodeMask,
				DeviceLuidvalid = that.DeviceLuidvalid,
			};

			ret.DeviceUuid[0] = that.DeviceUuid[0];
			ret.DeviceUuid[1] = that.DeviceUuid[1];
			ret.DeviceUuid[2] = that.DeviceUuid[2];
			ret.DeviceUuid[3] = that.DeviceUuid[3];
			ret.DeviceUuid[4] = that.DeviceUuid[4];
			ret.DeviceUuid[5] = that.DeviceUuid[5];
			ret.DeviceUuid[6] = that.DeviceUuid[6];
			ret.DeviceUuid[7] = that.DeviceUuid[7];
			ret.DeviceUuid[8] = that.DeviceUuid[8];
			ret.DeviceUuid[9] = that.DeviceUuid[9];
			ret.DeviceUuid[10] = that.DeviceUuid[10];
			ret.DeviceUuid[11] = that.DeviceUuid[11];
			ret.DeviceUuid[12] = that.DeviceUuid[12];
			ret.DeviceUuid[13] = that.DeviceUuid[13];
			ret.DeviceUuid[14] = that.DeviceUuid[14];
			ret.DeviceUuid[15] = that.DeviceUuid[15];

			ret.DriverUuid[0] = that.DriverUuid[0];
			ret.DriverUuid[1] = that.DriverUuid[1];
			ret.DriverUuid[2] = that.DriverUuid[2];
			ret.DriverUuid[3] = that.DriverUuid[3];
			ret.DriverUuid[4] = that.DriverUuid[4];
			ret.DriverUuid[5] = that.DriverUuid[5];
			ret.DriverUuid[6] = that.DriverUuid[6];
			ret.DriverUuid[7] = that.DriverUuid[7];
			ret.DriverUuid[8] = that.DriverUuid[8];
			ret.DriverUuid[9] = that.DriverUuid[9];
			ret.DriverUuid[10] = that.DriverUuid[10];
			ret.DriverUuid[11] = that.DriverUuid[11];
			ret.DriverUuid[12] = that.DriverUuid[12];
			ret.DriverUuid[13] = that.DriverUuid[13];
			ret.DriverUuid[14] = that.DriverUuid[14];
			ret.DriverUuid[15] = that.DriverUuid[15];

			ret.DeviceLuid[0] = that.DeviceLuid[0];
			ret.DeviceLuid[1] = that.DeviceLuid[1];
			ret.DeviceLuid[2] = that.DeviceLuid[2];
			ret.DeviceLuid[3] = that.DeviceLuid[3];
			ret.DeviceLuid[4] = that.DeviceLuid[4];
			ret.DeviceLuid[5] = that.DeviceLuid[5];
			ret.DeviceLuid[6] = that.DeviceLuid[6];
			ret.DeviceLuid[7] = that.DeviceLuid[7];

			return ret;
		}

		unsafe public static implicit operator PhysicalDeviceIDProperties (PhysicalDeviceIDPropertiesKhr that) {
			var ret = new PhysicalDeviceIDProperties {
				SType = that.SType,
				Next = that.Next,
				DeviceNodeMask = that.DeviceNodeMask,
				DeviceLuidvalid = that.DeviceLuidvalid,
			};

			ret.DeviceUuid[0] = that.DeviceUuid[0];
			ret.DeviceUuid[1] = that.DeviceUuid[1];
			ret.DeviceUuid[2] = that.DeviceUuid[2];
			ret.DeviceUuid[3] = that.DeviceUuid[3];
			ret.DeviceUuid[4] = that.DeviceUuid[4];
			ret.DeviceUuid[5] = that.DeviceUuid[5];
			ret.DeviceUuid[6] = that.DeviceUuid[6];
			ret.DeviceUuid[7] = that.DeviceUuid[7];
			ret.DeviceUuid[8] = that.DeviceUuid[8];
			ret.DeviceUuid[9] = that.DeviceUuid[9];
			ret.DeviceUuid[10] = that.DeviceUuid[10];
			ret.DeviceUuid[11] = that.DeviceUuid[11];
			ret.DeviceUuid[12] = that.DeviceUuid[12];
			ret.DeviceUuid[13] = that.DeviceUuid[13];
			ret.DeviceUuid[14] = that.DeviceUuid[14];
			ret.DeviceUuid[15] = that.DeviceUuid[15];

			ret.DriverUuid[0] = that.DriverUuid[0];
			ret.DriverUuid[1] = that.DriverUuid[1];
			ret.DriverUuid[2] = that.DriverUuid[2];
			ret.DriverUuid[3] = that.DriverUuid[3];
			ret.DriverUuid[4] = that.DriverUuid[4];
			ret.DriverUuid[5] = that.DriverUuid[5];
			ret.DriverUuid[6] = that.DriverUuid[6];
			ret.DriverUuid[7] = that.DriverUuid[7];
			ret.DriverUuid[8] = that.DriverUuid[8];
			ret.DriverUuid[9] = that.DriverUuid[9];
			ret.DriverUuid[10] = that.DriverUuid[10];
			ret.DriverUuid[11] = that.DriverUuid[11];
			ret.DriverUuid[12] = that.DriverUuid[12];
			ret.DriverUuid[13] = that.DriverUuid[13];
			ret.DriverUuid[14] = that.DriverUuid[14];
			ret.DriverUuid[15] = that.DriverUuid[15];

			ret.DeviceLuid[0] = that.DeviceLuid[0];
			ret.DeviceLuid[1] = that.DeviceLuid[1];
			ret.DeviceLuid[2] = that.DeviceLuid[2];
			ret.DeviceLuid[3] = that.DeviceLuid[3];
			ret.DeviceLuid[4] = that.DeviceLuid[4];
			ret.DeviceLuid[5] = that.DeviceLuid[5];
			ret.DeviceLuid[6] = that.DeviceLuid[6];
			ret.DeviceLuid[7] = that.DeviceLuid[7];

			return ret;
		}
	}

	internal partial struct ExternalMemoryImageCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryHandleTypeFlags HandleTypes;
	}

	internal partial struct ExternalMemoryImageCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryHandleTypeFlags HandleTypes;

		public static implicit operator ExternalMemoryImageCreateInfoKhr (ExternalMemoryImageCreateInfo that) {
			var ret = new ExternalMemoryImageCreateInfoKhr {
				SType = that.SType,
				Next = that.Next,
				HandleTypes = that.HandleTypes,
			};

			return ret;
		}

		public static implicit operator ExternalMemoryImageCreateInfo (ExternalMemoryImageCreateInfoKhr that) {
			var ret = new ExternalMemoryImageCreateInfo {
				SType = that.SType,
				Next = that.Next,
				HandleTypes = that.HandleTypes,
			};

			return ret;
		}
	}

	internal partial struct ExternalMemoryBufferCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryHandleTypeFlags HandleTypes;
	}

	internal partial struct ExternalMemoryBufferCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryHandleTypeFlags HandleTypes;

		public static implicit operator ExternalMemoryBufferCreateInfoKhr (ExternalMemoryBufferCreateInfo that) {
			var ret = new ExternalMemoryBufferCreateInfoKhr {
				SType = that.SType,
				Next = that.Next,
				HandleTypes = that.HandleTypes,
			};

			return ret;
		}

		public static implicit operator ExternalMemoryBufferCreateInfo (ExternalMemoryBufferCreateInfoKhr that) {
			var ret = new ExternalMemoryBufferCreateInfo {
				SType = that.SType,
				Next = that.Next,
				HandleTypes = that.HandleTypes,
			};

			return ret;
		}
	}

	internal partial struct ExportMemoryAllocateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryHandleTypeFlags HandleTypes;
	}

	internal partial struct ExportMemoryAllocateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryHandleTypeFlags HandleTypes;

		public static implicit operator ExportMemoryAllocateInfoKhr (ExportMemoryAllocateInfo that) {
			var ret = new ExportMemoryAllocateInfoKhr {
				SType = that.SType,
				Next = that.Next,
				HandleTypes = that.HandleTypes,
			};

			return ret;
		}

		public static implicit operator ExportMemoryAllocateInfo (ExportMemoryAllocateInfoKhr that) {
			var ret = new ExportMemoryAllocateInfo {
				SType = that.SType,
				Next = that.Next,
				HandleTypes = that.HandleTypes,
			};

			return ret;
		}
	}

	internal partial struct MemoryWin32HandlePropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MemoryTypeBits;
	}

	internal partial struct MemoryGetWin32HandleInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Memory;
		internal ExternalMemoryHandleTypeFlags HandleType;
	}

	internal partial struct ImportMemoryFdInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryHandleTypeFlags HandleType;
		internal int Fd;
	}

	internal partial struct MemoryFdPropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MemoryTypeBits;
	}

	internal partial struct MemoryGetFdInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Memory;
		internal ExternalMemoryHandleTypeFlags HandleType;
	}

	internal partial struct Win32KeyedMutexAcquireReleaseInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 AcquireCount;
		internal IntPtr AcquireSyncs;
		internal IntPtr AcquireKeys;
		internal IntPtr AcquireTimeouts;
		internal UInt32 ReleaseCount;
		internal IntPtr ReleaseSyncs;
		internal IntPtr ReleaseKeys;
	}

	internal partial struct PhysicalDeviceExternalSemaphoreInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalSemaphoreHandleTypeFlags HandleType;
	}

	internal partial struct PhysicalDeviceExternalSemaphoreInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalSemaphoreHandleTypeFlags HandleType;

		public static implicit operator PhysicalDeviceExternalSemaphoreInfoKhr (PhysicalDeviceExternalSemaphoreInfo that) {
			var ret = new PhysicalDeviceExternalSemaphoreInfoKhr {
				SType = that.SType,
				Next = that.Next,
				HandleType = that.HandleType,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceExternalSemaphoreInfo (PhysicalDeviceExternalSemaphoreInfoKhr that) {
			var ret = new PhysicalDeviceExternalSemaphoreInfo {
				SType = that.SType,
				Next = that.Next,
				HandleType = that.HandleType,
			};

			return ret;
		}
	}

	internal partial struct ExternalSemaphoreProperties
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalSemaphoreHandleTypeFlags ExportFromImportedHandleTypes;
		internal ExternalSemaphoreHandleTypeFlags CompatibleHandleTypes;
		internal ExternalSemaphoreFeatureFlags ExternalSemaphoreFeatures;
	}

	internal partial struct ExternalSemaphorePropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalSemaphoreHandleTypeFlags ExportFromImportedHandleTypes;
		internal ExternalSemaphoreHandleTypeFlags CompatibleHandleTypes;
		internal ExternalSemaphoreFeatureFlags ExternalSemaphoreFeatures;

		public static implicit operator ExternalSemaphorePropertiesKhr (ExternalSemaphoreProperties that) {
			var ret = new ExternalSemaphorePropertiesKhr {
				SType = that.SType,
				Next = that.Next,
				ExportFromImportedHandleTypes = that.ExportFromImportedHandleTypes,
				CompatibleHandleTypes = that.CompatibleHandleTypes,
				ExternalSemaphoreFeatures = that.ExternalSemaphoreFeatures,
			};

			return ret;
		}

		public static implicit operator ExternalSemaphoreProperties (ExternalSemaphorePropertiesKhr that) {
			var ret = new ExternalSemaphoreProperties {
				SType = that.SType,
				Next = that.Next,
				ExportFromImportedHandleTypes = that.ExportFromImportedHandleTypes,
				CompatibleHandleTypes = that.CompatibleHandleTypes,
				ExternalSemaphoreFeatures = that.ExternalSemaphoreFeatures,
			};

			return ret;
		}
	}

	internal partial struct ExportSemaphoreCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalSemaphoreHandleTypeFlags HandleTypes;
	}

	internal partial struct ExportSemaphoreCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalSemaphoreHandleTypeFlags HandleTypes;

		public static implicit operator ExportSemaphoreCreateInfoKhr (ExportSemaphoreCreateInfo that) {
			var ret = new ExportSemaphoreCreateInfoKhr {
				SType = that.SType,
				Next = that.Next,
				HandleTypes = that.HandleTypes,
			};

			return ret;
		}

		public static implicit operator ExportSemaphoreCreateInfo (ExportSemaphoreCreateInfoKhr that) {
			var ret = new ExportSemaphoreCreateInfo {
				SType = that.SType,
				Next = that.Next,
				HandleTypes = that.HandleTypes,
			};

			return ret;
		}
	}

	internal partial struct D3D12FenceSubmitInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 WaitSemaphoreValuesCount;
		internal IntPtr WaitSemaphoreValues;
		internal UInt32 SignalSemaphoreValuesCount;
		internal IntPtr SignalSemaphoreValues;
	}

	internal partial struct SemaphoreGetWin32HandleInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Semaphore;
		internal ExternalSemaphoreHandleTypeFlags HandleType;
	}

	internal partial struct ImportSemaphoreFdInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Semaphore;
		internal SemaphoreImportFlags Flags;
		internal ExternalSemaphoreHandleTypeFlags HandleType;
		internal int Fd;
	}

	internal partial struct SemaphoreGetFdInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Semaphore;
		internal ExternalSemaphoreHandleTypeFlags HandleType;
	}

	internal partial struct PhysicalDeviceExternalFenceInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalFenceHandleTypeFlags HandleType;
	}

	internal partial struct PhysicalDeviceExternalFenceInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalFenceHandleTypeFlags HandleType;

		public static implicit operator PhysicalDeviceExternalFenceInfoKhr (PhysicalDeviceExternalFenceInfo that) {
			var ret = new PhysicalDeviceExternalFenceInfoKhr {
				SType = that.SType,
				Next = that.Next,
				HandleType = that.HandleType,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceExternalFenceInfo (PhysicalDeviceExternalFenceInfoKhr that) {
			var ret = new PhysicalDeviceExternalFenceInfo {
				SType = that.SType,
				Next = that.Next,
				HandleType = that.HandleType,
			};

			return ret;
		}
	}

	internal partial struct ExternalFenceProperties
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalFenceHandleTypeFlags ExportFromImportedHandleTypes;
		internal ExternalFenceHandleTypeFlags CompatibleHandleTypes;
		internal ExternalFenceFeatureFlags ExternalFenceFeatures;
	}

	internal partial struct ExternalFencePropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalFenceHandleTypeFlags ExportFromImportedHandleTypes;
		internal ExternalFenceHandleTypeFlags CompatibleHandleTypes;
		internal ExternalFenceFeatureFlags ExternalFenceFeatures;

		public static implicit operator ExternalFencePropertiesKhr (ExternalFenceProperties that) {
			var ret = new ExternalFencePropertiesKhr {
				SType = that.SType,
				Next = that.Next,
				ExportFromImportedHandleTypes = that.ExportFromImportedHandleTypes,
				CompatibleHandleTypes = that.CompatibleHandleTypes,
				ExternalFenceFeatures = that.ExternalFenceFeatures,
			};

			return ret;
		}

		public static implicit operator ExternalFenceProperties (ExternalFencePropertiesKhr that) {
			var ret = new ExternalFenceProperties {
				SType = that.SType,
				Next = that.Next,
				ExportFromImportedHandleTypes = that.ExportFromImportedHandleTypes,
				CompatibleHandleTypes = that.CompatibleHandleTypes,
				ExternalFenceFeatures = that.ExternalFenceFeatures,
			};

			return ret;
		}
	}

	internal partial struct ExportFenceCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalFenceHandleTypeFlags HandleTypes;
	}

	internal partial struct ExportFenceCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalFenceHandleTypeFlags HandleTypes;

		public static implicit operator ExportFenceCreateInfoKhr (ExportFenceCreateInfo that) {
			var ret = new ExportFenceCreateInfoKhr {
				SType = that.SType,
				Next = that.Next,
				HandleTypes = that.HandleTypes,
			};

			return ret;
		}

		public static implicit operator ExportFenceCreateInfo (ExportFenceCreateInfoKhr that) {
			var ret = new ExportFenceCreateInfo {
				SType = that.SType,
				Next = that.Next,
				HandleTypes = that.HandleTypes,
			};

			return ret;
		}
	}

	internal partial struct FenceGetWin32HandleInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Fence;
		internal ExternalFenceHandleTypeFlags HandleType;
	}

	internal partial struct ImportFenceFdInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Fence;
		internal FenceImportFlags Flags;
		internal ExternalFenceHandleTypeFlags HandleType;
		internal int Fd;
	}

	internal partial struct FenceGetFdInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Fence;
		internal ExternalFenceHandleTypeFlags HandleType;
	}

	internal partial struct PhysicalDeviceMultiviewFeatures
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 Multiview;
		internal Bool32 MultiviewGeometryShader;
		internal Bool32 MultiviewTessellationShader;
	}

	internal partial struct PhysicalDeviceMultiviewFeaturesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 Multiview;
		internal Bool32 MultiviewGeometryShader;
		internal Bool32 MultiviewTessellationShader;

		public static implicit operator PhysicalDeviceMultiviewFeaturesKhr (PhysicalDeviceMultiviewFeatures that) {
			var ret = new PhysicalDeviceMultiviewFeaturesKhr {
				SType = that.SType,
				Next = that.Next,
				Multiview = that.Multiview,
				MultiviewGeometryShader = that.MultiviewGeometryShader,
				MultiviewTessellationShader = that.MultiviewTessellationShader,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceMultiviewFeatures (PhysicalDeviceMultiviewFeaturesKhr that) {
			var ret = new PhysicalDeviceMultiviewFeatures {
				SType = that.SType,
				Next = that.Next,
				Multiview = that.Multiview,
				MultiviewGeometryShader = that.MultiviewGeometryShader,
				MultiviewTessellationShader = that.MultiviewTessellationShader,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceMultiviewProperties
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MaxMultiviewViewCount;
		internal UInt32 MaxMultiviewInstanceIndex;
	}

	internal partial struct PhysicalDeviceMultiviewPropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MaxMultiviewViewCount;
		internal UInt32 MaxMultiviewInstanceIndex;

		public static implicit operator PhysicalDeviceMultiviewPropertiesKhr (PhysicalDeviceMultiviewProperties that) {
			var ret = new PhysicalDeviceMultiviewPropertiesKhr {
				SType = that.SType,
				Next = that.Next,
				MaxMultiviewViewCount = that.MaxMultiviewViewCount,
				MaxMultiviewInstanceIndex = that.MaxMultiviewInstanceIndex,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceMultiviewProperties (PhysicalDeviceMultiviewPropertiesKhr that) {
			var ret = new PhysicalDeviceMultiviewProperties {
				SType = that.SType,
				Next = that.Next,
				MaxMultiviewViewCount = that.MaxMultiviewViewCount,
				MaxMultiviewInstanceIndex = that.MaxMultiviewInstanceIndex,
			};

			return ret;
		}
	}

	internal partial struct RenderPassMultiviewCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 SubpassCount;
		internal IntPtr ViewMasks;
		internal UInt32 DependencyCount;
		internal IntPtr ViewOffsets;
		internal UInt32 CorrelationMaskCount;
		internal IntPtr CorrelationMasks;
	}

	internal partial struct RenderPassMultiviewCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 SubpassCount;
		internal IntPtr ViewMasks;
		internal UInt32 DependencyCount;
		internal IntPtr ViewOffsets;
		internal UInt32 CorrelationMaskCount;
		internal IntPtr CorrelationMasks;

		public static implicit operator RenderPassMultiviewCreateInfoKhr (RenderPassMultiviewCreateInfo that) {
			var ret = new RenderPassMultiviewCreateInfoKhr {
				SType = that.SType,
				Next = that.Next,
				SubpassCount = that.SubpassCount,
				ViewMasks = that.ViewMasks,
				DependencyCount = that.DependencyCount,
				ViewOffsets = that.ViewOffsets,
				CorrelationMaskCount = that.CorrelationMaskCount,
				CorrelationMasks = that.CorrelationMasks,
			};

			return ret;
		}

		public static implicit operator RenderPassMultiviewCreateInfo (RenderPassMultiviewCreateInfoKhr that) {
			var ret = new RenderPassMultiviewCreateInfo {
				SType = that.SType,
				Next = that.Next,
				SubpassCount = that.SubpassCount,
				ViewMasks = that.ViewMasks,
				DependencyCount = that.DependencyCount,
				ViewOffsets = that.ViewOffsets,
				CorrelationMaskCount = that.CorrelationMaskCount,
				CorrelationMasks = that.CorrelationMasks,
			};

			return ret;
		}
	}

	internal partial struct SurfaceCapabilities2Ext
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MinImageCount;
		internal UInt32 MaxImageCount;
		internal Extent2D CurrentExtent;
		internal Extent2D MinImageExtent;
		internal Extent2D MaxImageExtent;
		internal UInt32 MaxImageArrayLayers;
		internal SurfaceTransformFlagsKhr SupportedTransforms;
		internal SurfaceTransformFlagsKhr CurrentTransform;
		internal CompositeAlphaFlagsKhr SupportedCompositeAlpha;
		internal ImageUsageFlags SupportedUsageFlags;
		internal SurfaceCounterFlagsExt SupportedSurfaceCounters;
	}

	internal partial struct DisplayPowerInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DisplayPowerStateExt PowerState;
	}

	internal partial struct DeviceEventInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DeviceEventTypeExt DeviceEvent;
	}

	internal partial struct DisplayEventInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DisplayEventTypeExt DisplayEvent;
	}

	internal partial struct SwapchainCounterCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal SurfaceCounterFlagsExt SurfaceCounters;
	}

	internal partial struct MemoryAllocateFlagsInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal MemoryAllocateFlags Flags;
		internal UInt32 DeviceMask;
	}

	internal partial struct MemoryAllocateFlagsInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal MemoryAllocateFlags Flags;
		internal UInt32 DeviceMask;

		public static implicit operator MemoryAllocateFlagsInfoKhr (MemoryAllocateFlagsInfo that) {
			var ret = new MemoryAllocateFlagsInfoKhr {
				SType = that.SType,
				Next = that.Next,
				Flags = that.Flags,
				DeviceMask = that.DeviceMask,
			};

			return ret;
		}

		public static implicit operator MemoryAllocateFlagsInfo (MemoryAllocateFlagsInfoKhr that) {
			var ret = new MemoryAllocateFlagsInfo {
				SType = that.SType,
				Next = that.Next,
				Flags = that.Flags,
				DeviceMask = that.DeviceMask,
			};

			return ret;
		}
	}

	internal partial struct BindBufferMemoryInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Buffer;
		internal UInt64 Memory;
		internal DeviceSize MemoryOffset;
	}

	internal partial struct BindBufferMemoryInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Buffer;
		internal UInt64 Memory;
		internal DeviceSize MemoryOffset;

		public static implicit operator BindBufferMemoryInfoKhr (BindBufferMemoryInfo that) {
			var ret = new BindBufferMemoryInfoKhr {
				SType = that.SType,
				Next = that.Next,
				Buffer = that.Buffer,
				Memory = that.Memory,
				MemoryOffset = that.MemoryOffset,
			};

			return ret;
		}

		public static implicit operator BindBufferMemoryInfo (BindBufferMemoryInfoKhr that) {
			var ret = new BindBufferMemoryInfo {
				SType = that.SType,
				Next = that.Next,
				Buffer = that.Buffer,
				Memory = that.Memory,
				MemoryOffset = that.MemoryOffset,
			};

			return ret;
		}
	}

	internal partial struct BindBufferMemoryDeviceGroupInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 DeviceIndexCount;
		internal IntPtr DeviceIndices;
	}

	internal partial struct BindBufferMemoryDeviceGroupInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 DeviceIndexCount;
		internal IntPtr DeviceIndices;

		public static implicit operator BindBufferMemoryDeviceGroupInfoKhr (BindBufferMemoryDeviceGroupInfo that) {
			var ret = new BindBufferMemoryDeviceGroupInfoKhr {
				SType = that.SType,
				Next = that.Next,
				DeviceIndexCount = that.DeviceIndexCount,
				DeviceIndices = that.DeviceIndices,
			};

			return ret;
		}

		public static implicit operator BindBufferMemoryDeviceGroupInfo (BindBufferMemoryDeviceGroupInfoKhr that) {
			var ret = new BindBufferMemoryDeviceGroupInfo {
				SType = that.SType,
				Next = that.Next,
				DeviceIndexCount = that.DeviceIndexCount,
				DeviceIndices = that.DeviceIndices,
			};

			return ret;
		}
	}

	internal partial struct BindImageMemoryInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Image;
		internal UInt64 Memory;
		internal DeviceSize MemoryOffset;
	}

	internal partial struct BindImageMemoryInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Image;
		internal UInt64 Memory;
		internal DeviceSize MemoryOffset;

		public static implicit operator BindImageMemoryInfoKhr (BindImageMemoryInfo that) {
			var ret = new BindImageMemoryInfoKhr {
				SType = that.SType,
				Next = that.Next,
				Image = that.Image,
				Memory = that.Memory,
				MemoryOffset = that.MemoryOffset,
			};

			return ret;
		}

		public static implicit operator BindImageMemoryInfo (BindImageMemoryInfoKhr that) {
			var ret = new BindImageMemoryInfo {
				SType = that.SType,
				Next = that.Next,
				Image = that.Image,
				Memory = that.Memory,
				MemoryOffset = that.MemoryOffset,
			};

			return ret;
		}
	}

	internal partial struct BindImageMemoryDeviceGroupInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 DeviceIndexCount;
		internal IntPtr DeviceIndices;
		internal UInt32 SplitInstanceBindRegionCount;
		internal IntPtr SplitInstanceBindRegions;
	}

	internal partial struct BindImageMemoryDeviceGroupInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 DeviceIndexCount;
		internal IntPtr DeviceIndices;
		internal UInt32 SplitInstanceBindRegionCount;
		internal IntPtr SplitInstanceBindRegions;

		public static implicit operator BindImageMemoryDeviceGroupInfoKhr (BindImageMemoryDeviceGroupInfo that) {
			var ret = new BindImageMemoryDeviceGroupInfoKhr {
				SType = that.SType,
				Next = that.Next,
				DeviceIndexCount = that.DeviceIndexCount,
				DeviceIndices = that.DeviceIndices,
				SplitInstanceBindRegionCount = that.SplitInstanceBindRegionCount,
				SplitInstanceBindRegions = that.SplitInstanceBindRegions,
			};

			return ret;
		}

		public static implicit operator BindImageMemoryDeviceGroupInfo (BindImageMemoryDeviceGroupInfoKhr that) {
			var ret = new BindImageMemoryDeviceGroupInfo {
				SType = that.SType,
				Next = that.Next,
				DeviceIndexCount = that.DeviceIndexCount,
				DeviceIndices = that.DeviceIndices,
				SplitInstanceBindRegionCount = that.SplitInstanceBindRegionCount,
				SplitInstanceBindRegions = that.SplitInstanceBindRegions,
			};

			return ret;
		}
	}

	internal partial struct DeviceGroupRenderPassBeginInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 DeviceMask;
		internal UInt32 DeviceRenderAreaCount;
		internal IntPtr DeviceRenderAreas;
	}

	internal partial struct DeviceGroupRenderPassBeginInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 DeviceMask;
		internal UInt32 DeviceRenderAreaCount;
		internal IntPtr DeviceRenderAreas;

		public static implicit operator DeviceGroupRenderPassBeginInfoKhr (DeviceGroupRenderPassBeginInfo that) {
			var ret = new DeviceGroupRenderPassBeginInfoKhr {
				SType = that.SType,
				Next = that.Next,
				DeviceMask = that.DeviceMask,
				DeviceRenderAreaCount = that.DeviceRenderAreaCount,
				DeviceRenderAreas = that.DeviceRenderAreas,
			};

			return ret;
		}

		public static implicit operator DeviceGroupRenderPassBeginInfo (DeviceGroupRenderPassBeginInfoKhr that) {
			var ret = new DeviceGroupRenderPassBeginInfo {
				SType = that.SType,
				Next = that.Next,
				DeviceMask = that.DeviceMask,
				DeviceRenderAreaCount = that.DeviceRenderAreaCount,
				DeviceRenderAreas = that.DeviceRenderAreas,
			};

			return ret;
		}
	}

	internal partial struct DeviceGroupCommandBufferBeginInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 DeviceMask;
	}

	internal partial struct DeviceGroupCommandBufferBeginInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 DeviceMask;

		public static implicit operator DeviceGroupCommandBufferBeginInfoKhr (DeviceGroupCommandBufferBeginInfo that) {
			var ret = new DeviceGroupCommandBufferBeginInfoKhr {
				SType = that.SType,
				Next = that.Next,
				DeviceMask = that.DeviceMask,
			};

			return ret;
		}

		public static implicit operator DeviceGroupCommandBufferBeginInfo (DeviceGroupCommandBufferBeginInfoKhr that) {
			var ret = new DeviceGroupCommandBufferBeginInfo {
				SType = that.SType,
				Next = that.Next,
				DeviceMask = that.DeviceMask,
			};

			return ret;
		}
	}

	internal partial struct DeviceGroupSubmitInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 WaitSemaphoreCount;
		internal IntPtr WaitSemaphoreDeviceIndices;
		internal UInt32 CommandBufferCount;
		internal IntPtr CommandBufferDeviceMasks;
		internal UInt32 SignalSemaphoreCount;
		internal IntPtr SignalSemaphoreDeviceIndices;
	}

	internal partial struct DeviceGroupSubmitInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 WaitSemaphoreCount;
		internal IntPtr WaitSemaphoreDeviceIndices;
		internal UInt32 CommandBufferCount;
		internal IntPtr CommandBufferDeviceMasks;
		internal UInt32 SignalSemaphoreCount;
		internal IntPtr SignalSemaphoreDeviceIndices;

		public static implicit operator DeviceGroupSubmitInfoKhr (DeviceGroupSubmitInfo that) {
			var ret = new DeviceGroupSubmitInfoKhr {
				SType = that.SType,
				Next = that.Next,
				WaitSemaphoreCount = that.WaitSemaphoreCount,
				WaitSemaphoreDeviceIndices = that.WaitSemaphoreDeviceIndices,
				CommandBufferCount = that.CommandBufferCount,
				CommandBufferDeviceMasks = that.CommandBufferDeviceMasks,
				SignalSemaphoreCount = that.SignalSemaphoreCount,
				SignalSemaphoreDeviceIndices = that.SignalSemaphoreDeviceIndices,
			};

			return ret;
		}

		public static implicit operator DeviceGroupSubmitInfo (DeviceGroupSubmitInfoKhr that) {
			var ret = new DeviceGroupSubmitInfo {
				SType = that.SType,
				Next = that.Next,
				WaitSemaphoreCount = that.WaitSemaphoreCount,
				WaitSemaphoreDeviceIndices = that.WaitSemaphoreDeviceIndices,
				CommandBufferCount = that.CommandBufferCount,
				CommandBufferDeviceMasks = that.CommandBufferDeviceMasks,
				SignalSemaphoreCount = that.SignalSemaphoreCount,
				SignalSemaphoreDeviceIndices = that.SignalSemaphoreDeviceIndices,
			};

			return ret;
		}
	}

	internal partial struct DeviceGroupBindSparseInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 ResourceDeviceIndex;
		internal UInt32 MemoryDeviceIndex;
	}

	internal partial struct DeviceGroupBindSparseInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 ResourceDeviceIndex;
		internal UInt32 MemoryDeviceIndex;

		public static implicit operator DeviceGroupBindSparseInfoKhr (DeviceGroupBindSparseInfo that) {
			var ret = new DeviceGroupBindSparseInfoKhr {
				SType = that.SType,
				Next = that.Next,
				ResourceDeviceIndex = that.ResourceDeviceIndex,
				MemoryDeviceIndex = that.MemoryDeviceIndex,
			};

			return ret;
		}

		public static implicit operator DeviceGroupBindSparseInfo (DeviceGroupBindSparseInfoKhr that) {
			var ret = new DeviceGroupBindSparseInfo {
				SType = that.SType,
				Next = that.Next,
				ResourceDeviceIndex = that.ResourceDeviceIndex,
				MemoryDeviceIndex = that.MemoryDeviceIndex,
			};

			return ret;
		}
	}

	internal partial struct DeviceGroupPresentCapabilitiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal unsafe fixed UInt32 PresentMask[32];
		internal DeviceGroupPresentModeFlagsKhr Modes;
	}

	internal partial struct ImageSwapchainCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Swapchain;
	}

	internal partial struct BindImageMemorySwapchainInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Swapchain;
		internal UInt32 ImageIndex;
	}

	internal partial struct AcquireNextImageInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Swapchain;
		internal UInt64 Timeout;
		internal UInt64 Semaphore;
		internal UInt64 Fence;
		internal UInt32 DeviceMask;
	}

	internal partial struct DeviceGroupPresentInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 SwapchainCount;
		internal IntPtr DeviceMasks;
		internal DeviceGroupPresentModeFlagsKhr Mode;
	}

	internal partial struct DeviceGroupDeviceCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 PhysicalDeviceCount;
		internal IntPtr PhysicalDevices;
	}

	internal partial struct DeviceGroupDeviceCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 PhysicalDeviceCount;
		internal IntPtr PhysicalDevices;

		public static implicit operator DeviceGroupDeviceCreateInfoKhr (DeviceGroupDeviceCreateInfo that) {
			var ret = new DeviceGroupDeviceCreateInfoKhr {
				SType = that.SType,
				Next = that.Next,
				PhysicalDeviceCount = that.PhysicalDeviceCount,
				PhysicalDevices = that.PhysicalDevices,
			};

			return ret;
		}

		public static implicit operator DeviceGroupDeviceCreateInfo (DeviceGroupDeviceCreateInfoKhr that) {
			var ret = new DeviceGroupDeviceCreateInfo {
				SType = that.SType,
				Next = that.Next,
				PhysicalDeviceCount = that.PhysicalDeviceCount,
				PhysicalDevices = that.PhysicalDevices,
			};

			return ret;
		}
	}

	internal partial struct DeviceGroupSwapchainCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DeviceGroupPresentModeFlagsKhr Modes;
	}

	internal partial struct DescriptorUpdateTemplateCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt32 DescriptorUpdateEntryCount;
		internal IntPtr DescriptorUpdateEntries;
		internal DescriptorUpdateTemplateType TemplateType;
		internal UInt64 DescriptorSetLayout;
		internal PipelineBindPoint PipelineBindPoint;
		internal UInt64 PipelineLayout;
		internal UInt32 Set;
	}

	internal partial struct DescriptorUpdateTemplateCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt32 DescriptorUpdateEntryCount;
		internal IntPtr DescriptorUpdateEntries;
		internal DescriptorUpdateTemplateType TemplateType;
		internal UInt64 DescriptorSetLayout;
		internal PipelineBindPoint PipelineBindPoint;
		internal UInt64 PipelineLayout;
		internal UInt32 Set;

		public static implicit operator DescriptorUpdateTemplateCreateInfoKhr (DescriptorUpdateTemplateCreateInfo that) {
			var ret = new DescriptorUpdateTemplateCreateInfoKhr {
				SType = that.SType,
				Next = that.Next,
				Flags = that.Flags,
				DescriptorUpdateEntryCount = that.DescriptorUpdateEntryCount,
				DescriptorUpdateEntries = that.DescriptorUpdateEntries,
				TemplateType = that.TemplateType,
				DescriptorSetLayout = that.DescriptorSetLayout,
				PipelineBindPoint = that.PipelineBindPoint,
				PipelineLayout = that.PipelineLayout,
				Set = that.Set,
			};

			return ret;
		}

		public static implicit operator DescriptorUpdateTemplateCreateInfo (DescriptorUpdateTemplateCreateInfoKhr that) {
			var ret = new DescriptorUpdateTemplateCreateInfo {
				SType = that.SType,
				Next = that.Next,
				Flags = that.Flags,
				DescriptorUpdateEntryCount = that.DescriptorUpdateEntryCount,
				DescriptorUpdateEntries = that.DescriptorUpdateEntries,
				TemplateType = that.TemplateType,
				DescriptorSetLayout = that.DescriptorSetLayout,
				PipelineBindPoint = that.PipelineBindPoint,
				PipelineLayout = that.PipelineLayout,
				Set = that.Set,
			};

			return ret;
		}
	}

	internal partial struct HdrMetadataExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal XYColorExt DisplayPrimaryRed;
		internal XYColorExt DisplayPrimaryGreen;
		internal XYColorExt DisplayPrimaryBlue;
		internal XYColorExt WhitePoint;
		internal float MaxLuminance;
		internal float MinLuminance;
		internal float MaxContentLightLevel;
		internal float MaxFrameAverageLightLevel;
	}

	internal partial struct DisplayNativeHdrSurfaceCapabilitiesAmd
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 LocalDimmingSupport;
	}

	internal partial struct SwapchainDisplayNativeHdrCreateInfoAmd
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 LocalDimmingEnable;
	}

	internal partial struct PresentTimesInfoGoogle
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 SwapchainCount;
		internal IntPtr Times;
	}

	internal partial struct IOSSurfaceCreateInfoMvk
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal IntPtr View;
	}

	internal partial struct MacOSSurfaceCreateInfoMvk
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal IntPtr View;
	}

	internal partial struct PipelineViewportWScalingStateCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ViewportWscalingEnable;
		internal UInt32 ViewportCount;
		internal IntPtr ViewportWscalings;
	}

	internal partial struct PipelineViewportSwizzleStateCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt32 ViewportCount;
		internal IntPtr ViewportSwizzles;
	}

	internal partial struct PhysicalDeviceDiscardRectanglePropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MaxDiscardRectangles;
	}

	internal partial struct PipelineDiscardRectangleStateCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal DiscardRectangleModeExt DiscardRectangleMode;
		internal UInt32 DiscardRectangleCount;
		internal IntPtr DiscardRectangles;
	}

	internal partial struct PhysicalDeviceMultiviewPerViewAttributesPropertiesNvx
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 PerViewPositionAllComponents;
	}

	internal partial struct RenderPassInputAttachmentAspectCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 AspectReferenceCount;
		internal IntPtr AspectReferences;
	}

	internal partial struct RenderPassInputAttachmentAspectCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 AspectReferenceCount;
		internal IntPtr AspectReferences;

		public static implicit operator RenderPassInputAttachmentAspectCreateInfoKhr (RenderPassInputAttachmentAspectCreateInfo that) {
			var ret = new RenderPassInputAttachmentAspectCreateInfoKhr {
				SType = that.SType,
				Next = that.Next,
				AspectReferenceCount = that.AspectReferenceCount,
				AspectReferences = that.AspectReferences,
			};

			return ret;
		}

		public static implicit operator RenderPassInputAttachmentAspectCreateInfo (RenderPassInputAttachmentAspectCreateInfoKhr that) {
			var ret = new RenderPassInputAttachmentAspectCreateInfo {
				SType = that.SType,
				Next = that.Next,
				AspectReferenceCount = that.AspectReferenceCount,
				AspectReferences = that.AspectReferences,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceSurfaceInfo2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Surface;
	}

	internal partial struct SurfaceCapabilities2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal SurfaceCapabilitiesKhr SurfaceCapabilities;
	}

	internal partial struct SurfaceFormat2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal SurfaceFormatKhr SurfaceFormat;
	}

	internal partial struct DisplayProperties2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DisplayPropertiesKhr DisplayProperties;
	}

	internal partial struct DisplayPlaneProperties2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DisplayPlanePropertiesKhr DisplayPlaneProperties;
	}

	internal partial struct DisplayModeProperties2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DisplayModePropertiesKhr DisplayModeProperties;
	}

	internal partial struct DisplayPlaneInfo2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Mode;
		internal UInt32 PlaneIndex;
	}

	internal partial struct DisplayPlaneCapabilities2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DisplayPlaneCapabilitiesKhr Capabilities;
	}

	internal partial struct SharedPresentSurfaceCapabilitiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ImageUsageFlags SharedPresentSupportedUsageFlags;
	}

	internal partial struct PhysicalDevice16BitStorageFeatures
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 StorageBuffer16BitAccess;
		internal Bool32 UniformAndStorageBuffer16BitAccess;
		internal Bool32 StoragePushConstant16;
		internal Bool32 StorageInputOutput16;
	}

	internal partial struct PhysicalDevice16BitStorageFeaturesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 StorageBuffer16BitAccess;
		internal Bool32 UniformAndStorageBuffer16BitAccess;
		internal Bool32 StoragePushConstant16;
		internal Bool32 StorageInputOutput16;

		public static implicit operator PhysicalDevice16BitStorageFeaturesKhr (PhysicalDevice16BitStorageFeatures that) {
			var ret = new PhysicalDevice16BitStorageFeaturesKhr {
				SType = that.SType,
				Next = that.Next,
				StorageBuffer16BitAccess = that.StorageBuffer16BitAccess,
				UniformAndStorageBuffer16BitAccess = that.UniformAndStorageBuffer16BitAccess,
				StoragePushConstant16 = that.StoragePushConstant16,
				StorageInputOutput16 = that.StorageInputOutput16,
			};

			return ret;
		}

		public static implicit operator PhysicalDevice16BitStorageFeatures (PhysicalDevice16BitStorageFeaturesKhr that) {
			var ret = new PhysicalDevice16BitStorageFeatures {
				SType = that.SType,
				Next = that.Next,
				StorageBuffer16BitAccess = that.StorageBuffer16BitAccess,
				UniformAndStorageBuffer16BitAccess = that.UniformAndStorageBuffer16BitAccess,
				StoragePushConstant16 = that.StoragePushConstant16,
				StorageInputOutput16 = that.StorageInputOutput16,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceSubgroupProperties
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 SubgroupSize;
		internal ShaderStageFlags SupportedStages;
		internal SubgroupFeatureFlags SupportedOperations;
		internal Bool32 QuadOperationsInAllStages;
	}

	internal partial struct BufferMemoryRequirementsInfo2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Buffer;
	}

	internal partial struct BufferMemoryRequirementsInfo2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Buffer;

		public static implicit operator BufferMemoryRequirementsInfo2Khr (BufferMemoryRequirementsInfo2 that) {
			var ret = new BufferMemoryRequirementsInfo2Khr {
				SType = that.SType,
				Next = that.Next,
				Buffer = that.Buffer,
			};

			return ret;
		}

		public static implicit operator BufferMemoryRequirementsInfo2 (BufferMemoryRequirementsInfo2Khr that) {
			var ret = new BufferMemoryRequirementsInfo2 {
				SType = that.SType,
				Next = that.Next,
				Buffer = that.Buffer,
			};

			return ret;
		}
	}

	internal partial struct ImageMemoryRequirementsInfo2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Image;
	}

	internal partial struct ImageMemoryRequirementsInfo2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Image;

		public static implicit operator ImageMemoryRequirementsInfo2Khr (ImageMemoryRequirementsInfo2 that) {
			var ret = new ImageMemoryRequirementsInfo2Khr {
				SType = that.SType,
				Next = that.Next,
				Image = that.Image,
			};

			return ret;
		}

		public static implicit operator ImageMemoryRequirementsInfo2 (ImageMemoryRequirementsInfo2Khr that) {
			var ret = new ImageMemoryRequirementsInfo2 {
				SType = that.SType,
				Next = that.Next,
				Image = that.Image,
			};

			return ret;
		}
	}

	internal partial struct ImageSparseMemoryRequirementsInfo2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Image;
	}

	internal partial struct ImageSparseMemoryRequirementsInfo2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Image;

		public static implicit operator ImageSparseMemoryRequirementsInfo2Khr (ImageSparseMemoryRequirementsInfo2 that) {
			var ret = new ImageSparseMemoryRequirementsInfo2Khr {
				SType = that.SType,
				Next = that.Next,
				Image = that.Image,
			};

			return ret;
		}

		public static implicit operator ImageSparseMemoryRequirementsInfo2 (ImageSparseMemoryRequirementsInfo2Khr that) {
			var ret = new ImageSparseMemoryRequirementsInfo2 {
				SType = that.SType,
				Next = that.Next,
				Image = that.Image,
			};

			return ret;
		}
	}

	internal partial struct MemoryRequirements2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal MemoryRequirements MemoryRequirements;
	}

	internal partial struct MemoryRequirements2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal MemoryRequirements MemoryRequirements;

		public static implicit operator MemoryRequirements2Khr (MemoryRequirements2 that) {
			var ret = new MemoryRequirements2Khr {
				SType = that.SType,
				Next = that.Next,
				MemoryRequirements = that.MemoryRequirements,
			};

			return ret;
		}

		public static implicit operator MemoryRequirements2 (MemoryRequirements2Khr that) {
			var ret = new MemoryRequirements2 {
				SType = that.SType,
				Next = that.Next,
				MemoryRequirements = that.MemoryRequirements,
			};

			return ret;
		}
	}

	internal partial struct SparseImageMemoryRequirements2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal SparseImageMemoryRequirements MemoryRequirements;
	}

	internal partial struct SparseImageMemoryRequirements2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal SparseImageMemoryRequirements MemoryRequirements;

		public static implicit operator SparseImageMemoryRequirements2Khr (SparseImageMemoryRequirements2 that) {
			var ret = new SparseImageMemoryRequirements2Khr {
				SType = that.SType,
				Next = that.Next,
				MemoryRequirements = that.MemoryRequirements,
			};

			return ret;
		}

		public static implicit operator SparseImageMemoryRequirements2 (SparseImageMemoryRequirements2Khr that) {
			var ret = new SparseImageMemoryRequirements2 {
				SType = that.SType,
				Next = that.Next,
				MemoryRequirements = that.MemoryRequirements,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDevicePointClippingProperties
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PointClippingBehavior PointClippingBehavior;
	}

	internal partial struct PhysicalDevicePointClippingPropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PointClippingBehavior PointClippingBehavior;

		public static implicit operator PhysicalDevicePointClippingPropertiesKhr (PhysicalDevicePointClippingProperties that) {
			var ret = new PhysicalDevicePointClippingPropertiesKhr {
				SType = that.SType,
				Next = that.Next,
				PointClippingBehavior = that.PointClippingBehavior,
			};

			return ret;
		}

		public static implicit operator PhysicalDevicePointClippingProperties (PhysicalDevicePointClippingPropertiesKhr that) {
			var ret = new PhysicalDevicePointClippingProperties {
				SType = that.SType,
				Next = that.Next,
				PointClippingBehavior = that.PointClippingBehavior,
			};

			return ret;
		}
	}

	internal partial struct MemoryDedicatedRequirements
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 PrefersDedicatedAllocation;
		internal Bool32 RequiresDedicatedAllocation;
	}

	internal partial struct MemoryDedicatedRequirementsKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 PrefersDedicatedAllocation;
		internal Bool32 RequiresDedicatedAllocation;

		public static implicit operator MemoryDedicatedRequirementsKhr (MemoryDedicatedRequirements that) {
			var ret = new MemoryDedicatedRequirementsKhr {
				SType = that.SType,
				Next = that.Next,
				PrefersDedicatedAllocation = that.PrefersDedicatedAllocation,
				RequiresDedicatedAllocation = that.RequiresDedicatedAllocation,
			};

			return ret;
		}

		public static implicit operator MemoryDedicatedRequirements (MemoryDedicatedRequirementsKhr that) {
			var ret = new MemoryDedicatedRequirements {
				SType = that.SType,
				Next = that.Next,
				PrefersDedicatedAllocation = that.PrefersDedicatedAllocation,
				RequiresDedicatedAllocation = that.RequiresDedicatedAllocation,
			};

			return ret;
		}
	}

	internal partial struct MemoryDedicatedAllocateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Image;
		internal UInt64 Buffer;
	}

	internal partial struct MemoryDedicatedAllocateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Image;
		internal UInt64 Buffer;

		public static implicit operator MemoryDedicatedAllocateInfoKhr (MemoryDedicatedAllocateInfo that) {
			var ret = new MemoryDedicatedAllocateInfoKhr {
				SType = that.SType,
				Next = that.Next,
				Image = that.Image,
				Buffer = that.Buffer,
			};

			return ret;
		}

		public static implicit operator MemoryDedicatedAllocateInfo (MemoryDedicatedAllocateInfoKhr that) {
			var ret = new MemoryDedicatedAllocateInfo {
				SType = that.SType,
				Next = that.Next,
				Image = that.Image,
				Buffer = that.Buffer,
			};

			return ret;
		}
	}

	internal partial struct ImageViewUsageCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ImageUsageFlags Usage;
	}

	internal partial struct ImageViewUsageCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ImageUsageFlags Usage;

		public static implicit operator ImageViewUsageCreateInfoKhr (ImageViewUsageCreateInfo that) {
			var ret = new ImageViewUsageCreateInfoKhr {
				SType = that.SType,
				Next = that.Next,
				Usage = that.Usage,
			};

			return ret;
		}

		public static implicit operator ImageViewUsageCreateInfo (ImageViewUsageCreateInfoKhr that) {
			var ret = new ImageViewUsageCreateInfo {
				SType = that.SType,
				Next = that.Next,
				Usage = that.Usage,
			};

			return ret;
		}
	}

	internal partial struct PipelineTessellationDomainOriginStateCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal TessellationDomainOrigin DomainOrigin;
	}

	internal partial struct PipelineTessellationDomainOriginStateCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal TessellationDomainOrigin DomainOrigin;

		public static implicit operator PipelineTessellationDomainOriginStateCreateInfoKhr (PipelineTessellationDomainOriginStateCreateInfo that) {
			var ret = new PipelineTessellationDomainOriginStateCreateInfoKhr {
				SType = that.SType,
				Next = that.Next,
				DomainOrigin = that.DomainOrigin,
			};

			return ret;
		}

		public static implicit operator PipelineTessellationDomainOriginStateCreateInfo (PipelineTessellationDomainOriginStateCreateInfoKhr that) {
			var ret = new PipelineTessellationDomainOriginStateCreateInfo {
				SType = that.SType,
				Next = that.Next,
				DomainOrigin = that.DomainOrigin,
			};

			return ret;
		}
	}

	internal partial struct SamplerYcbcrConversionInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Conversion;
	}

	internal partial struct SamplerYcbcrConversionInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Conversion;

		public static implicit operator SamplerYcbcrConversionInfoKhr (SamplerYcbcrConversionInfo that) {
			var ret = new SamplerYcbcrConversionInfoKhr {
				SType = that.SType,
				Next = that.Next,
				Conversion = that.Conversion,
			};

			return ret;
		}

		public static implicit operator SamplerYcbcrConversionInfo (SamplerYcbcrConversionInfoKhr that) {
			var ret = new SamplerYcbcrConversionInfo {
				SType = that.SType,
				Next = that.Next,
				Conversion = that.Conversion,
			};

			return ret;
		}
	}

	internal partial struct SamplerYcbcrConversionCreateInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Format Format;
		internal SamplerYcbcrModelConversion YcbcrModel;
		internal SamplerYcbcrRange YcbcrRange;
		internal ComponentMapping Components;
		internal ChromaLocation XChromaOffset;
		internal ChromaLocation YChromaOffset;
		internal Filter ChromaFilter;
		internal Bool32 ForceExplicitReconstruction;
	}

	internal partial struct SamplerYcbcrConversionCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Format Format;
		internal SamplerYcbcrModelConversion YcbcrModel;
		internal SamplerYcbcrRange YcbcrRange;
		internal ComponentMapping Components;
		internal ChromaLocation XChromaOffset;
		internal ChromaLocation YChromaOffset;
		internal Filter ChromaFilter;
		internal Bool32 ForceExplicitReconstruction;

		public static implicit operator SamplerYcbcrConversionCreateInfoKhr (SamplerYcbcrConversionCreateInfo that) {
			var ret = new SamplerYcbcrConversionCreateInfoKhr {
				SType = that.SType,
				Next = that.Next,
				Format = that.Format,
				YcbcrModel = that.YcbcrModel,
				YcbcrRange = that.YcbcrRange,
				Components = that.Components,
				XChromaOffset = that.XChromaOffset,
				YChromaOffset = that.YChromaOffset,
				ChromaFilter = that.ChromaFilter,
				ForceExplicitReconstruction = that.ForceExplicitReconstruction,
			};

			return ret;
		}

		public static implicit operator SamplerYcbcrConversionCreateInfo (SamplerYcbcrConversionCreateInfoKhr that) {
			var ret = new SamplerYcbcrConversionCreateInfo {
				SType = that.SType,
				Next = that.Next,
				Format = that.Format,
				YcbcrModel = that.YcbcrModel,
				YcbcrRange = that.YcbcrRange,
				Components = that.Components,
				XChromaOffset = that.XChromaOffset,
				YChromaOffset = that.YChromaOffset,
				ChromaFilter = that.ChromaFilter,
				ForceExplicitReconstruction = that.ForceExplicitReconstruction,
			};

			return ret;
		}
	}

	internal partial struct BindImagePlaneMemoryInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ImageAspectFlags PlaneAspect;
	}

	internal partial struct BindImagePlaneMemoryInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ImageAspectFlags PlaneAspect;

		public static implicit operator BindImagePlaneMemoryInfoKhr (BindImagePlaneMemoryInfo that) {
			var ret = new BindImagePlaneMemoryInfoKhr {
				SType = that.SType,
				Next = that.Next,
				PlaneAspect = that.PlaneAspect,
			};

			return ret;
		}

		public static implicit operator BindImagePlaneMemoryInfo (BindImagePlaneMemoryInfoKhr that) {
			var ret = new BindImagePlaneMemoryInfo {
				SType = that.SType,
				Next = that.Next,
				PlaneAspect = that.PlaneAspect,
			};

			return ret;
		}
	}

	internal partial struct ImagePlaneMemoryRequirementsInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ImageAspectFlags PlaneAspect;
	}

	internal partial struct ImagePlaneMemoryRequirementsInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ImageAspectFlags PlaneAspect;

		public static implicit operator ImagePlaneMemoryRequirementsInfoKhr (ImagePlaneMemoryRequirementsInfo that) {
			var ret = new ImagePlaneMemoryRequirementsInfoKhr {
				SType = that.SType,
				Next = that.Next,
				PlaneAspect = that.PlaneAspect,
			};

			return ret;
		}

		public static implicit operator ImagePlaneMemoryRequirementsInfo (ImagePlaneMemoryRequirementsInfoKhr that) {
			var ret = new ImagePlaneMemoryRequirementsInfo {
				SType = that.SType,
				Next = that.Next,
				PlaneAspect = that.PlaneAspect,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceSamplerYcbcrConversionFeatures
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 SamplerYcbcrConversion;
	}

	internal partial struct PhysicalDeviceSamplerYcbcrConversionFeaturesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 SamplerYcbcrConversion;

		public static implicit operator PhysicalDeviceSamplerYcbcrConversionFeaturesKhr (PhysicalDeviceSamplerYcbcrConversionFeatures that) {
			var ret = new PhysicalDeviceSamplerYcbcrConversionFeaturesKhr {
				SType = that.SType,
				Next = that.Next,
				SamplerYcbcrConversion = that.SamplerYcbcrConversion,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceSamplerYcbcrConversionFeatures (PhysicalDeviceSamplerYcbcrConversionFeaturesKhr that) {
			var ret = new PhysicalDeviceSamplerYcbcrConversionFeatures {
				SType = that.SType,
				Next = that.Next,
				SamplerYcbcrConversion = that.SamplerYcbcrConversion,
			};

			return ret;
		}
	}

	internal partial struct SamplerYcbcrConversionImageFormatProperties
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 CombinedImageSamplerDescriptorCount;
	}

	internal partial struct SamplerYcbcrConversionImageFormatPropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 CombinedImageSamplerDescriptorCount;

		public static implicit operator SamplerYcbcrConversionImageFormatPropertiesKhr (SamplerYcbcrConversionImageFormatProperties that) {
			var ret = new SamplerYcbcrConversionImageFormatPropertiesKhr {
				SType = that.SType,
				Next = that.Next,
				CombinedImageSamplerDescriptorCount = that.CombinedImageSamplerDescriptorCount,
			};

			return ret;
		}

		public static implicit operator SamplerYcbcrConversionImageFormatProperties (SamplerYcbcrConversionImageFormatPropertiesKhr that) {
			var ret = new SamplerYcbcrConversionImageFormatProperties {
				SType = that.SType,
				Next = that.Next,
				CombinedImageSamplerDescriptorCount = that.CombinedImageSamplerDescriptorCount,
			};

			return ret;
		}
	}

	internal partial struct TextureLODGatherFormatPropertiesAmd
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 SupportsTextureGatherLodbiasAmd;
	}

	internal partial struct ConditionalRenderingBeginInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Buffer;
		internal DeviceSize Offset;
		internal ConditionalRenderingFlagsExt Flags;
	}

	internal partial struct ProtectedSubmitInfo
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ProtectedSubmit;
	}

	internal partial struct PhysicalDeviceProtectedMemoryFeatures
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ProtectedMemory;
	}

	internal partial struct PhysicalDeviceProtectedMemoryProperties
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ProtectedNoFault;
	}

	internal partial struct DeviceQueueInfo2
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DeviceQueueCreateFlags Flags;
		internal UInt32 QueueFamilyIndex;
		internal UInt32 QueueIndex;
	}

	internal partial struct PipelineCoverageToColorStateCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal Bool32 CoverageToColorEnable;
		internal UInt32 CoverageToColorLocation;
	}

	internal partial struct PhysicalDeviceSamplerFilterMinmaxPropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 FilterMinmaxSingleComponentFormats;
		internal Bool32 FilterMinmaxImageComponentMapping;
	}

	internal partial struct SampleLocationsInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal SampleCountFlags SampleLocationsPerPixel;
		internal Extent2D SampleLocationGridSize;
		internal UInt32 SampleLocationsCount;
		internal IntPtr SampleLocations;
	}

	internal partial struct AttachmentSampleLocationsExt
	{
		internal UInt32 AttachmentIndex;
		internal SampleLocationsInfoExt SampleLocationsInfo;
	}

	internal partial struct SubpassSampleLocationsExt
	{
		internal UInt32 SubpassIndex;
		internal SampleLocationsInfoExt SampleLocationsInfo;
	}

	internal partial struct RenderPassSampleLocationsBeginInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 AttachmentInitialSampleLocationsCount;
		internal IntPtr AttachmentInitialSampleLocations;
		internal UInt32 PostSubpassSampleLocationsCount;
		internal IntPtr PostSubpassSampleLocations;
	}

	internal partial struct PipelineSampleLocationsStateCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 SampleLocationsEnable;
		internal SampleLocationsInfoExt SampleLocationsInfo;
	}

	internal partial struct PhysicalDeviceSampleLocationsPropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal SampleCountFlags SampleLocationSampleCounts;
		internal Extent2D MaxSampleLocationGridSize;
		internal unsafe fixed float SampleLocationCoordinateRange[2];
		internal UInt32 SampleLocationSubPixelBits;
		internal Bool32 VariableSampleLocations;
	}

	internal partial struct MultisamplePropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Extent2D MaxSampleLocationGridSize;
	}

	internal partial struct SamplerReductionModeCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal SamplerReductionModeExt ReductionMode;
	}

	internal partial struct PhysicalDeviceBlendOperationAdvancedFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 AdvancedBlendCoherentOperations;
	}

	internal partial struct PhysicalDeviceBlendOperationAdvancedPropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 AdvancedBlendMaxColorAttachments;
		internal Bool32 AdvancedBlendIndependentBlend;
		internal Bool32 AdvancedBlendNonPremultipliedSrcColor;
		internal Bool32 AdvancedBlendNonPremultipliedDstColor;
		internal Bool32 AdvancedBlendCorrelatedOverlap;
		internal Bool32 AdvancedBlendAllOperations;
	}

	internal partial struct PipelineColorBlendAdvancedStateCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 SrcPremultiplied;
		internal Bool32 DstPremultiplied;
		internal BlendOverlapExt BlendOverlap;
	}

	internal partial struct PhysicalDeviceInlineUniformBlockFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 InlineUniformBlock;
		internal Bool32 DescriptorBindingInlineUniformBlockUpdateAfterBind;
	}

	internal partial struct PhysicalDeviceInlineUniformBlockPropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MaxInlineUniformBlockSize;
		internal UInt32 MaxPerStageDescriptorInlineUniformBlocks;
		internal UInt32 MaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
		internal UInt32 MaxDescriptorSetInlineUniformBlocks;
		internal UInt32 MaxDescriptorSetUpdateAfterBindInlineUniformBlocks;
	}

	internal partial struct WriteDescriptorSetInlineUniformBlockExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 DataSize;
		internal IntPtr Data;
	}

	internal partial struct DescriptorPoolInlineUniformBlockCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MaxInlineUniformBlockBindings;
	}

	internal partial struct PipelineCoverageModulationStateCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal CoverageModulationModeNv CoverageModulationMode;
		internal Bool32 CoverageModulationTableEnable;
		internal UInt32 CoverageModulationTableCount;
		internal IntPtr CoverageModulationTable;
	}

	internal partial struct ImageFormatListCreateInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 ViewFormatCount;
		internal IntPtr ViewFormats;
	}

	internal partial struct ValidationCacheCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UIntPtr InitialDataSize;
		internal IntPtr InitialData;
	}

	internal partial struct ShaderModuleValidationCacheCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 ValidationCache;
	}

	internal partial struct PhysicalDeviceMaintenance3Properties
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MaxPerSetDescriptors;
		internal DeviceSize MaxMemoryAllocationSize;
	}

	internal partial struct PhysicalDeviceMaintenance3PropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MaxPerSetDescriptors;
		internal DeviceSize MaxMemoryAllocationSize;

		public static implicit operator PhysicalDeviceMaintenance3PropertiesKhr (PhysicalDeviceMaintenance3Properties that) {
			var ret = new PhysicalDeviceMaintenance3PropertiesKhr {
				SType = that.SType,
				Next = that.Next,
				MaxPerSetDescriptors = that.MaxPerSetDescriptors,
				MaxMemoryAllocationSize = that.MaxMemoryAllocationSize,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceMaintenance3Properties (PhysicalDeviceMaintenance3PropertiesKhr that) {
			var ret = new PhysicalDeviceMaintenance3Properties {
				SType = that.SType,
				Next = that.Next,
				MaxPerSetDescriptors = that.MaxPerSetDescriptors,
				MaxMemoryAllocationSize = that.MaxMemoryAllocationSize,
			};

			return ret;
		}
	}

	internal partial struct DescriptorSetLayoutSupport
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 Supported;
	}

	internal partial struct DescriptorSetLayoutSupportKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 Supported;

		public static implicit operator DescriptorSetLayoutSupportKhr (DescriptorSetLayoutSupport that) {
			var ret = new DescriptorSetLayoutSupportKhr {
				SType = that.SType,
				Next = that.Next,
				Supported = that.Supported,
			};

			return ret;
		}

		public static implicit operator DescriptorSetLayoutSupport (DescriptorSetLayoutSupportKhr that) {
			var ret = new DescriptorSetLayoutSupport {
				SType = that.SType,
				Next = that.Next,
				Supported = that.Supported,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceShaderDrawParametersFeatures
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ShaderDrawParameters;
	}

	internal partial struct PhysicalDeviceShaderDrawParameterFeatures
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ShaderDrawParameters;

		public static implicit operator PhysicalDeviceShaderDrawParameterFeatures (PhysicalDeviceShaderDrawParametersFeatures that) {
			var ret = new PhysicalDeviceShaderDrawParameterFeatures {
				SType = that.SType,
				Next = that.Next,
				ShaderDrawParameters = that.ShaderDrawParameters,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceShaderDrawParametersFeatures (PhysicalDeviceShaderDrawParameterFeatures that) {
			var ret = new PhysicalDeviceShaderDrawParametersFeatures {
				SType = that.SType,
				Next = that.Next,
				ShaderDrawParameters = that.ShaderDrawParameters,
			};

			return ret;
		}
	}

	internal partial struct PhysicalDeviceFloat16Int8FeaturesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ShaderFloat16;
		internal Bool32 ShaderInt8;
	}

	internal partial struct PhysicalDeviceFloatControlsPropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 SeparateDenormSettings;
		internal Bool32 SeparateRoundingModeSettings;
		internal Bool32 ShaderSignedZeroInfNanPreserveFloat16;
		internal Bool32 ShaderSignedZeroInfNanPreserveFloat32;
		internal Bool32 ShaderSignedZeroInfNanPreserveFloat64;
		internal Bool32 ShaderDenormPreserveFloat16;
		internal Bool32 ShaderDenormPreserveFloat32;
		internal Bool32 ShaderDenormPreserveFloat64;
		internal Bool32 ShaderDenormFlushToZeroFloat16;
		internal Bool32 ShaderDenormFlushToZeroFloat32;
		internal Bool32 ShaderDenormFlushToZeroFloat64;
		internal Bool32 ShaderRoundingModeRtefloat16;
		internal Bool32 ShaderRoundingModeRtefloat32;
		internal Bool32 ShaderRoundingModeRtefloat64;
		internal Bool32 ShaderRoundingModeRtzfloat16;
		internal Bool32 ShaderRoundingModeRtzfloat32;
		internal Bool32 ShaderRoundingModeRtzfloat64;
	}

	internal partial struct PhysicalDeviceHostQueryResetFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 HostQueryReset;
	}

	internal partial struct ShaderStatisticsInfoAmd
	{
		internal ShaderStageFlags ShaderStageMask;
		internal ShaderResourceUsageAmd ResourceUsage;
		internal UInt32 NumPhysicalVgprs;
		internal UInt32 NumPhysicalSgprs;
		internal UInt32 NumAvailableVgprs;
		internal UInt32 NumAvailableSgprs;
		internal unsafe fixed UInt32 ComputeWorkGroupSize[3];
	}

	internal partial struct DeviceQueueGlobalPriorityCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal QueueGlobalPriorityExt GlobalPriority;
	}

	internal partial struct DebugUtilsObjectNameInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ObjectType ObjectType;
		internal UInt64 ObjectHandle;
		internal IntPtr ObjectName;
	}

	internal partial struct DebugUtilsObjectTagInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ObjectType ObjectType;
		internal UInt64 ObjectHandle;
		internal UInt64 TagName;
		internal UIntPtr TagSize;
		internal IntPtr Tag;
	}

	internal partial struct DebugUtilsLabelExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal IntPtr LabelName;
		internal unsafe fixed float Color[4];
	}

	internal partial struct DebugUtilsMessengerCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal DebugUtilsMessageSeverityFlagsExt MessageSeverity;
		internal DebugUtilsMessageTypeFlagsExt MessageType;
		internal IntPtr PfnUserCallback;
		internal IntPtr UserData;
	}

	internal partial struct DebugUtilsMessengerCallbackDataExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal IntPtr MessageIdName;
		internal Int32 MessageIdNumber;
		internal IntPtr Message;
		internal UInt32 QueueLabelCount;
		internal IntPtr QueueLabels;
		internal UInt32 CmdBufLabelCount;
		internal IntPtr CmdBufLabels;
		internal UInt32 ObjectCount;
		internal IntPtr Objects;
	}

	internal partial struct ImportMemoryHostPointerInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ExternalMemoryHandleTypeFlags HandleType;
		internal IntPtr HostPointer;
	}

	internal partial struct MemoryHostPointerPropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MemoryTypeBits;
	}

	internal partial struct PhysicalDeviceExternalMemoryHostPropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DeviceSize MinImportedHostPointerAlignment;
	}

	internal partial struct PhysicalDeviceConservativeRasterizationPropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal float PrimitiveOverestimationSize;
		internal float MaxExtraPrimitiveOverestimationSize;
		internal float ExtraPrimitiveOverestimationSizeGranularity;
		internal Bool32 PrimitiveUnderestimation;
		internal Bool32 ConservativePointAndLineRasterization;
		internal Bool32 DegenerateTrianglesRasterized;
		internal Bool32 DegenerateLinesRasterized;
		internal Bool32 FullyCoveredFragmentShaderInputVariable;
		internal Bool32 ConservativeRasterizationPostDepthCoverage;
	}

	internal partial struct CalibratedTimestampInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal TimeDomainExt TimeDomain;
	}

	internal partial struct PhysicalDeviceShaderCorePropertiesAmd
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 ShaderEngineCount;
		internal UInt32 ShaderArraysPerEngineCount;
		internal UInt32 ComputeUnitsPerShaderArray;
		internal UInt32 SimdPerComputeUnit;
		internal UInt32 WavefrontsPerSimd;
		internal UInt32 WavefrontSize;
		internal UInt32 SgprsPerSimd;
		internal UInt32 MinSgprAllocation;
		internal UInt32 MaxSgprAllocation;
		internal UInt32 SgprAllocationGranularity;
		internal UInt32 VgprsPerSimd;
		internal UInt32 MinVgprAllocation;
		internal UInt32 MaxVgprAllocation;
		internal UInt32 VgprAllocationGranularity;
	}

	internal partial struct PipelineRasterizationConservativeStateCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal ConservativeRasterizationModeExt ConservativeRasterizationMode;
		internal float ExtraPrimitiveOverestimationSize;
	}

	internal partial struct PhysicalDeviceDescriptorIndexingFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ShaderInputAttachmentArrayDynamicIndexing;
		internal Bool32 ShaderUniformTexelBufferArrayDynamicIndexing;
		internal Bool32 ShaderStorageTexelBufferArrayDynamicIndexing;
		internal Bool32 ShaderUniformBufferArrayNonUniformIndexing;
		internal Bool32 ShaderSampledImageArrayNonUniformIndexing;
		internal Bool32 ShaderStorageBufferArrayNonUniformIndexing;
		internal Bool32 ShaderStorageImageArrayNonUniformIndexing;
		internal Bool32 ShaderInputAttachmentArrayNonUniformIndexing;
		internal Bool32 ShaderUniformTexelBufferArrayNonUniformIndexing;
		internal Bool32 ShaderStorageTexelBufferArrayNonUniformIndexing;
		internal Bool32 DescriptorBindingUniformBufferUpdateAfterBind;
		internal Bool32 DescriptorBindingSampledImageUpdateAfterBind;
		internal Bool32 DescriptorBindingStorageImageUpdateAfterBind;
		internal Bool32 DescriptorBindingStorageBufferUpdateAfterBind;
		internal Bool32 DescriptorBindingUniformTexelBufferUpdateAfterBind;
		internal Bool32 DescriptorBindingStorageTexelBufferUpdateAfterBind;
		internal Bool32 DescriptorBindingUpdateUnusedWhilePending;
		internal Bool32 DescriptorBindingPartiallyBound;
		internal Bool32 DescriptorBindingVariableDescriptorCount;
		internal Bool32 RuntimeDescriptorArray;
	}

	internal partial struct PhysicalDeviceDescriptorIndexingPropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MaxUpdateAfterBindDescriptorsInAllPools;
		internal Bool32 ShaderUniformBufferArrayNonUniformIndexingNative;
		internal Bool32 ShaderSampledImageArrayNonUniformIndexingNative;
		internal Bool32 ShaderStorageBufferArrayNonUniformIndexingNative;
		internal Bool32 ShaderStorageImageArrayNonUniformIndexingNative;
		internal Bool32 ShaderInputAttachmentArrayNonUniformIndexingNative;
		internal Bool32 RobustBufferAccessUpdateAfterBind;
		internal Bool32 QuadDivergentImplicitLod;
		internal UInt32 MaxPerStageDescriptorUpdateAfterBindSamplers;
		internal UInt32 MaxPerStageDescriptorUpdateAfterBindUniformBuffers;
		internal UInt32 MaxPerStageDescriptorUpdateAfterBindStorageBuffers;
		internal UInt32 MaxPerStageDescriptorUpdateAfterBindSampledImages;
		internal UInt32 MaxPerStageDescriptorUpdateAfterBindStorageImages;
		internal UInt32 MaxPerStageDescriptorUpdateAfterBindInputAttachments;
		internal UInt32 MaxPerStageUpdateAfterBindResources;
		internal UInt32 MaxDescriptorSetUpdateAfterBindSamplers;
		internal UInt32 MaxDescriptorSetUpdateAfterBindUniformBuffers;
		internal UInt32 MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
		internal UInt32 MaxDescriptorSetUpdateAfterBindStorageBuffers;
		internal UInt32 MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
		internal UInt32 MaxDescriptorSetUpdateAfterBindSampledImages;
		internal UInt32 MaxDescriptorSetUpdateAfterBindStorageImages;
		internal UInt32 MaxDescriptorSetUpdateAfterBindInputAttachments;
	}

	internal partial struct DescriptorSetLayoutBindingFlagsCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 BindingCount;
		internal IntPtr BindingFlags;
	}

	internal partial struct DescriptorSetVariableDescriptorCountAllocateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 DescriptorSetCount;
		internal IntPtr DescriptorCounts;
	}

	internal partial struct DescriptorSetVariableDescriptorCountLayoutSupportExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MaxVariableDescriptorCount;
	}

	internal partial struct AttachmentDescription2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal AttachmentDescriptionFlags Flags;
		internal Format Format;
		internal SampleCountFlags Samples;
		internal AttachmentLoadOp LoadOp;
		internal AttachmentStoreOp StoreOp;
		internal AttachmentLoadOp StencilLoadOp;
		internal AttachmentStoreOp StencilStoreOp;
		internal ImageLayout InitialLayout;
		internal ImageLayout FinalLayout;
	}

	internal partial struct AttachmentReference2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Attachment;
		internal ImageLayout Layout;
		internal ImageAspectFlags AspectMask;
	}

	internal partial struct SubpassDescription2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal SubpassDescriptionFlags Flags;
		internal PipelineBindPoint PipelineBindPoint;
		internal UInt32 ViewMask;
		internal UInt32 InputAttachmentCount;
		internal IntPtr InputAttachments;
		internal UInt32 ColorAttachmentCount;
		internal IntPtr ColorAttachments;
		internal IntPtr ResolveAttachments;
		internal IntPtr DepthStencilAttachment;
		internal UInt32 PreserveAttachmentCount;
		internal IntPtr PreserveAttachments;
	}

	internal partial struct SubpassDependency2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 SrcSubpass;
		internal UInt32 DstSubpass;
		internal PipelineStageFlags SrcStageMask;
		internal PipelineStageFlags DstStageMask;
		internal AccessFlags SrcAccessMask;
		internal AccessFlags DstAccessMask;
		internal DependencyFlags DependencyFlags;
		internal Int32 ViewOffset;
	}

	internal partial struct RenderPassCreateInfo2Khr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt32 AttachmentCount;
		internal IntPtr Attachments;
		internal UInt32 SubpassCount;
		internal IntPtr Subpasses;
		internal UInt32 DependencyCount;
		internal IntPtr Dependencies;
		internal UInt32 CorrelatedViewMaskCount;
		internal IntPtr CorrelatedViewMasks;
	}

	internal partial struct SubpassBeginInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal SubpassContents Contents;
	}

	internal partial struct SubpassEndInfoKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
	}

	internal partial struct PipelineVertexInputDivisorStateCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 VertexBindingDivisorCount;
		internal IntPtr VertexBindingDivisors;
	}

	internal partial struct PhysicalDeviceVertexAttributeDivisorPropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MaxVertexAttribDivisor;
	}

	internal partial struct PhysicalDevicePCIBusInfoPropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 PciDomain;
		internal UInt32 PciBus;
		internal UInt32 PciDevice;
		internal UInt32 PciFunction;
	}

	internal partial struct AndroidHardwareBufferUsageAndroid
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 AndroidHardwareBufferUsage;
	}

	internal partial struct AndroidHardwareBufferPropertiesAndroid
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DeviceSize AllocationSize;
		internal UInt32 MemoryTypeBits;
	}

	internal partial struct MemoryGetAndroidHardwareBufferInfoAndroid
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Memory;
	}

	internal partial struct AndroidHardwareBufferFormatPropertiesAndroid
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Format Format;
		internal UInt64 ExternalFormat;
		internal FormatFeatureFlags FormatFeatures;
		internal ComponentMapping SamplerYcbcrConversionComponents;
		internal SamplerYcbcrModelConversion SuggestedYcbcrModel;
		internal SamplerYcbcrRange SuggestedYcbcrRange;
		internal ChromaLocation SuggestedXchromaOffset;
		internal ChromaLocation SuggestedYchromaOffset;
	}

	internal partial struct CommandBufferInheritanceConditionalRenderingInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ConditionalRenderingEnable;
	}

	internal partial struct ExternalFormatAndroid
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 ExternalFormat;
	}

	internal partial struct PhysicalDevice8BitStorageFeaturesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 StorageBuffer8BitAccess;
		internal Bool32 UniformAndStorageBuffer8BitAccess;
		internal Bool32 StoragePushConstant8;
	}

	internal partial struct PhysicalDeviceConditionalRenderingFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ConditionalRendering;
		internal Bool32 InheritedConditionalRendering;
	}

	internal partial struct PhysicalDeviceVulkanMemoryModelFeaturesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 VulkanMemoryModel;
		internal Bool32 VulkanMemoryModelDeviceScope;
		internal Bool32 VulkanMemoryModelAvailabilityVisibilityChains;
	}

	internal partial struct PhysicalDeviceShaderAtomicInt64FeaturesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ShaderBufferInt64Atomics;
		internal Bool32 ShaderSharedInt64Atomics;
	}

	internal partial struct PhysicalDeviceVertexAttributeDivisorFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 VertexAttributeInstanceRateDivisor;
		internal Bool32 VertexAttributeInstanceRateZeroDivisor;
	}

	internal partial struct QueueFamilyCheckpointPropertiesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PipelineStageFlags CheckpointExecutionStageMask;
	}

	internal partial struct CheckpointDataNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PipelineStageFlags Stage;
		internal IntPtr CheckpointMarker;
	}

	internal partial struct PhysicalDeviceDepthStencilResolvePropertiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ResolveModeFlagsKhr SupportedDepthResolveModes;
		internal ResolveModeFlagsKhr SupportedStencilResolveModes;
		internal Bool32 IndependentResolveNone;
		internal Bool32 IndependentResolve;
	}

	internal partial struct SubpassDescriptionDepthStencilResolveKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ResolveModeFlagsKhr DepthResolveMode;
		internal ResolveModeFlagsKhr StencilResolveMode;
		internal IntPtr DepthStencilResolveAttachment;
	}

	internal partial struct ImageViewASTCDecodeModeExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Format DecodeMode;
	}

	internal partial struct PhysicalDeviceASTCDecodeFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 DecodeModeSharedExponent;
	}

	internal partial struct PhysicalDeviceTransformFeedbackFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 TransformFeedback;
		internal Bool32 GeometryStreams;
	}

	internal partial struct PhysicalDeviceTransformFeedbackPropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MaxTransformFeedbackStreams;
		internal UInt32 MaxTransformFeedbackBuffers;
		internal DeviceSize MaxTransformFeedbackBufferSize;
		internal UInt32 MaxTransformFeedbackStreamDataSize;
		internal UInt32 MaxTransformFeedbackBufferDataSize;
		internal UInt32 MaxTransformFeedbackBufferDataStride;
		internal Bool32 TransformFeedbackQueries;
		internal Bool32 TransformFeedbackStreamsLinesTriangles;
		internal Bool32 TransformFeedbackRasterizationStreamSelect;
		internal Bool32 TransformFeedbackDraw;
	}

	internal partial struct PipelineRasterizationStateStreamCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal UInt32 RasterizationStream;
	}

	internal partial struct PhysicalDeviceRepresentativeFragmentTestFeaturesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 RepresentativeFragmentTest;
	}

	internal partial struct PipelineRepresentativeFragmentTestStateCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 RepresentativeFragmentTestEnable;
	}

	internal partial struct PhysicalDeviceExclusiveScissorFeaturesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ExclusiveScissor;
	}

	internal partial struct PipelineViewportExclusiveScissorStateCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 ExclusiveScissorCount;
		internal IntPtr ExclusiveScissors;
	}

	internal partial struct PhysicalDeviceCornerSampledImageFeaturesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 CornerSampledImage;
	}

	internal partial struct PhysicalDeviceComputeShaderDerivativesFeaturesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ComputeDerivativeGroupQuads;
		internal Bool32 ComputeDerivativeGroupLinear;
	}

	internal partial struct PhysicalDeviceFragmentShaderBarycentricFeaturesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 FragmentShaderBarycentric;
	}

	internal partial struct PhysicalDeviceShaderImageFootprintFeaturesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ImageFootprint;
	}

	internal partial struct PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 DedicatedAllocationImageAliasing;
	}

	internal partial struct ShadingRatePaletteNv
	{
		internal UInt32 ShadingRatePaletteEntryCount;
		internal IntPtr ShadingRatePaletteEntries;
	}

	internal partial struct PipelineViewportShadingRateImageStateCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ShadingRateImageEnable;
		internal UInt32 ViewportCount;
		internal IntPtr ShadingRatePalettes;
	}

	internal partial struct PhysicalDeviceShadingRateImageFeaturesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ShadingRateImage;
		internal Bool32 ShadingRateCoarseSampleOrder;
	}

	internal partial struct PhysicalDeviceShadingRateImagePropertiesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Extent2D ShadingRateTexelSize;
		internal UInt32 ShadingRatePaletteSize;
		internal UInt32 ShadingRateMaxCoarseSamples;
	}

	internal partial struct CoarseSampleOrderCustomNv
	{
		internal ShadingRatePaletteEntryNv ShadingRate;
		internal UInt32 SampleCount;
		internal UInt32 SampleLocationCount;
		internal IntPtr SampleLocations;
	}

	internal partial struct PipelineViewportCoarseSampleOrderStateCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal CoarseSampleOrderTypeNv SampleOrderType;
		internal UInt32 CustomSampleOrderCount;
		internal IntPtr CustomSampleOrders;
	}

	internal partial struct PhysicalDeviceMeshShaderFeaturesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 TaskShader;
		internal Bool32 MeshShader;
	}

	internal partial struct PhysicalDeviceMeshShaderPropertiesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 MaxDrawMeshTasksCount;
		internal UInt32 MaxTaskWorkGroupInvocations;
		internal unsafe fixed UInt32 MaxTaskWorkGroupSize[3];
		internal UInt32 MaxTaskTotalMemorySize;
		internal UInt32 MaxTaskOutputCount;
		internal UInt32 MaxMeshWorkGroupInvocations;
		internal unsafe fixed UInt32 MaxMeshWorkGroupSize[3];
		internal UInt32 MaxMeshTotalMemorySize;
		internal UInt32 MaxMeshOutputVertices;
		internal UInt32 MaxMeshOutputPrimitives;
		internal UInt32 MaxMeshMultiviewViewCount;
		internal UInt32 MeshOutputPerVertexGranularity;
		internal UInt32 MeshOutputPerPrimitiveGranularity;
	}

	internal partial struct RayTracingShaderGroupCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal RayTracingShaderGroupTypeNv Type;
		internal UInt32 GeneralShader;
		internal UInt32 ClosestHitShader;
		internal UInt32 AnyHitShader;
		internal UInt32 IntersectionShader;
	}

	internal partial struct RayTracingPipelineCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PipelineCreateFlags Flags;
		internal UInt32 StageCount;
		internal IntPtr Stages;
		internal UInt32 GroupCount;
		internal IntPtr Groups;
		internal UInt32 MaxRecursionDepth;
		internal UInt64 Layout;
		internal UInt64 BasePipelineHandle;
		internal Int32 BasePipelineIndex;
	}

	internal partial struct GeometryTrianglesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 VertexData;
		internal DeviceSize VertexOffset;
		internal UInt32 VertexCount;
		internal DeviceSize VertexStride;
		internal Format VertexFormat;
		internal UInt64 IndexData;
		internal DeviceSize IndexOffset;
		internal UInt32 IndexCount;
		internal IndexType IndexType;
		internal UInt64 TransformData;
		internal DeviceSize TransformOffset;
	}

	internal partial struct GeometryAABBNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 AabbData;
		internal UInt32 NumAabbs;
		internal UInt32 Stride;
		internal DeviceSize Offset;
	}

	internal partial struct GeometryDataNv
	{
		internal GeometryTrianglesNv Triangles;
		internal GeometryAABBNv Aabbs;
	}

	internal partial struct GeometryNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal GeometryTypeNv GeometryType;
		internal GeometryDataNv Geometry;
		internal GeometryFlagsNv Flags;
	}

	internal partial struct AccelerationStructureInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal AccelerationStructureTypeNv Type;
		internal BuildAccelerationStructureFlagsNv Flags;
		internal UInt32 InstanceCount;
		internal UInt32 GeometryCount;
		internal IntPtr Geometries;
	}

	internal partial struct AccelerationStructureCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DeviceSize CompactedSize;
		internal AccelerationStructureInfoNv Info;
	}

	internal partial struct BindAccelerationStructureMemoryInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 AccelerationStructure;
		internal UInt64 Memory;
		internal DeviceSize MemoryOffset;
		internal UInt32 DeviceIndexCount;
		internal IntPtr DeviceIndices;
	}

	internal partial struct WriteDescriptorSetAccelerationStructureNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 AccelerationStructureCount;
		internal IntPtr AccelerationStructures;
	}

	internal partial struct AccelerationStructureMemoryRequirementsInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal AccelerationStructureMemoryRequirementsTypeNv Type;
		internal UInt64 AccelerationStructure;
	}

	internal partial struct PhysicalDeviceRayTracingPropertiesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 ShaderGroupHandleSize;
		internal UInt32 MaxRecursionDepth;
		internal UInt32 MaxShaderGroupStride;
		internal UInt32 ShaderGroupBaseAlignment;
		internal UInt64 MaxGeometryCount;
		internal UInt64 MaxInstanceCount;
		internal UInt64 MaxTriangleCount;
		internal UInt32 MaxDescriptorSetAccelerationStructures;
	}

	internal partial struct DrmFormatModifierPropertiesListExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 DrmFormatModifierCount;
		internal IntPtr DrmFormatModifierProperties;
	}

	internal partial struct PhysicalDeviceImageDrmFormatModifierInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 DrmFormatModifier;
		internal SharingMode SharingMode;
		internal UInt32 QueueFamilyIndexCount;
		internal IntPtr QueueFamilyIndices;
	}

	internal partial struct ImageDrmFormatModifierListCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 DrmFormatModifierCount;
		internal IntPtr DrmFormatModifiers;
	}

	internal partial struct ImageDrmFormatModifierExplicitCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 DrmFormatModifier;
		internal UInt32 DrmFormatModifierPlaneCount;
		internal IntPtr PlaneLayouts;
	}

	internal partial struct ImageDrmFormatModifierPropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 DrmFormatModifier;
	}

	internal partial struct ImageStencilUsageCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ImageUsageFlags StencilUsage;
	}

	internal partial struct DeviceMemoryOverallocationCreateInfoAmd
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal MemoryOverallocationBehaviorAmd OverallocationBehavior;
	}

	internal partial struct PhysicalDeviceFragmentDensityMapFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 FragmentDensityMap;
		internal Bool32 FragmentDensityMapDynamic;
		internal Bool32 FragmentDensityMapNonSubsampledImages;
	}

	internal partial struct PhysicalDeviceFragmentDensityMapPropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Extent2D MinFragmentDensityTexelSize;
		internal Extent2D MaxFragmentDensityTexelSize;
		internal Bool32 FragmentDensityInvocations;
	}

	internal partial struct RenderPassFragmentDensityMapCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal AttachmentReference FragmentDensityMapAttachment;
	}

	internal partial struct PhysicalDeviceScalarBlockLayoutFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ScalarBlockLayout;
	}

	internal partial struct SurfaceProtectedCapabilitiesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 SupportsProtected;
	}

	internal partial struct PhysicalDeviceUniformBufferStandardLayoutFeaturesKhr
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 UniformBufferStandardLayout;
	}

	internal partial struct PhysicalDeviceDepthClipEnableFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 DepthClipEnable;
	}

	internal partial struct PipelineRasterizationDepthClipStateCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal Bool32 DepthClipEnable;
	}

	internal partial struct PhysicalDeviceMemoryPriorityFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 MemoryPriority;
	}

	internal partial struct MemoryPriorityAllocateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal float Priority;
	}

	internal partial struct PhysicalDeviceBufferDeviceAddressFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 BufferDeviceAddress;
		internal Bool32 BufferDeviceAddressCaptureReplay;
		internal Bool32 BufferDeviceAddressMultiDevice;
	}

	internal partial struct PhysicalDeviceBufferAddressFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 BufferDeviceAddress;
		internal Bool32 BufferDeviceAddressCaptureReplay;
		internal Bool32 BufferDeviceAddressMultiDevice;

		public static implicit operator PhysicalDeviceBufferAddressFeaturesExt (PhysicalDeviceBufferDeviceAddressFeaturesExt that) {
			var ret = new PhysicalDeviceBufferAddressFeaturesExt {
				SType = that.SType,
				Next = that.Next,
				BufferDeviceAddress = that.BufferDeviceAddress,
				BufferDeviceAddressCaptureReplay = that.BufferDeviceAddressCaptureReplay,
				BufferDeviceAddressMultiDevice = that.BufferDeviceAddressMultiDevice,
			};

			return ret;
		}

		public static implicit operator PhysicalDeviceBufferDeviceAddressFeaturesExt (PhysicalDeviceBufferAddressFeaturesExt that) {
			var ret = new PhysicalDeviceBufferDeviceAddressFeaturesExt {
				SType = that.SType,
				Next = that.Next,
				BufferDeviceAddress = that.BufferDeviceAddress,
				BufferDeviceAddressCaptureReplay = that.BufferDeviceAddressCaptureReplay,
				BufferDeviceAddressMultiDevice = that.BufferDeviceAddressMultiDevice,
			};

			return ret;
		}
	}

	internal partial struct BufferDeviceAddressInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Buffer;
	}

	internal partial struct BufferDeviceAddressCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal DeviceAddress DeviceAddress;
	}

	internal partial struct PhysicalDeviceImageViewImageFormatInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ImageViewType ImageViewType;
	}

	internal partial struct FilterCubicImageViewImageFormatPropertiesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 FilterCubic;
		internal Bool32 FilterCubicMinmax;
	}

	internal partial struct PhysicalDeviceCooperativeMatrixFeaturesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 CooperativeMatrix;
		internal Bool32 CooperativeMatrixRobustBufferAccess;
	}

	internal partial struct PhysicalDeviceCooperativeMatrixPropertiesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal ShaderStageFlags CooperativeMatrixSupportedStages;
	}

	internal partial struct CooperativeMatrixPropertiesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Msize;
		internal UInt32 Nsize;
		internal UInt32 Ksize;
		internal ComponentTypeNv Atype;
		internal ComponentTypeNv Btype;
		internal ComponentTypeNv Ctype;
		internal ComponentTypeNv Dtype;
		internal ScopeNv Scope;
	}

	internal partial struct PhysicalDeviceYcbcrImageArraysFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 YcbcrImageArrays;
	}

	internal partial struct ImageViewHandleInfoNvx
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 ImageView;
		internal DescriptorType DescriptorType;
		internal UInt64 Sampler;
	}

	internal partial struct PresentFrameTokenGGP
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal int FrameToken;
	}

	internal partial struct PipelineCreationFeedbackCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal IntPtr PipelineCreationFeedback;
		internal UInt32 PipelineStageCreationFeedbackCount;
		internal IntPtr PipelineStageCreationFeedbacks;
	}

	internal partial struct SurfaceFullScreenExclusiveInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal FullScreenExclusiveExt FullScreenExclusive;
	}

	internal partial struct SurfaceFullScreenExclusiveWin32InfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal IntPtr Hmonitor;
	}

	internal partial struct SurfaceCapabilitiesFullScreenExclusiveExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 FullScreenExclusiveSupported;
	}

	internal partial struct HeadlessSurfaceCreateInfoExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
	}

	internal partial struct PhysicalDeviceCoverageReductionModeFeaturesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 CoverageReductionMode;
	}

	internal partial struct PipelineCoverageReductionStateCreateInfoNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Flags;
		internal CoverageReductionModeNv CoverageReductionMode;
	}

	internal partial struct FramebufferMixedSamplesCombinationNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal CoverageReductionModeNv CoverageReductionMode;
		internal SampleCountFlags RasterizationSamples;
		internal SampleCountFlags DepthStencilSamples;
		internal SampleCountFlags ColorSamples;
	}

	internal partial struct PhysicalDeviceShaderIntegerFunctions2Intel
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ShaderIntegerFunctions2;
	}

	internal partial struct PerformanceValueIntel
	{
		internal PerformanceValueTypeIntel Type;
		internal PerformanceValueDataIntel Data;
	}

	internal partial struct InitializePerformanceApiInfoIntel
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal IntPtr UserData;
	}

	internal partial struct QueryPoolCreateInfoIntel
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal QueryPoolSamplingModeIntel PerformanceCountersSampling;
	}

	internal partial struct PerformanceMarkerInfoIntel
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt64 Marker;
	}

	internal partial struct PerformanceStreamMarkerInfoIntel
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 Marker;
	}

	internal partial struct PerformanceOverrideInfoIntel
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PerformanceOverrideTypeIntel Type;
		internal Bool32 Enable;
		internal UInt64 Parameter;
	}

	internal partial struct PerformanceConfigurationAcquireInfoIntel
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal PerformanceConfigurationTypeIntel Type;
	}

	internal partial struct PhysicalDeviceShaderSMBuiltinsPropertiesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal UInt32 ShaderSmcount;
		internal UInt32 ShaderWarpsPerSm;
	}

	internal partial struct PhysicalDeviceShaderSMBuiltinsFeaturesNv
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 ShaderSmbuiltins;
	}

	internal partial struct PhysicalDeviceFragmentShaderInterlockFeaturesExt
	{
		internal StructureType SType;
		internal IntPtr Next;
		internal Bool32 FragmentShaderSampleInterlock;
		internal Bool32 FragmentShaderPixelInterlock;
		internal Bool32 FragmentShaderShadingRateInterlock;
	}
}
