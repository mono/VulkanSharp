/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Vulkan
{
	public partial class Instance : IMarshalling
	{
		internal IntPtr m;

		IntPtr IMarshalling.Handle {
			get {
				return m;
			}
		}

		public void Destroy (AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyInstance (this.m, pAllocator != null ? pAllocator.m : null);
			}
		}

		public PhysicalDevice[] EnumeratePhysicalDevices ()
		{
			Result result;
			unsafe {
				UInt32 pPhysicalDeviceCount;
				result = Interop.NativeMethods.vkEnumeratePhysicalDevices (this.m, &pPhysicalDeviceCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPhysicalDeviceCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (IntPtr));
				var refpPhysicalDevices = new NativeReference ((int)(size * pPhysicalDeviceCount));
				var ptrpPhysicalDevices = refpPhysicalDevices.Handle;
				result = Interop.NativeMethods.vkEnumeratePhysicalDevices (this.m, &pPhysicalDeviceCount, (IntPtr*)ptrpPhysicalDevices);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPhysicalDeviceCount <= 0)
					return null;
				var arr = new PhysicalDevice [pPhysicalDeviceCount];
				for (int i = 0; i < pPhysicalDeviceCount; i++) {
					arr [i] = new PhysicalDevice ();
					arr [i].m = ((IntPtr*)ptrpPhysicalDevices) [i];
				}

				return arr;
			}
		}

		public IntPtr GetProcAddr (string pName)
		{
			unsafe {
				return Interop.NativeMethods.vkGetInstanceProcAddr (this.m, pName);
			}
		}

		public SurfaceKhr CreateDisplayPlaneSurfaceKHR (DisplaySurfaceCreateInfoKhr pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			SurfaceKhr pSurface;
			unsafe {
				pSurface = new SurfaceKhr ();

				fixed (UInt64* ptrpSurface = &pSurface.m) {
					result = Interop.NativeMethods.vkCreateDisplayPlaneSurfaceKHR (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.DisplaySurfaceCreateInfoKhr*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpSurface);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurface;
			}
		}

		public void DestroySurfaceKHR (SurfaceKhr surface = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroySurfaceKHR (this.m, surface != null ? surface.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public SurfaceKhr CreateViSurfaceNN (ViSurfaceCreateInfoNn pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			SurfaceKhr pSurface;
			unsafe {
				pSurface = new SurfaceKhr ();

				fixed (UInt64* ptrpSurface = &pSurface.m) {
					result = Interop.NativeMethods.vkCreateViSurfaceNN (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.ViSurfaceCreateInfoNn*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpSurface);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurface;
			}
		}

		public SurfaceKhr CreateImagePipeSurfaceFUCHSIA (ImagePipeSurfaceCreateInfoFUCHSIA pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			SurfaceKhr pSurface;
			unsafe {
				pSurface = new SurfaceKhr ();

				fixed (UInt64* ptrpSurface = &pSurface.m) {
					result = Interop.NativeMethods.vkCreateImagePipeSurfaceFUCHSIA (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.ImagePipeSurfaceCreateInfoFUCHSIA*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpSurface);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurface;
			}
		}

		public SurfaceKhr CreateStreamDescriptorSurfaceGGP (StreamDescriptorSurfaceCreateInfoGGP pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			SurfaceKhr pSurface;
			unsafe {
				pSurface = new SurfaceKhr ();

				fixed (UInt64* ptrpSurface = &pSurface.m) {
					result = Interop.NativeMethods.vkCreateStreamDescriptorSurfaceGGP (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.StreamDescriptorSurfaceCreateInfoGGP*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpSurface);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurface;
			}
		}

		public DebugReportCallbackExt CreateDebugReportCallbackEXT (DebugReportCallbackCreateInfoExt pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			DebugReportCallbackExt pCallback;
			unsafe {
				pCallback = new DebugReportCallbackExt ();

				fixed (UInt64* ptrpCallback = &pCallback.m) {
					result = vkCreateDebugReportCallbackEXT (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.DebugReportCallbackCreateInfoExt*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpCallback);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pCallback;
			}
		}

		public void DestroyDebugReportCallbackEXT (DebugReportCallbackExt callback, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				vkDestroyDebugReportCallbackEXT (this.m, callback != null ? callback.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public void DebugReportMessageEXT (DebugReportFlagsExt flags, DebugReportObjectTypeExt objectType, UInt64 @object, UIntPtr location, Int32 messageCode, string pLayerPrefix, string pMessage)
		{
			unsafe {
				vkDebugReportMessageEXT (this.m, flags, objectType, @object, location, messageCode, pLayerPrefix, pMessage);
			}
		}

		public SurfaceKhr CreateMacOSSurfaceMVK (MacOSSurfaceCreateInfoMvk pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			SurfaceKhr pSurface;
			unsafe {
				pSurface = new SurfaceKhr ();

				fixed (UInt64* ptrpSurface = &pSurface.m) {
					result = Interop.NativeMethods.vkCreateMacOSSurfaceMVK (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.MacOSSurfaceCreateInfoMvk*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpSurface);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurface;
			}
		}

		public DebugUtilsMessengerExt CreateDebugUtilsMessengerEXT (DebugUtilsMessengerCreateInfoExt pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			DebugUtilsMessengerExt pMessenger;
			unsafe {
				pMessenger = new DebugUtilsMessengerExt ();

				fixed (UInt64* ptrpMessenger = &pMessenger.m) {
					result = Interop.NativeMethods.vkCreateDebugUtilsMessengerEXT (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.DebugUtilsMessengerCreateInfoExt*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpMessenger);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pMessenger;
			}
		}

		public void DestroyDebugUtilsMessengerEXT (DebugUtilsMessengerExt messenger, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyDebugUtilsMessengerEXT (this.m, messenger != null ? messenger.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public void SubmitDebugUtilsMessageEXT (DebugUtilsMessageSeverityFlagsExt messageSeverity, DebugUtilsMessageTypeFlagsExt messageTypes, DebugUtilsMessengerCallbackDataExt pCallbackData)
		{
			unsafe {
				Interop.NativeMethods.vkSubmitDebugUtilsMessageEXT (this.m, messageSeverity, messageTypes, pCallbackData != null ? pCallbackData.m : (Interop.DebugUtilsMessengerCallbackDataExt*)default(IntPtr));
			}
		}

		public SurfaceKhr CreateHeadlessSurfaceEXT (HeadlessSurfaceCreateInfoExt pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			SurfaceKhr pSurface;
			unsafe {
				pSurface = new SurfaceKhr ();

				fixed (UInt64* ptrpSurface = &pSurface.m) {
					result = Interop.NativeMethods.vkCreateHeadlessSurfaceEXT (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.HeadlessSurfaceCreateInfoExt*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpSurface);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurface;
			}
		}
	}

	public partial class PhysicalDevice : IMarshalling
	{
		internal PhysicalDevice() {}

		internal IntPtr m;

		IntPtr IMarshalling.Handle {
			get {
				return m;
			}
		}

		public PhysicalDeviceProperties GetProperties ()
		{
			PhysicalDeviceProperties pProperties;
			unsafe {
				pProperties = new PhysicalDeviceProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceProperties (this.m, pProperties != null ? pProperties.m : (Interop.PhysicalDeviceProperties*)default(IntPtr));

				return pProperties;
			}
		}

		public QueueFamilyProperties[] GetQueueFamilyProperties ()
		{
			unsafe {
				UInt32 pQueueFamilyPropertyCount;
				Interop.NativeMethods.vkGetPhysicalDeviceQueueFamilyProperties (this.m, &pQueueFamilyPropertyCount, null);
				if (pQueueFamilyPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (QueueFamilyProperties));
				var refpQueueFamilyProperties = new NativeReference ((int)(size * pQueueFamilyPropertyCount));
				var ptrpQueueFamilyProperties = refpQueueFamilyProperties.Handle;
				Interop.NativeMethods.vkGetPhysicalDeviceQueueFamilyProperties (this.m, &pQueueFamilyPropertyCount, (QueueFamilyProperties*)ptrpQueueFamilyProperties);

				if (pQueueFamilyPropertyCount <= 0)
					return null;
				var arr = new QueueFamilyProperties [pQueueFamilyPropertyCount];
				for (int i = 0; i < pQueueFamilyPropertyCount; i++) {
					arr [i] = (((QueueFamilyProperties*)ptrpQueueFamilyProperties) [i]);
				}

				return arr;
			}
		}

		public PhysicalDeviceMemoryProperties GetMemoryProperties ()
		{
			PhysicalDeviceMemoryProperties pMemoryProperties;
			unsafe {
				pMemoryProperties = new PhysicalDeviceMemoryProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceMemoryProperties (this.m, pMemoryProperties != null ? pMemoryProperties.m : (Interop.PhysicalDeviceMemoryProperties*)default(IntPtr));

				return pMemoryProperties;
			}
		}

		public PhysicalDeviceFeatures GetFeatures ()
		{
			PhysicalDeviceFeatures pFeatures;
			unsafe {
				pFeatures = new PhysicalDeviceFeatures ();
				Interop.NativeMethods.vkGetPhysicalDeviceFeatures (this.m, &pFeatures);

				return pFeatures;
			}
		}

		public FormatProperties GetFormatProperties (Format format)
		{
			FormatProperties pFormatProperties;
			unsafe {
				pFormatProperties = new FormatProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceFormatProperties (this.m, format, &pFormatProperties);

				return pFormatProperties;
			}
		}

		public ImageFormatProperties GetImageFormatProperties (Format format, ImageType type, ImageTiling tiling, ImageUsageFlags usage, ImageCreateFlags flags = (ImageCreateFlags)0)
		{
			Result result;
			ImageFormatProperties pImageFormatProperties;
			unsafe {
				pImageFormatProperties = new ImageFormatProperties ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceImageFormatProperties (this.m, format, type, tiling, usage, flags, &pImageFormatProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				return pImageFormatProperties;
			}
		}

		public Device CreateDevice (DeviceCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			Device pDevice;
			unsafe {
				pDevice = new Device ();

				fixed (IntPtr* ptrpDevice = &pDevice.m) {
					result = Interop.NativeMethods.vkCreateDevice (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.DeviceCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpDevice);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pDevice;
			}
		}

		public LayerProperties[] EnumerateDeviceLayerProperties ()
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkEnumerateDeviceLayerProperties (this.m, &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.LayerProperties));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				result = Interop.NativeMethods.vkEnumerateDeviceLayerProperties (this.m, &pPropertyCount, (Interop.LayerProperties*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPropertyCount <= 0)
					return null;
				var arr = new LayerProperties [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new LayerProperties (new NativePointer (refpProperties, (IntPtr)(&((Interop.LayerProperties*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public ExtensionProperties[] EnumerateDeviceExtensionProperties (string pLayerName = null)
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkEnumerateDeviceExtensionProperties (this.m, pLayerName, &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.ExtensionProperties));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				result = Interop.NativeMethods.vkEnumerateDeviceExtensionProperties (this.m, pLayerName, &pPropertyCount, (Interop.ExtensionProperties*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPropertyCount <= 0)
					return null;
				var arr = new ExtensionProperties [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new ExtensionProperties (new NativePointer (refpProperties, (IntPtr)(&((Interop.ExtensionProperties*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public SparseImageFormatProperties[] GetSparseImageFormatProperties (Format format, ImageType type, SampleCountFlags samples, ImageUsageFlags usage, ImageTiling tiling)
		{
			unsafe {
				UInt32 pPropertyCount;
				Interop.NativeMethods.vkGetPhysicalDeviceSparseImageFormatProperties (this.m, format, type, samples, usage, tiling, &pPropertyCount, null);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (SparseImageFormatProperties));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				Interop.NativeMethods.vkGetPhysicalDeviceSparseImageFormatProperties (this.m, format, type, samples, usage, tiling, &pPropertyCount, (SparseImageFormatProperties*)ptrpProperties);

				if (pPropertyCount <= 0)
					return null;
				var arr = new SparseImageFormatProperties [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = (((SparseImageFormatProperties*)ptrpProperties) [i]);
				}

				return arr;
			}
		}

		public DisplayPropertiesKhr[] GetDisplayPropertiesKHR ()
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceDisplayPropertiesKHR (this.m, &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.DisplayPropertiesKhr));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceDisplayPropertiesKHR (this.m, &pPropertyCount, (Interop.DisplayPropertiesKhr*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPropertyCount <= 0)
					return null;
				var arr = new DisplayPropertiesKhr [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new DisplayPropertiesKhr (new NativePointer (refpProperties, (IntPtr)(&((Interop.DisplayPropertiesKhr*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public DisplayPlanePropertiesKhr[] GetDisplayPlanePropertiesKHR ()
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceDisplayPlanePropertiesKHR (this.m, &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.DisplayPlanePropertiesKhr));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceDisplayPlanePropertiesKHR (this.m, &pPropertyCount, (Interop.DisplayPlanePropertiesKhr*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPropertyCount <= 0)
					return null;
				var arr = new DisplayPlanePropertiesKhr [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new DisplayPlanePropertiesKhr (new NativePointer (refpProperties, (IntPtr)(&((Interop.DisplayPlanePropertiesKhr*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public DisplayKhr[] GetDisplayPlaneSupportedDisplaysKHR (UInt32 planeIndex)
		{
			Result result;
			unsafe {
				UInt32 pDisplayCount;
				result = Interop.NativeMethods.vkGetDisplayPlaneSupportedDisplaysKHR (this.m, planeIndex, &pDisplayCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pDisplayCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (UInt64));
				var refpDisplays = new NativeReference ((int)(size * pDisplayCount));
				var ptrpDisplays = refpDisplays.Handle;
				result = Interop.NativeMethods.vkGetDisplayPlaneSupportedDisplaysKHR (this.m, planeIndex, &pDisplayCount, (UInt64*)ptrpDisplays);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pDisplayCount <= 0)
					return null;
				var arr = new DisplayKhr [pDisplayCount];
				for (int i = 0; i < pDisplayCount; i++) {
					arr [i] = new DisplayKhr ();
					arr [i].m = ((UInt64*)ptrpDisplays) [i];
				}

				return arr;
			}
		}

		public DisplayModePropertiesKhr[] GetDisplayModePropertiesKHR (DisplayKhr display)
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkGetDisplayModePropertiesKHR (this.m, display != null ? display.m : default(UInt64), &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.DisplayModePropertiesKhr));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				result = Interop.NativeMethods.vkGetDisplayModePropertiesKHR (this.m, display != null ? display.m : default(UInt64), &pPropertyCount, (Interop.DisplayModePropertiesKhr*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPropertyCount <= 0)
					return null;
				var arr = new DisplayModePropertiesKhr [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new DisplayModePropertiesKhr (new NativePointer (refpProperties, (IntPtr)(&((Interop.DisplayModePropertiesKhr*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public DisplayModeKhr CreateDisplayModeKHR (DisplayKhr display, DisplayModeCreateInfoKhr pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			DisplayModeKhr pMode;
			unsafe {
				pMode = new DisplayModeKhr ();

				fixed (UInt64* ptrpMode = &pMode.m) {
					result = Interop.NativeMethods.vkCreateDisplayModeKHR (this.m, display != null ? display.m : default(UInt64), pCreateInfo != null ? pCreateInfo.m : (Interop.DisplayModeCreateInfoKhr*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpMode);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pMode;
			}
		}

		public DisplayPlaneCapabilitiesKhr GetDisplayPlaneCapabilitiesKHR (DisplayModeKhr mode, UInt32 planeIndex)
		{
			Result result;
			DisplayPlaneCapabilitiesKhr pCapabilities;
			unsafe {
				pCapabilities = new DisplayPlaneCapabilitiesKhr ();
				result = Interop.NativeMethods.vkGetDisplayPlaneCapabilitiesKHR (this.m, mode != null ? mode.m : default(UInt64), planeIndex, &pCapabilities);
				if (result != Result.Success)
					throw new ResultException (result);

				return pCapabilities;
			}
		}

		public Bool32 GetSurfaceSupportKHR (UInt32 queueFamilyIndex, SurfaceKhr surface)
		{
			Result result;
			Bool32 pSupported;
			unsafe {
				pSupported = new Bool32 ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceSupportKHR (this.m, queueFamilyIndex, surface != null ? surface.m : default(UInt64), &pSupported);
				if (result != Result.Success)
					throw new ResultException (result);

				return pSupported;
			}
		}

		public SurfaceCapabilitiesKhr GetSurfaceCapabilitiesKHR (SurfaceKhr surface)
		{
			Result result;
			SurfaceCapabilitiesKhr pSurfaceCapabilities;
			unsafe {
				pSurfaceCapabilities = new SurfaceCapabilitiesKhr ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceCapabilitiesKHR (this.m, surface != null ? surface.m : default(UInt64), &pSurfaceCapabilities);
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurfaceCapabilities;
			}
		}

		public SurfaceFormatKhr[] GetSurfaceFormatsKHR (SurfaceKhr surface)
		{
			Result result;
			unsafe {
				UInt32 pSurfaceFormatCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceFormatsKHR (this.m, surface != null ? surface.m : default(UInt64), &pSurfaceFormatCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pSurfaceFormatCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (SurfaceFormatKhr));
				var refpSurfaceFormats = new NativeReference ((int)(size * pSurfaceFormatCount));
				var ptrpSurfaceFormats = refpSurfaceFormats.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceFormatsKHR (this.m, surface != null ? surface.m : default(UInt64), &pSurfaceFormatCount, (SurfaceFormatKhr*)ptrpSurfaceFormats);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pSurfaceFormatCount <= 0)
					return null;
				var arr = new SurfaceFormatKhr [pSurfaceFormatCount];
				for (int i = 0; i < pSurfaceFormatCount; i++) {
					arr [i] = (((SurfaceFormatKhr*)ptrpSurfaceFormats) [i]);
				}

				return arr;
			}
		}

		public PresentModeKhr[] GetSurfacePresentModesKHR (SurfaceKhr surface)
		{
			Result result;
			unsafe {
				UInt32 pPresentModeCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfacePresentModesKHR (this.m, surface != null ? surface.m : default(UInt64), &pPresentModeCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPresentModeCount <= 0)
					return null;

				int size = 4;
				var refpPresentModes = new NativeReference ((int)(size * pPresentModeCount));
				var ptrpPresentModes = refpPresentModes.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfacePresentModesKHR (this.m, surface != null ? surface.m : default(UInt64), &pPresentModeCount, (PresentModeKhr*)ptrpPresentModes);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPresentModeCount <= 0)
					return null;
				var arr = new PresentModeKhr [pPresentModeCount];
				for (int i = 0; i < pPresentModeCount; i++) {
					arr [i] = new PresentModeKhr ();
					arr [i] = ((PresentModeKhr*)ptrpPresentModes) [i];
				}

				return arr;
			}
		}

		public ExternalImageFormatPropertiesNv GetExternalImageFormatPropertiesNV (Format format, ImageType type, ImageTiling tiling, ImageUsageFlags usage, ImageCreateFlags flags = (ImageCreateFlags)0, ExternalMemoryHandleTypeFlagsNv externalHandleType = (ExternalMemoryHandleTypeFlagsNv)0)
		{
			Result result;
			ExternalImageFormatPropertiesNv pExternalImageFormatProperties;
			unsafe {
				pExternalImageFormatProperties = new ExternalImageFormatPropertiesNv ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceExternalImageFormatPropertiesNV (this.m, format, type, tiling, usage, flags, externalHandleType, &pExternalImageFormatProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				return pExternalImageFormatProperties;
			}
		}

		public void GetGeneratedCommandsPropertiesNVX (out DeviceGeneratedCommandsFeaturesNvx pFeatures, out DeviceGeneratedCommandsLimitsNvx pLimits)
		{
			unsafe {
				pFeatures = new DeviceGeneratedCommandsFeaturesNvx ();
				pLimits = new DeviceGeneratedCommandsLimitsNvx ();
				Interop.NativeMethods.vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX (this.m, pFeatures != null ? pFeatures.m : (Interop.DeviceGeneratedCommandsFeaturesNvx*)default(IntPtr), pLimits != null ? pLimits.m : (Interop.DeviceGeneratedCommandsLimitsNvx*)default(IntPtr));
			}
		}

		public PhysicalDeviceFeatures2 GetFeatures2 ()
		{
			PhysicalDeviceFeatures2 pFeatures;
			unsafe {
				pFeatures = new PhysicalDeviceFeatures2 ();
				Interop.NativeMethods.vkGetPhysicalDeviceFeatures2 (this.m, pFeatures != null ? pFeatures.m : (Interop.PhysicalDeviceFeatures2*)default(IntPtr));

				return pFeatures;
			}
		}

		[Obsolete ("GetFeatures2KHR is deprecated, please use GetFeatures2 instead.")]
		public PhysicalDeviceFeatures2 GetFeatures2KHR ()
		{
			PhysicalDeviceFeatures2 pFeatures;
			unsafe {
				pFeatures = new PhysicalDeviceFeatures2 ();
				Interop.NativeMethods.vkGetPhysicalDeviceFeatures2KHR (this.m, pFeatures != null ? pFeatures.m : (Interop.PhysicalDeviceFeatures2*)default(IntPtr));

				return pFeatures;
			}
		}

		public PhysicalDeviceProperties2 GetProperties2 ()
		{
			PhysicalDeviceProperties2 pProperties;
			unsafe {
				pProperties = new PhysicalDeviceProperties2 ();
				Interop.NativeMethods.vkGetPhysicalDeviceProperties2 (this.m, pProperties != null ? pProperties.m : (Interop.PhysicalDeviceProperties2*)default(IntPtr));

				return pProperties;
			}
		}

		[Obsolete ("GetProperties2KHR is deprecated, please use GetProperties2 instead.")]
		public PhysicalDeviceProperties2 GetProperties2KHR ()
		{
			PhysicalDeviceProperties2 pProperties;
			unsafe {
				pProperties = new PhysicalDeviceProperties2 ();
				Interop.NativeMethods.vkGetPhysicalDeviceProperties2KHR (this.m, pProperties != null ? pProperties.m : (Interop.PhysicalDeviceProperties2*)default(IntPtr));

				return pProperties;
			}
		}

		public FormatProperties2 GetFormatProperties2 (Format format)
		{
			FormatProperties2 pFormatProperties;
			unsafe {
				pFormatProperties = new FormatProperties2 ();
				Interop.NativeMethods.vkGetPhysicalDeviceFormatProperties2 (this.m, format, pFormatProperties != null ? pFormatProperties.m : (Interop.FormatProperties2*)default(IntPtr));

				return pFormatProperties;
			}
		}

		[Obsolete ("GetFormatProperties2KHR is deprecated, please use GetFormatProperties2 instead.")]
		public FormatProperties2 GetFormatProperties2KHR (Format format)
		{
			FormatProperties2 pFormatProperties;
			unsafe {
				pFormatProperties = new FormatProperties2 ();
				Interop.NativeMethods.vkGetPhysicalDeviceFormatProperties2KHR (this.m, format, pFormatProperties != null ? pFormatProperties.m : (Interop.FormatProperties2*)default(IntPtr));

				return pFormatProperties;
			}
		}

		public ImageFormatProperties2 GetImageFormatProperties2 (PhysicalDeviceImageFormatInfo2 pImageFormatInfo)
		{
			Result result;
			ImageFormatProperties2 pImageFormatProperties;
			unsafe {
				pImageFormatProperties = new ImageFormatProperties2 ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceImageFormatProperties2 (this.m, pImageFormatInfo != null ? pImageFormatInfo.m : (Interop.PhysicalDeviceImageFormatInfo2*)default(IntPtr), pImageFormatProperties != null ? pImageFormatProperties.m : (Interop.ImageFormatProperties2*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);

				return pImageFormatProperties;
			}
		}

		[Obsolete ("GetImageFormatProperties2KHR is deprecated, please use GetImageFormatProperties2 instead.")]
		public ImageFormatProperties2 GetImageFormatProperties2KHR (PhysicalDeviceImageFormatInfo2 pImageFormatInfo)
		{
			Result result;
			ImageFormatProperties2 pImageFormatProperties;
			unsafe {
				pImageFormatProperties = new ImageFormatProperties2 ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceImageFormatProperties2KHR (this.m, pImageFormatInfo != null ? pImageFormatInfo.m : (Interop.PhysicalDeviceImageFormatInfo2*)default(IntPtr), pImageFormatProperties != null ? pImageFormatProperties.m : (Interop.ImageFormatProperties2*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);

				return pImageFormatProperties;
			}
		}

		public QueueFamilyProperties2[] GetQueueFamilyProperties2 ()
		{
			unsafe {
				UInt32 pQueueFamilyPropertyCount;
				Interop.NativeMethods.vkGetPhysicalDeviceQueueFamilyProperties2 (this.m, &pQueueFamilyPropertyCount, null);
				if (pQueueFamilyPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.QueueFamilyProperties2));
				var refpQueueFamilyProperties = new NativeReference ((int)(size * pQueueFamilyPropertyCount));
				var ptrpQueueFamilyProperties = refpQueueFamilyProperties.Handle;
				Interop.NativeMethods.vkGetPhysicalDeviceQueueFamilyProperties2 (this.m, &pQueueFamilyPropertyCount, (Interop.QueueFamilyProperties2*)ptrpQueueFamilyProperties);

				if (pQueueFamilyPropertyCount <= 0)
					return null;
				var arr = new QueueFamilyProperties2 [pQueueFamilyPropertyCount];
				for (int i = 0; i < pQueueFamilyPropertyCount; i++) {
					arr [i] = new QueueFamilyProperties2 (new NativePointer (refpQueueFamilyProperties, (IntPtr)(&((Interop.QueueFamilyProperties2*)ptrpQueueFamilyProperties) [i])));
				}

				return arr;
			}
		}

		[Obsolete ("GetQueueFamilyProperties2KHR is deprecated, please use GetQueueFamilyProperties2 instead.")]
		public QueueFamilyProperties2[] GetQueueFamilyProperties2KHR ()
		{
			unsafe {
				UInt32 pQueueFamilyPropertyCount;
				Interop.NativeMethods.vkGetPhysicalDeviceQueueFamilyProperties2KHR (this.m, &pQueueFamilyPropertyCount, null);
				if (pQueueFamilyPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.QueueFamilyProperties2));
				var refpQueueFamilyProperties = new NativeReference ((int)(size * pQueueFamilyPropertyCount));
				var ptrpQueueFamilyProperties = refpQueueFamilyProperties.Handle;
				Interop.NativeMethods.vkGetPhysicalDeviceQueueFamilyProperties2KHR (this.m, &pQueueFamilyPropertyCount, (Interop.QueueFamilyProperties2*)ptrpQueueFamilyProperties);

				if (pQueueFamilyPropertyCount <= 0)
					return null;
				var arr = new QueueFamilyProperties2 [pQueueFamilyPropertyCount];
				for (int i = 0; i < pQueueFamilyPropertyCount; i++) {
					arr [i] = new QueueFamilyProperties2 (new NativePointer (refpQueueFamilyProperties, (IntPtr)(&((Interop.QueueFamilyProperties2*)ptrpQueueFamilyProperties) [i])));
				}

				return arr;
			}
		}

		public PhysicalDeviceMemoryProperties2 GetMemoryProperties2 ()
		{
			PhysicalDeviceMemoryProperties2 pMemoryProperties;
			unsafe {
				pMemoryProperties = new PhysicalDeviceMemoryProperties2 ();
				Interop.NativeMethods.vkGetPhysicalDeviceMemoryProperties2 (this.m, pMemoryProperties != null ? pMemoryProperties.m : (Interop.PhysicalDeviceMemoryProperties2*)default(IntPtr));

				return pMemoryProperties;
			}
		}

		[Obsolete ("GetMemoryProperties2KHR is deprecated, please use GetMemoryProperties2 instead.")]
		public PhysicalDeviceMemoryProperties2 GetMemoryProperties2KHR ()
		{
			PhysicalDeviceMemoryProperties2 pMemoryProperties;
			unsafe {
				pMemoryProperties = new PhysicalDeviceMemoryProperties2 ();
				Interop.NativeMethods.vkGetPhysicalDeviceMemoryProperties2KHR (this.m, pMemoryProperties != null ? pMemoryProperties.m : (Interop.PhysicalDeviceMemoryProperties2*)default(IntPtr));

				return pMemoryProperties;
			}
		}

		public SparseImageFormatProperties2[] GetSparseImageFormatProperties2 (PhysicalDeviceSparseImageFormatInfo2 pFormatInfo)
		{
			unsafe {
				UInt32 pPropertyCount;
				Interop.NativeMethods.vkGetPhysicalDeviceSparseImageFormatProperties2 (this.m, pFormatInfo != null ? pFormatInfo.m : (Interop.PhysicalDeviceSparseImageFormatInfo2*)default(IntPtr), &pPropertyCount, null);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.SparseImageFormatProperties2));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				Interop.NativeMethods.vkGetPhysicalDeviceSparseImageFormatProperties2 (this.m, pFormatInfo != null ? pFormatInfo.m : (Interop.PhysicalDeviceSparseImageFormatInfo2*)default(IntPtr), &pPropertyCount, (Interop.SparseImageFormatProperties2*)ptrpProperties);

				if (pPropertyCount <= 0)
					return null;
				var arr = new SparseImageFormatProperties2 [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new SparseImageFormatProperties2 (new NativePointer (refpProperties, (IntPtr)(&((Interop.SparseImageFormatProperties2*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		[Obsolete ("GetSparseImageFormatProperties2KHR is deprecated, please use GetSparseImageFormatProperties2 instead.")]
		public SparseImageFormatProperties2[] GetSparseImageFormatProperties2KHR (PhysicalDeviceSparseImageFormatInfo2 pFormatInfo)
		{
			unsafe {
				UInt32 pPropertyCount;
				Interop.NativeMethods.vkGetPhysicalDeviceSparseImageFormatProperties2KHR (this.m, pFormatInfo != null ? pFormatInfo.m : (Interop.PhysicalDeviceSparseImageFormatInfo2*)default(IntPtr), &pPropertyCount, null);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.SparseImageFormatProperties2));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				Interop.NativeMethods.vkGetPhysicalDeviceSparseImageFormatProperties2KHR (this.m, pFormatInfo != null ? pFormatInfo.m : (Interop.PhysicalDeviceSparseImageFormatInfo2*)default(IntPtr), &pPropertyCount, (Interop.SparseImageFormatProperties2*)ptrpProperties);

				if (pPropertyCount <= 0)
					return null;
				var arr = new SparseImageFormatProperties2 [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new SparseImageFormatProperties2 (new NativePointer (refpProperties, (IntPtr)(&((Interop.SparseImageFormatProperties2*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public ExternalBufferProperties GetExternalBufferProperties (PhysicalDeviceExternalBufferInfo pExternalBufferInfo)
		{
			ExternalBufferProperties pExternalBufferProperties;
			unsafe {
				pExternalBufferProperties = new ExternalBufferProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceExternalBufferProperties (this.m, pExternalBufferInfo != null ? pExternalBufferInfo.m : (Interop.PhysicalDeviceExternalBufferInfo*)default(IntPtr), pExternalBufferProperties != null ? pExternalBufferProperties.m : (Interop.ExternalBufferProperties*)default(IntPtr));

				return pExternalBufferProperties;
			}
		}

		[Obsolete ("GetExternalBufferPropertiesKHR is deprecated, please use GetExternalBufferProperties instead.")]
		public ExternalBufferProperties GetExternalBufferPropertiesKHR (PhysicalDeviceExternalBufferInfo pExternalBufferInfo)
		{
			ExternalBufferProperties pExternalBufferProperties;
			unsafe {
				pExternalBufferProperties = new ExternalBufferProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceExternalBufferPropertiesKHR (this.m, pExternalBufferInfo != null ? pExternalBufferInfo.m : (Interop.PhysicalDeviceExternalBufferInfo*)default(IntPtr), pExternalBufferProperties != null ? pExternalBufferProperties.m : (Interop.ExternalBufferProperties*)default(IntPtr));

				return pExternalBufferProperties;
			}
		}

		public ExternalSemaphoreProperties GetExternalSemaphoreProperties (PhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo)
		{
			ExternalSemaphoreProperties pExternalSemaphoreProperties;
			unsafe {
				pExternalSemaphoreProperties = new ExternalSemaphoreProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceExternalSemaphoreProperties (this.m, pExternalSemaphoreInfo != null ? pExternalSemaphoreInfo.m : (Interop.PhysicalDeviceExternalSemaphoreInfo*)default(IntPtr), pExternalSemaphoreProperties != null ? pExternalSemaphoreProperties.m : (Interop.ExternalSemaphoreProperties*)default(IntPtr));

				return pExternalSemaphoreProperties;
			}
		}

		[Obsolete ("GetExternalSemaphorePropertiesKHR is deprecated, please use GetExternalSemaphoreProperties instead.")]
		public ExternalSemaphoreProperties GetExternalSemaphorePropertiesKHR (PhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo)
		{
			ExternalSemaphoreProperties pExternalSemaphoreProperties;
			unsafe {
				pExternalSemaphoreProperties = new ExternalSemaphoreProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR (this.m, pExternalSemaphoreInfo != null ? pExternalSemaphoreInfo.m : (Interop.PhysicalDeviceExternalSemaphoreInfo*)default(IntPtr), pExternalSemaphoreProperties != null ? pExternalSemaphoreProperties.m : (Interop.ExternalSemaphoreProperties*)default(IntPtr));

				return pExternalSemaphoreProperties;
			}
		}

		public ExternalFenceProperties GetExternalFenceProperties (PhysicalDeviceExternalFenceInfo pExternalFenceInfo)
		{
			ExternalFenceProperties pExternalFenceProperties;
			unsafe {
				pExternalFenceProperties = new ExternalFenceProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceExternalFenceProperties (this.m, pExternalFenceInfo != null ? pExternalFenceInfo.m : (Interop.PhysicalDeviceExternalFenceInfo*)default(IntPtr), pExternalFenceProperties != null ? pExternalFenceProperties.m : (Interop.ExternalFenceProperties*)default(IntPtr));

				return pExternalFenceProperties;
			}
		}

		[Obsolete ("GetExternalFencePropertiesKHR is deprecated, please use GetExternalFenceProperties instead.")]
		public ExternalFenceProperties GetExternalFencePropertiesKHR (PhysicalDeviceExternalFenceInfo pExternalFenceInfo)
		{
			ExternalFenceProperties pExternalFenceProperties;
			unsafe {
				pExternalFenceProperties = new ExternalFenceProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceExternalFencePropertiesKHR (this.m, pExternalFenceInfo != null ? pExternalFenceInfo.m : (Interop.PhysicalDeviceExternalFenceInfo*)default(IntPtr), pExternalFenceProperties != null ? pExternalFenceProperties.m : (Interop.ExternalFenceProperties*)default(IntPtr));

				return pExternalFenceProperties;
			}
		}

		public void ReleaseDisplayEXT (DisplayKhr display)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkReleaseDisplayEXT (this.m, display != null ? display.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public IntPtr AcquireXlibDisplayEXT (DisplayKhr display)
		{
			Result result;
			IntPtr dpy;
			unsafe {
				dpy = new IntPtr ();
				result = Interop.NativeMethods.vkAcquireXlibDisplayEXT (this.m, &dpy, display != null ? display.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);

				return dpy;
			}
		}

		public void GetRandROutputDisplayEXT (out IntPtr dpy, UInt32 rrOutput, out DisplayKhr pDisplay)
		{
			Result result;
			unsafe {
				pDisplay = new DisplayKhr ();

				fixed (IntPtr* ptrdpy = &dpy) {
					fixed (UInt64* ptrpDisplay = &pDisplay.m) {
						result = Interop.NativeMethods.vkGetRandROutputDisplayEXT (this.m, ptrdpy, rrOutput, ptrpDisplay);
					}
				}
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public SurfaceCapabilities2Ext GetSurfaceCapabilities2EXT (SurfaceKhr surface)
		{
			Result result;
			SurfaceCapabilities2Ext pSurfaceCapabilities;
			unsafe {
				pSurfaceCapabilities = new SurfaceCapabilities2Ext ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceCapabilities2EXT (this.m, surface != null ? surface.m : default(UInt64), pSurfaceCapabilities != null ? pSurfaceCapabilities.m : (Interop.SurfaceCapabilities2Ext*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurfaceCapabilities;
			}
		}

		public Rect2D[] GetPresentRectanglesKHR (SurfaceKhr surface)
		{
			Result result;
			unsafe {
				UInt32 pRectCount;
				result = Interop.NativeMethods.vkGetPhysicalDevicePresentRectanglesKHR (this.m, surface != null ? surface.m : default(UInt64), &pRectCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pRectCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Rect2D));
				var refpRects = new NativeReference ((int)(size * pRectCount));
				var ptrpRects = refpRects.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDevicePresentRectanglesKHR (this.m, surface != null ? surface.m : default(UInt64), &pRectCount, (Rect2D*)ptrpRects);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pRectCount <= 0)
					return null;
				var arr = new Rect2D [pRectCount];
				for (int i = 0; i < pRectCount; i++) {
					arr [i] = (((Rect2D*)ptrpRects) [i]);
				}

				return arr;
			}
		}

		public MultisamplePropertiesExt GetMultisamplePropertiesEXT (SampleCountFlags samples)
		{
			MultisamplePropertiesExt pMultisampleProperties;
			unsafe {
				pMultisampleProperties = new MultisamplePropertiesExt ();
				Interop.NativeMethods.vkGetPhysicalDeviceMultisamplePropertiesEXT (this.m, samples, pMultisampleProperties != null ? pMultisampleProperties.m : (Interop.MultisamplePropertiesExt*)default(IntPtr));

				return pMultisampleProperties;
			}
		}

		public SurfaceCapabilities2Khr GetSurfaceCapabilities2KHR (PhysicalDeviceSurfaceInfo2Khr pSurfaceInfo)
		{
			Result result;
			SurfaceCapabilities2Khr pSurfaceCapabilities;
			unsafe {
				pSurfaceCapabilities = new SurfaceCapabilities2Khr ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceCapabilities2KHR (this.m, pSurfaceInfo != null ? pSurfaceInfo.m : (Interop.PhysicalDeviceSurfaceInfo2Khr*)default(IntPtr), pSurfaceCapabilities != null ? pSurfaceCapabilities.m : (Interop.SurfaceCapabilities2Khr*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurfaceCapabilities;
			}
		}

		public SurfaceFormat2Khr[] GetSurfaceFormats2KHR (PhysicalDeviceSurfaceInfo2Khr pSurfaceInfo)
		{
			Result result;
			unsafe {
				UInt32 pSurfaceFormatCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceFormats2KHR (this.m, pSurfaceInfo != null ? pSurfaceInfo.m : (Interop.PhysicalDeviceSurfaceInfo2Khr*)default(IntPtr), &pSurfaceFormatCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pSurfaceFormatCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.SurfaceFormat2Khr));
				var refpSurfaceFormats = new NativeReference ((int)(size * pSurfaceFormatCount));
				var ptrpSurfaceFormats = refpSurfaceFormats.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceFormats2KHR (this.m, pSurfaceInfo != null ? pSurfaceInfo.m : (Interop.PhysicalDeviceSurfaceInfo2Khr*)default(IntPtr), &pSurfaceFormatCount, (Interop.SurfaceFormat2Khr*)ptrpSurfaceFormats);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pSurfaceFormatCount <= 0)
					return null;
				var arr = new SurfaceFormat2Khr [pSurfaceFormatCount];
				for (int i = 0; i < pSurfaceFormatCount; i++) {
					arr [i] = new SurfaceFormat2Khr (new NativePointer (refpSurfaceFormats, (IntPtr)(&((Interop.SurfaceFormat2Khr*)ptrpSurfaceFormats) [i])));
				}

				return arr;
			}
		}

		public DisplayProperties2Khr[] GetDisplayProperties2KHR ()
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceDisplayProperties2KHR (this.m, &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.DisplayProperties2Khr));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceDisplayProperties2KHR (this.m, &pPropertyCount, (Interop.DisplayProperties2Khr*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPropertyCount <= 0)
					return null;
				var arr = new DisplayProperties2Khr [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new DisplayProperties2Khr (new NativePointer (refpProperties, (IntPtr)(&((Interop.DisplayProperties2Khr*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public DisplayPlaneProperties2Khr[] GetDisplayPlaneProperties2KHR ()
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceDisplayPlaneProperties2KHR (this.m, &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.DisplayPlaneProperties2Khr));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceDisplayPlaneProperties2KHR (this.m, &pPropertyCount, (Interop.DisplayPlaneProperties2Khr*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPropertyCount <= 0)
					return null;
				var arr = new DisplayPlaneProperties2Khr [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new DisplayPlaneProperties2Khr (new NativePointer (refpProperties, (IntPtr)(&((Interop.DisplayPlaneProperties2Khr*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public DisplayModeProperties2Khr[] GetDisplayModeProperties2KHR (DisplayKhr display)
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkGetDisplayModeProperties2KHR (this.m, display != null ? display.m : default(UInt64), &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.DisplayModeProperties2Khr));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				result = Interop.NativeMethods.vkGetDisplayModeProperties2KHR (this.m, display != null ? display.m : default(UInt64), &pPropertyCount, (Interop.DisplayModeProperties2Khr*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPropertyCount <= 0)
					return null;
				var arr = new DisplayModeProperties2Khr [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new DisplayModeProperties2Khr (new NativePointer (refpProperties, (IntPtr)(&((Interop.DisplayModeProperties2Khr*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public DisplayPlaneCapabilities2Khr GetDisplayPlaneCapabilities2KHR (DisplayPlaneInfo2Khr pDisplayPlaneInfo)
		{
			Result result;
			DisplayPlaneCapabilities2Khr pCapabilities;
			unsafe {
				pCapabilities = new DisplayPlaneCapabilities2Khr ();
				result = Interop.NativeMethods.vkGetDisplayPlaneCapabilities2KHR (this.m, pDisplayPlaneInfo != null ? pDisplayPlaneInfo.m : (Interop.DisplayPlaneInfo2Khr*)default(IntPtr), pCapabilities != null ? pCapabilities.m : (Interop.DisplayPlaneCapabilities2Khr*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);

				return pCapabilities;
			}
		}

		public TimeDomainExt[] GetCalibrateableTimeDomainsEXT ()
		{
			Result result;
			unsafe {
				UInt32 pTimeDomainCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT (this.m, &pTimeDomainCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pTimeDomainCount <= 0)
					return null;

				int size = 4;
				var refpTimeDomains = new NativeReference ((int)(size * pTimeDomainCount));
				var ptrpTimeDomains = refpTimeDomains.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT (this.m, &pTimeDomainCount, (TimeDomainExt*)ptrpTimeDomains);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pTimeDomainCount <= 0)
					return null;
				var arr = new TimeDomainExt [pTimeDomainCount];
				for (int i = 0; i < pTimeDomainCount; i++) {
					arr [i] = new TimeDomainExt ();
					arr [i] = ((TimeDomainExt*)ptrpTimeDomains) [i];
				}

				return arr;
			}
		}

		public CooperativeMatrixPropertiesNv[] GetCooperativeMatrixPropertiesNV ()
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV (this.m, &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.CooperativeMatrixPropertiesNv));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV (this.m, &pPropertyCount, (Interop.CooperativeMatrixPropertiesNv*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPropertyCount <= 0)
					return null;
				var arr = new CooperativeMatrixPropertiesNv [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new CooperativeMatrixPropertiesNv (new NativePointer (refpProperties, (IntPtr)(&((Interop.CooperativeMatrixPropertiesNv*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public PresentModeKhr[] GetSurfacePresentModes2EXT (PhysicalDeviceSurfaceInfo2Khr pSurfaceInfo)
		{
			Result result;
			unsafe {
				UInt32 pPresentModeCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfacePresentModes2EXT (this.m, pSurfaceInfo != null ? pSurfaceInfo.m : (Interop.PhysicalDeviceSurfaceInfo2Khr*)default(IntPtr), &pPresentModeCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPresentModeCount <= 0)
					return null;

				int size = 4;
				var refpPresentModes = new NativeReference ((int)(size * pPresentModeCount));
				var ptrpPresentModes = refpPresentModes.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfacePresentModes2EXT (this.m, pSurfaceInfo != null ? pSurfaceInfo.m : (Interop.PhysicalDeviceSurfaceInfo2Khr*)default(IntPtr), &pPresentModeCount, (PresentModeKhr*)ptrpPresentModes);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPresentModeCount <= 0)
					return null;
				var arr = new PresentModeKhr [pPresentModeCount];
				for (int i = 0; i < pPresentModeCount; i++) {
					arr [i] = new PresentModeKhr ();
					arr [i] = ((PresentModeKhr*)ptrpPresentModes) [i];
				}

				return arr;
			}
		}

		public FramebufferMixedSamplesCombinationNv[] GetSupportedFramebufferMixedSamplesCombinationsNV ()
		{
			Result result;
			unsafe {
				UInt32 pCombinationCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV (this.m, &pCombinationCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pCombinationCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.FramebufferMixedSamplesCombinationNv));
				var refpCombinations = new NativeReference ((int)(size * pCombinationCount));
				var ptrpCombinations = refpCombinations.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV (this.m, &pCombinationCount, (Interop.FramebufferMixedSamplesCombinationNv*)ptrpCombinations);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pCombinationCount <= 0)
					return null;
				var arr = new FramebufferMixedSamplesCombinationNv [pCombinationCount];
				for (int i = 0; i < pCombinationCount; i++) {
					arr [i] = new FramebufferMixedSamplesCombinationNv (new NativePointer (refpCombinations, (IntPtr)(&((Interop.FramebufferMixedSamplesCombinationNv*)ptrpCombinations) [i])));
				}

				return arr;
			}
		}
	}

	public partial class Device : IMarshalling
	{
		internal Device() {}

		internal IntPtr m;

		IntPtr IMarshalling.Handle {
			get {
				return m;
			}
		}

		public IntPtr GetProcAddr (string pName)
		{
			unsafe {
				return Interop.NativeMethods.vkGetDeviceProcAddr (this.m, pName);
			}
		}

		public void Destroy (AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyDevice (this.m, pAllocator != null ? pAllocator.m : null);
			}
		}

		public Queue GetQueue (UInt32 queueFamilyIndex, UInt32 queueIndex)
		{
			Queue pQueue;
			unsafe {
				pQueue = new Queue ();

				fixed (IntPtr* ptrpQueue = &pQueue.m) {
					Interop.NativeMethods.vkGetDeviceQueue (this.m, queueFamilyIndex, queueIndex, ptrpQueue);
				}

				return pQueue;
			}
		}

		public void WaitIdle ()
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkDeviceWaitIdle (this.m);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public DeviceMemory AllocateMemory (MemoryAllocateInfo pAllocateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			DeviceMemory pMemory;
			unsafe {
				pMemory = new DeviceMemory ();

				fixed (UInt64* ptrpMemory = &pMemory.m) {
					result = Interop.NativeMethods.vkAllocateMemory (this.m, pAllocateInfo != null ? pAllocateInfo.m : (Interop.MemoryAllocateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpMemory);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pMemory;
			}
		}

		public void FreeMemory (DeviceMemory memory = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkFreeMemory (this.m, memory != null ? memory.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public IntPtr MapMemory (DeviceMemory memory, DeviceSize offset, DeviceSize size, UInt32 flags = 0)
		{
			Result result;
			IntPtr ppData;
			unsafe {
				ppData = new IntPtr ();
				result = Interop.NativeMethods.vkMapMemory (this.m, memory != null ? memory.m : default(UInt64), offset, size, flags, &ppData);
				if (result != Result.Success)
					throw new ResultException (result);

				return ppData;
			}
		}

		public void UnmapMemory (DeviceMemory memory)
		{
			unsafe {
				Interop.NativeMethods.vkUnmapMemory (this.m, memory != null ? memory.m : default(UInt64));
			}
		}

		public void FlushMappedMemoryRanges (MappedMemoryRange[] pMemoryRanges)
		{
			Result result;
			unsafe {
				var arraypMemoryRanges = pMemoryRanges == null ? IntPtr.Zero : Marshal.AllocHGlobal (pMemoryRanges.Length*sizeof (Interop.MappedMemoryRange));
				var lenpMemoryRanges = pMemoryRanges == null ? 0 : pMemoryRanges.Length;
				if (pMemoryRanges != null)
					for (int i = 0; i < pMemoryRanges.Length; i++)
						((Interop.MappedMemoryRange*)arraypMemoryRanges) [i] = *(pMemoryRanges [i].m);
				result = Interop.NativeMethods.vkFlushMappedMemoryRanges (this.m, (uint)lenpMemoryRanges, (Interop.MappedMemoryRange*)arraypMemoryRanges);
				Marshal.FreeHGlobal (arraypMemoryRanges);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void FlushMappedMemoryRange (MappedMemoryRange pMemoryRange)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkFlushMappedMemoryRanges (this.m, (UInt32)(pMemoryRange != null ? 1 : 0), pMemoryRange != null ? pMemoryRange.m : (Interop.MappedMemoryRange*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void InvalidateMappedMemoryRanges (MappedMemoryRange[] pMemoryRanges)
		{
			Result result;
			unsafe {
				var arraypMemoryRanges = pMemoryRanges == null ? IntPtr.Zero : Marshal.AllocHGlobal (pMemoryRanges.Length*sizeof (Interop.MappedMemoryRange));
				var lenpMemoryRanges = pMemoryRanges == null ? 0 : pMemoryRanges.Length;
				if (pMemoryRanges != null)
					for (int i = 0; i < pMemoryRanges.Length; i++)
						((Interop.MappedMemoryRange*)arraypMemoryRanges) [i] = *(pMemoryRanges [i].m);
				result = Interop.NativeMethods.vkInvalidateMappedMemoryRanges (this.m, (uint)lenpMemoryRanges, (Interop.MappedMemoryRange*)arraypMemoryRanges);
				Marshal.FreeHGlobal (arraypMemoryRanges);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void InvalidateMappedMemoryRange (MappedMemoryRange pMemoryRange)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkInvalidateMappedMemoryRanges (this.m, (UInt32)(pMemoryRange != null ? 1 : 0), pMemoryRange != null ? pMemoryRange.m : (Interop.MappedMemoryRange*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public DeviceSize GetMemoryCommitment (DeviceMemory memory)
		{
			DeviceSize pCommittedMemoryInBytes;
			unsafe {
				pCommittedMemoryInBytes = new DeviceSize ();
				Interop.NativeMethods.vkGetDeviceMemoryCommitment (this.m, memory != null ? memory.m : default(UInt64), &pCommittedMemoryInBytes);

				return pCommittedMemoryInBytes;
			}
		}

		public MemoryRequirements GetBufferMemoryRequirements (Buffer buffer)
		{
			MemoryRequirements pMemoryRequirements;
			unsafe {
				pMemoryRequirements = new MemoryRequirements ();
				Interop.NativeMethods.vkGetBufferMemoryRequirements (this.m, buffer != null ? buffer.m : default(UInt64), &pMemoryRequirements);

				return pMemoryRequirements;
			}
		}

		public void BindBufferMemory (Buffer buffer, DeviceMemory memory, DeviceSize memoryOffset)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkBindBufferMemory (this.m, buffer != null ? buffer.m : default(UInt64), memory != null ? memory.m : default(UInt64), memoryOffset);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public MemoryRequirements GetImageMemoryRequirements (Image image)
		{
			MemoryRequirements pMemoryRequirements;
			unsafe {
				pMemoryRequirements = new MemoryRequirements ();
				Interop.NativeMethods.vkGetImageMemoryRequirements (this.m, image != null ? image.m : default(UInt64), &pMemoryRequirements);

				return pMemoryRequirements;
			}
		}

		public void BindImageMemory (Image image, DeviceMemory memory, DeviceSize memoryOffset)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkBindImageMemory (this.m, image != null ? image.m : default(UInt64), memory != null ? memory.m : default(UInt64), memoryOffset);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public SparseImageMemoryRequirements[] GetImageSparseMemoryRequirements (Image image)
		{
			unsafe {
				UInt32 pSparseMemoryRequirementCount;
				Interop.NativeMethods.vkGetImageSparseMemoryRequirements (this.m, image != null ? image.m : default(UInt64), &pSparseMemoryRequirementCount, null);
				if (pSparseMemoryRequirementCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (SparseImageMemoryRequirements));
				var refpSparseMemoryRequirements = new NativeReference ((int)(size * pSparseMemoryRequirementCount));
				var ptrpSparseMemoryRequirements = refpSparseMemoryRequirements.Handle;
				Interop.NativeMethods.vkGetImageSparseMemoryRequirements (this.m, image != null ? image.m : default(UInt64), &pSparseMemoryRequirementCount, (SparseImageMemoryRequirements*)ptrpSparseMemoryRequirements);

				if (pSparseMemoryRequirementCount <= 0)
					return null;
				var arr = new SparseImageMemoryRequirements [pSparseMemoryRequirementCount];
				for (int i = 0; i < pSparseMemoryRequirementCount; i++) {
					arr [i] = (((SparseImageMemoryRequirements*)ptrpSparseMemoryRequirements) [i]);
				}

				return arr;
			}
		}

		public Fence CreateFence (FenceCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			Fence pFence;
			unsafe {
				pFence = new Fence ();

				fixed (UInt64* ptrpFence = &pFence.m) {
					result = Interop.NativeMethods.vkCreateFence (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.FenceCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpFence);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pFence;
			}
		}

		public void DestroyFence (Fence fence = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyFence (this.m, fence != null ? fence.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public void ResetFences (Fence[] pFences)
		{
			Result result;
			unsafe {
				var arraypFences = pFences == null ? IntPtr.Zero : Marshal.AllocHGlobal (pFences.Length*sizeof (UInt64));
				var lenpFences = pFences == null ? 0 : pFences.Length;
				if (pFences != null)
					for (int i = 0; i < pFences.Length; i++)
						((UInt64*)arraypFences) [i] = (pFences [i].m);
				result = Interop.NativeMethods.vkResetFences (this.m, (uint)lenpFences, (UInt64*)arraypFences);
				Marshal.FreeHGlobal (arraypFences);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void ResetFence (Fence pFence)
		{
			Result result;
			unsafe {
				fixed (UInt64* ptrpFence = &pFence.m) {
					result = Interop.NativeMethods.vkResetFences (this.m, (UInt32)(pFence != null ? 1 : 0), ptrpFence);
				}
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void GetFenceStatus (Fence fence)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkGetFenceStatus (this.m, fence != null ? fence.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void WaitForFences (Fence[] pFences, Bool32 waitAll, UInt64 timeout)
		{
			Result result;
			unsafe {
				var arraypFences = pFences == null ? IntPtr.Zero : Marshal.AllocHGlobal (pFences.Length*sizeof (UInt64));
				var lenpFences = pFences == null ? 0 : pFences.Length;
				if (pFences != null)
					for (int i = 0; i < pFences.Length; i++)
						((UInt64*)arraypFences) [i] = (pFences [i].m);
				result = Interop.NativeMethods.vkWaitForFences (this.m, (uint)lenpFences, (UInt64*)arraypFences, waitAll, timeout);
				Marshal.FreeHGlobal (arraypFences);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void WaitForFence (Fence pFence, Bool32 waitAll, UInt64 timeout)
		{
			Result result;
			unsafe {
				fixed (UInt64* ptrpFence = &pFence.m) {
					result = Interop.NativeMethods.vkWaitForFences (this.m, (UInt32)(pFence != null ? 1 : 0), ptrpFence, waitAll, timeout);
				}
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public Semaphore CreateSemaphore (SemaphoreCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			Semaphore pSemaphore;
			unsafe {
				pSemaphore = new Semaphore ();

				fixed (UInt64* ptrpSemaphore = &pSemaphore.m) {
					result = Interop.NativeMethods.vkCreateSemaphore (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.SemaphoreCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpSemaphore);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSemaphore;
			}
		}

		public void DestroySemaphore (Semaphore semaphore = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroySemaphore (this.m, semaphore != null ? semaphore.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public Event CreateEvent (EventCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			Event pEvent;
			unsafe {
				pEvent = new Event ();

				fixed (UInt64* ptrpEvent = &pEvent.m) {
					result = Interop.NativeMethods.vkCreateEvent (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.EventCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpEvent);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pEvent;
			}
		}

		public void DestroyEvent (Event @event = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyEvent (this.m, @event != null ? @event.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public void GetEventStatus (Event @event)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkGetEventStatus (this.m, @event != null ? @event.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void SetEvent (Event @event)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkSetEvent (this.m, @event != null ? @event.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void ResetEvent (Event @event)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkResetEvent (this.m, @event != null ? @event.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public QueryPool CreateQueryPool (QueryPoolCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			QueryPool pQueryPool;
			unsafe {
				pQueryPool = new QueryPool ();

				fixed (UInt64* ptrpQueryPool = &pQueryPool.m) {
					result = Interop.NativeMethods.vkCreateQueryPool (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.QueryPoolCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpQueryPool);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pQueryPool;
			}
		}

		public void DestroyQueryPool (QueryPool queryPool = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyQueryPool (this.m, queryPool != null ? queryPool.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public IntPtr GetQueryPoolResults (QueryPool queryPool, UInt32 firstQuery, UInt32 queryCount, UIntPtr dataSize, DeviceSize stride, QueryResultFlags flags = (QueryResultFlags)0)
		{
			Result result;
			IntPtr pData;
			unsafe {
				pData = new IntPtr ();
				result = Interop.NativeMethods.vkGetQueryPoolResults (this.m, queryPool != null ? queryPool.m : default(UInt64), firstQuery, queryCount, dataSize, pData, stride, flags);
				if (result != Result.Success)
					throw new ResultException (result);

				return pData;
			}
		}

		public void ResetQueryPoolEXT (QueryPool queryPool, UInt32 firstQuery, UInt32 queryCount)
		{
			unsafe {
				Interop.NativeMethods.vkResetQueryPoolEXT (this.m, queryPool != null ? queryPool.m : default(UInt64), firstQuery, queryCount);
			}
		}

		public Buffer CreateBuffer (BufferCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			Buffer pBuffer;
			unsafe {
				pBuffer = new Buffer ();

				fixed (UInt64* ptrpBuffer = &pBuffer.m) {
					result = Interop.NativeMethods.vkCreateBuffer (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.BufferCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpBuffer);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pBuffer;
			}
		}

		public void DestroyBuffer (Buffer buffer = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyBuffer (this.m, buffer != null ? buffer.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public BufferView CreateBufferView (BufferViewCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			BufferView pView;
			unsafe {
				pView = new BufferView ();

				fixed (UInt64* ptrpView = &pView.m) {
					result = Interop.NativeMethods.vkCreateBufferView (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.BufferViewCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpView);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pView;
			}
		}

		public void DestroyBufferView (BufferView bufferView = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyBufferView (this.m, bufferView != null ? bufferView.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public Image CreateImage (ImageCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			Image pImage;
			unsafe {
				pImage = new Image ();

				fixed (UInt64* ptrpImage = &pImage.m) {
					result = Interop.NativeMethods.vkCreateImage (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.ImageCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpImage);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pImage;
			}
		}

		public void DestroyImage (Image image = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyImage (this.m, image != null ? image.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public SubresourceLayout GetImageSubresourceLayout (Image image, ImageSubresource pSubresource)
		{
			SubresourceLayout pLayout;
			unsafe {
				pLayout = new SubresourceLayout ();
				Interop.NativeMethods.vkGetImageSubresourceLayout (this.m, image != null ? image.m : default(UInt64), &pSubresource, &pLayout);

				return pLayout;
			}
		}

		public ImageView CreateImageView (ImageViewCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			ImageView pView;
			unsafe {
				pView = new ImageView ();

				fixed (UInt64* ptrpView = &pView.m) {
					result = Interop.NativeMethods.vkCreateImageView (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.ImageViewCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpView);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pView;
			}
		}

		public void DestroyImageView (ImageView imageView = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyImageView (this.m, imageView != null ? imageView.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public ShaderModule CreateShaderModule (ShaderModuleCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			ShaderModule pShaderModule;
			unsafe {
				pShaderModule = new ShaderModule ();

				fixed (UInt64* ptrpShaderModule = &pShaderModule.m) {
					result = Interop.NativeMethods.vkCreateShaderModule (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.ShaderModuleCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpShaderModule);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pShaderModule;
			}
		}

		public void DestroyShaderModule (ShaderModule shaderModule = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyShaderModule (this.m, shaderModule != null ? shaderModule.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public PipelineCache CreatePipelineCache (PipelineCacheCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			PipelineCache pPipelineCache;
			unsafe {
				pPipelineCache = new PipelineCache ();

				fixed (UInt64* ptrpPipelineCache = &pPipelineCache.m) {
					result = Interop.NativeMethods.vkCreatePipelineCache (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.PipelineCacheCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpPipelineCache);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pPipelineCache;
			}
		}

		public void DestroyPipelineCache (PipelineCache pipelineCache = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyPipelineCache (this.m, pipelineCache != null ? pipelineCache.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public void GetPipelineCacheData (PipelineCache pipelineCache, out UIntPtr pDataSize, IntPtr pData = default(IntPtr))
		{
			Result result;
			unsafe {
				fixed (UIntPtr* ptrpDataSize = &pDataSize) {
					result = Interop.NativeMethods.vkGetPipelineCacheData (this.m, pipelineCache != null ? pipelineCache.m : default(UInt64), ptrpDataSize, pData);
				}
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void MergePipelineCaches (PipelineCache dstCache, PipelineCache[] pSrcCaches)
		{
			Result result;
			unsafe {
				var arraypSrcCaches = pSrcCaches == null ? IntPtr.Zero : Marshal.AllocHGlobal (pSrcCaches.Length*sizeof (UInt64));
				var lenpSrcCaches = pSrcCaches == null ? 0 : pSrcCaches.Length;
				if (pSrcCaches != null)
					for (int i = 0; i < pSrcCaches.Length; i++)
						((UInt64*)arraypSrcCaches) [i] = (pSrcCaches [i].m);
				result = Interop.NativeMethods.vkMergePipelineCaches (this.m, dstCache != null ? dstCache.m : default(UInt64), (uint)lenpSrcCaches, (UInt64*)arraypSrcCaches);
				Marshal.FreeHGlobal (arraypSrcCaches);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void MergePipelineCache (PipelineCache dstCache, PipelineCache pSrcCache)
		{
			Result result;
			unsafe {
				fixed (UInt64* ptrpSrcCache = &pSrcCache.m) {
					result = Interop.NativeMethods.vkMergePipelineCaches (this.m, dstCache != null ? dstCache.m : default(UInt64), (UInt32)(pSrcCache != null ? 1 : 0), ptrpSrcCache);
				}
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public Pipeline[] CreateGraphicsPipelines (PipelineCache pipelineCache, GraphicsPipelineCreateInfo[] pCreateInfos, AllocationCallbacks pAllocator = null)
		{
			Result result;
			unsafe {
				if (pCreateInfos.Length <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (UInt64));
				var refpPipelines = new NativeReference ((int)(size * pCreateInfos.Length));
				var ptrpPipelines = refpPipelines.Handle;
				var arraypCreateInfos = pCreateInfos == null ? IntPtr.Zero : Marshal.AllocHGlobal (pCreateInfos.Length*sizeof (Interop.GraphicsPipelineCreateInfo));
				var lenpCreateInfos = pCreateInfos == null ? 0 : pCreateInfos.Length;
				if (pCreateInfos != null)
					for (int i = 0; i < pCreateInfos.Length; i++)
						((Interop.GraphicsPipelineCreateInfo*)arraypCreateInfos) [i] = *(pCreateInfos [i].m);
				result = Interop.NativeMethods.vkCreateGraphicsPipelines (this.m, pipelineCache != null ? pipelineCache.m : default(UInt64), (uint)lenpCreateInfos, (Interop.GraphicsPipelineCreateInfo*)arraypCreateInfos, pAllocator != null ? pAllocator.m : null, (UInt64*)ptrpPipelines);
				Marshal.FreeHGlobal (arraypCreateInfos);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pCreateInfos.Length <= 0)
					return null;
				var arr = new Pipeline [pCreateInfos.Length];
				for (int i = 0; i < pCreateInfos.Length; i++) {
					arr [i] = new Pipeline ();
					arr [i].m = ((UInt64*)ptrpPipelines) [i];
				}

				return arr;
			}
		}

		public Pipeline[] CreateComputePipelines (PipelineCache pipelineCache, ComputePipelineCreateInfo[] pCreateInfos, AllocationCallbacks pAllocator = null)
		{
			Result result;
			unsafe {
				if (pCreateInfos.Length <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (UInt64));
				var refpPipelines = new NativeReference ((int)(size * pCreateInfos.Length));
				var ptrpPipelines = refpPipelines.Handle;
				var arraypCreateInfos = pCreateInfos == null ? IntPtr.Zero : Marshal.AllocHGlobal (pCreateInfos.Length*sizeof (Interop.ComputePipelineCreateInfo));
				var lenpCreateInfos = pCreateInfos == null ? 0 : pCreateInfos.Length;
				if (pCreateInfos != null)
					for (int i = 0; i < pCreateInfos.Length; i++)
						((Interop.ComputePipelineCreateInfo*)arraypCreateInfos) [i] = *(pCreateInfos [i].m);
				result = Interop.NativeMethods.vkCreateComputePipelines (this.m, pipelineCache != null ? pipelineCache.m : default(UInt64), (uint)lenpCreateInfos, (Interop.ComputePipelineCreateInfo*)arraypCreateInfos, pAllocator != null ? pAllocator.m : null, (UInt64*)ptrpPipelines);
				Marshal.FreeHGlobal (arraypCreateInfos);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pCreateInfos.Length <= 0)
					return null;
				var arr = new Pipeline [pCreateInfos.Length];
				for (int i = 0; i < pCreateInfos.Length; i++) {
					arr [i] = new Pipeline ();
					arr [i].m = ((UInt64*)ptrpPipelines) [i];
				}

				return arr;
			}
		}

		public void DestroyPipeline (Pipeline pipeline = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyPipeline (this.m, pipeline != null ? pipeline.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public PipelineLayout CreatePipelineLayout (PipelineLayoutCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			PipelineLayout pPipelineLayout;
			unsafe {
				pPipelineLayout = new PipelineLayout ();

				fixed (UInt64* ptrpPipelineLayout = &pPipelineLayout.m) {
					result = Interop.NativeMethods.vkCreatePipelineLayout (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.PipelineLayoutCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpPipelineLayout);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pPipelineLayout;
			}
		}

		public void DestroyPipelineLayout (PipelineLayout pipelineLayout = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyPipelineLayout (this.m, pipelineLayout != null ? pipelineLayout.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public Sampler CreateSampler (SamplerCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			Sampler pSampler;
			unsafe {
				pSampler = new Sampler ();

				fixed (UInt64* ptrpSampler = &pSampler.m) {
					result = Interop.NativeMethods.vkCreateSampler (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.SamplerCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpSampler);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSampler;
			}
		}

		public void DestroySampler (Sampler sampler = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroySampler (this.m, sampler != null ? sampler.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public DescriptorSetLayout CreateDescriptorSetLayout (DescriptorSetLayoutCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			DescriptorSetLayout pSetLayout;
			unsafe {
				pSetLayout = new DescriptorSetLayout ();

				fixed (UInt64* ptrpSetLayout = &pSetLayout.m) {
					result = Interop.NativeMethods.vkCreateDescriptorSetLayout (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.DescriptorSetLayoutCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpSetLayout);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSetLayout;
			}
		}

		public void DestroyDescriptorSetLayout (DescriptorSetLayout descriptorSetLayout = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyDescriptorSetLayout (this.m, descriptorSetLayout != null ? descriptorSetLayout.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public DescriptorPool CreateDescriptorPool (DescriptorPoolCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			DescriptorPool pDescriptorPool;
			unsafe {
				pDescriptorPool = new DescriptorPool ();

				fixed (UInt64* ptrpDescriptorPool = &pDescriptorPool.m) {
					result = Interop.NativeMethods.vkCreateDescriptorPool (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.DescriptorPoolCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpDescriptorPool);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pDescriptorPool;
			}
		}

		public void DestroyDescriptorPool (DescriptorPool descriptorPool = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyDescriptorPool (this.m, descriptorPool != null ? descriptorPool.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public void ResetDescriptorPool (DescriptorPool descriptorPool, UInt32 flags = 0)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkResetDescriptorPool (this.m, descriptorPool != null ? descriptorPool.m : default(UInt64), flags);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public DescriptorSet[] AllocateDescriptorSets (DescriptorSetAllocateInfo pAllocateInfo)
		{
			Result result;
			unsafe {
				if (pAllocateInfo.DescriptorSetCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (UInt64));
				var refpDescriptorSets = new NativeReference ((int)(size * pAllocateInfo.DescriptorSetCount));
				var ptrpDescriptorSets = refpDescriptorSets.Handle;
				result = Interop.NativeMethods.vkAllocateDescriptorSets (this.m, pAllocateInfo != null ? pAllocateInfo.m : (Interop.DescriptorSetAllocateInfo*)default(IntPtr), (UInt64*)ptrpDescriptorSets);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pAllocateInfo.DescriptorSetCount <= 0)
					return null;
				var arr = new DescriptorSet [pAllocateInfo.DescriptorSetCount];
				for (int i = 0; i < pAllocateInfo.DescriptorSetCount; i++) {
					arr [i] = new DescriptorSet ();
					arr [i].m = ((UInt64*)ptrpDescriptorSets) [i];
				}

				return arr;
			}
		}

		public void FreeDescriptorSets (DescriptorPool descriptorPool, DescriptorSet[] pDescriptorSets)
		{
			Result result;
			unsafe {
				var arraypDescriptorSets = pDescriptorSets == null ? IntPtr.Zero : Marshal.AllocHGlobal (pDescriptorSets.Length*sizeof (UInt64));
				var lenpDescriptorSets = pDescriptorSets == null ? 0 : pDescriptorSets.Length;
				if (pDescriptorSets != null)
					for (int i = 0; i < pDescriptorSets.Length; i++)
						((UInt64*)arraypDescriptorSets) [i] = (pDescriptorSets [i].m);
				result = Interop.NativeMethods.vkFreeDescriptorSets (this.m, descriptorPool != null ? descriptorPool.m : default(UInt64), (uint)lenpDescriptorSets, (UInt64*)arraypDescriptorSets);
				Marshal.FreeHGlobal (arraypDescriptorSets);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void FreeDescriptorSet (DescriptorPool descriptorPool, DescriptorSet pDescriptorSet)
		{
			Result result;
			unsafe {
				fixed (UInt64* ptrpDescriptorSet = &pDescriptorSet.m) {
					result = Interop.NativeMethods.vkFreeDescriptorSets (this.m, descriptorPool != null ? descriptorPool.m : default(UInt64), (UInt32)(pDescriptorSet != null ? 1 : 0), ptrpDescriptorSet);
				}
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void UpdateDescriptorSets (WriteDescriptorSet[] pDescriptorWrites, CopyDescriptorSet[] pDescriptorCopies)
		{
			unsafe {
				var arraypDescriptorWrites = pDescriptorWrites == null ? IntPtr.Zero : Marshal.AllocHGlobal (pDescriptorWrites.Length*sizeof (Interop.WriteDescriptorSet));
				var lenpDescriptorWrites = pDescriptorWrites == null ? 0 : pDescriptorWrites.Length;
				if (pDescriptorWrites != null)
					for (int i = 0; i < pDescriptorWrites.Length; i++)
						((Interop.WriteDescriptorSet*)arraypDescriptorWrites) [i] = *(pDescriptorWrites [i].m);
				var arraypDescriptorCopies = pDescriptorCopies == null ? IntPtr.Zero : Marshal.AllocHGlobal (pDescriptorCopies.Length*sizeof (Interop.CopyDescriptorSet));
				var lenpDescriptorCopies = pDescriptorCopies == null ? 0 : pDescriptorCopies.Length;
				if (pDescriptorCopies != null)
					for (int i = 0; i < pDescriptorCopies.Length; i++)
						((Interop.CopyDescriptorSet*)arraypDescriptorCopies) [i] = *(pDescriptorCopies [i].m);
				Interop.NativeMethods.vkUpdateDescriptorSets (this.m, (uint)lenpDescriptorWrites, (Interop.WriteDescriptorSet*)arraypDescriptorWrites, (uint)lenpDescriptorCopies, (Interop.CopyDescriptorSet*)arraypDescriptorCopies);
				Marshal.FreeHGlobal (arraypDescriptorWrites);
				Marshal.FreeHGlobal (arraypDescriptorCopies);
			}
		}

		public void UpdateDescriptorSet (WriteDescriptorSet pDescriptorWrite, CopyDescriptorSet pDescriptorCopie)
		{
			unsafe {
				Interop.NativeMethods.vkUpdateDescriptorSets (this.m, (UInt32)(pDescriptorWrite != null ? 1 : 0), pDescriptorWrite != null ? pDescriptorWrite.m : (Interop.WriteDescriptorSet*)default(IntPtr), (UInt32)(pDescriptorCopie != null ? 1 : 0), pDescriptorCopie != null ? pDescriptorCopie.m : (Interop.CopyDescriptorSet*)default(IntPtr));
			}
		}

		public Framebuffer CreateFramebuffer (FramebufferCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			Framebuffer pFramebuffer;
			unsafe {
				pFramebuffer = new Framebuffer ();

				fixed (UInt64* ptrpFramebuffer = &pFramebuffer.m) {
					result = Interop.NativeMethods.vkCreateFramebuffer (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.FramebufferCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpFramebuffer);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pFramebuffer;
			}
		}

		public void DestroyFramebuffer (Framebuffer framebuffer = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyFramebuffer (this.m, framebuffer != null ? framebuffer.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public RenderPass CreateRenderPass (RenderPassCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			RenderPass pRenderPass;
			unsafe {
				pRenderPass = new RenderPass ();

				fixed (UInt64* ptrpRenderPass = &pRenderPass.m) {
					result = Interop.NativeMethods.vkCreateRenderPass (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.RenderPassCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpRenderPass);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pRenderPass;
			}
		}

		public void DestroyRenderPass (RenderPass renderPass = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyRenderPass (this.m, renderPass != null ? renderPass.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public Extent2D GetRenderAreaGranularity (RenderPass renderPass)
		{
			Extent2D pGranularity;
			unsafe {
				pGranularity = new Extent2D ();
				Interop.NativeMethods.vkGetRenderAreaGranularity (this.m, renderPass != null ? renderPass.m : default(UInt64), &pGranularity);

				return pGranularity;
			}
		}

		public CommandPool CreateCommandPool (CommandPoolCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			CommandPool pCommandPool;
			unsafe {
				pCommandPool = new CommandPool ();

				fixed (UInt64* ptrpCommandPool = &pCommandPool.m) {
					result = Interop.NativeMethods.vkCreateCommandPool (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.CommandPoolCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpCommandPool);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pCommandPool;
			}
		}

		public void DestroyCommandPool (CommandPool commandPool = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyCommandPool (this.m, commandPool != null ? commandPool.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public void ResetCommandPool (CommandPool commandPool, CommandPoolResetFlags flags = (CommandPoolResetFlags)0)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkResetCommandPool (this.m, commandPool != null ? commandPool.m : default(UInt64), flags);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public CommandBuffer[] AllocateCommandBuffers (CommandBufferAllocateInfo pAllocateInfo)
		{
			Result result;
			unsafe {
				if (pAllocateInfo.CommandBufferCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (IntPtr));
				var refpCommandBuffers = new NativeReference ((int)(size * pAllocateInfo.CommandBufferCount));
				var ptrpCommandBuffers = refpCommandBuffers.Handle;
				result = Interop.NativeMethods.vkAllocateCommandBuffers (this.m, pAllocateInfo != null ? pAllocateInfo.m : (Interop.CommandBufferAllocateInfo*)default(IntPtr), (IntPtr*)ptrpCommandBuffers);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pAllocateInfo.CommandBufferCount <= 0)
					return null;
				var arr = new CommandBuffer [pAllocateInfo.CommandBufferCount];
				for (int i = 0; i < pAllocateInfo.CommandBufferCount; i++) {
					arr [i] = new CommandBuffer ();
					arr [i].m = ((IntPtr*)ptrpCommandBuffers) [i];
				}

				return arr;
			}
		}

		public void FreeCommandBuffers (CommandPool commandPool, CommandBuffer[] pCommandBuffers)
		{
			unsafe {
				var arraypCommandBuffers = pCommandBuffers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pCommandBuffers.Length*sizeof (IntPtr));
				var lenpCommandBuffers = pCommandBuffers == null ? 0 : pCommandBuffers.Length;
				if (pCommandBuffers != null)
					for (int i = 0; i < pCommandBuffers.Length; i++)
						((IntPtr*)arraypCommandBuffers) [i] = (pCommandBuffers [i].m);
				Interop.NativeMethods.vkFreeCommandBuffers (this.m, commandPool != null ? commandPool.m : default(UInt64), (uint)lenpCommandBuffers, (IntPtr*)arraypCommandBuffers);
				Marshal.FreeHGlobal (arraypCommandBuffers);
			}
		}

		public void FreeCommandBuffer (CommandPool commandPool, CommandBuffer pCommandBuffer)
		{
			unsafe {
				fixed (IntPtr* ptrpCommandBuffer = &pCommandBuffer.m) {
					Interop.NativeMethods.vkFreeCommandBuffers (this.m, commandPool != null ? commandPool.m : default(UInt64), (UInt32)(pCommandBuffer != null ? 1 : 0), ptrpCommandBuffer);
				}
			}
		}

		public SwapchainKhr[] CreateSharedSwapchainsKHR (SwapchainCreateInfoKhr[] pCreateInfos, AllocationCallbacks pAllocator = null)
		{
			Result result;
			unsafe {
				if (pCreateInfos.Length <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (UInt64));
				var refpSwapchains = new NativeReference ((int)(size * pCreateInfos.Length));
				var ptrpSwapchains = refpSwapchains.Handle;
				var arraypCreateInfos = pCreateInfos == null ? IntPtr.Zero : Marshal.AllocHGlobal (pCreateInfos.Length*sizeof (Interop.SwapchainCreateInfoKhr));
				var lenpCreateInfos = pCreateInfos == null ? 0 : pCreateInfos.Length;
				if (pCreateInfos != null)
					for (int i = 0; i < pCreateInfos.Length; i++)
						((Interop.SwapchainCreateInfoKhr*)arraypCreateInfos) [i] = *(pCreateInfos [i].m);
				result = Interop.NativeMethods.vkCreateSharedSwapchainsKHR (this.m, (uint)lenpCreateInfos, (Interop.SwapchainCreateInfoKhr*)arraypCreateInfos, pAllocator != null ? pAllocator.m : null, (UInt64*)ptrpSwapchains);
				Marshal.FreeHGlobal (arraypCreateInfos);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pCreateInfos.Length <= 0)
					return null;
				var arr = new SwapchainKhr [pCreateInfos.Length];
				for (int i = 0; i < pCreateInfos.Length; i++) {
					arr [i] = new SwapchainKhr ();
					arr [i].m = ((UInt64*)ptrpSwapchains) [i];
				}

				return arr;
			}
		}

		public SwapchainKhr CreateSwapchainKHR (SwapchainCreateInfoKhr pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			SwapchainKhr pSwapchain;
			unsafe {
				pSwapchain = new SwapchainKhr ();

				fixed (UInt64* ptrpSwapchain = &pSwapchain.m) {
					result = Interop.NativeMethods.vkCreateSwapchainKHR (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.SwapchainCreateInfoKhr*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpSwapchain);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSwapchain;
			}
		}

		public void DestroySwapchainKHR (SwapchainKhr swapchain = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroySwapchainKHR (this.m, swapchain != null ? swapchain.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public Image[] GetSwapchainImagesKHR (SwapchainKhr swapchain)
		{
			Result result;
			unsafe {
				UInt32 pSwapchainImageCount;
				result = Interop.NativeMethods.vkGetSwapchainImagesKHR (this.m, swapchain != null ? swapchain.m : default(UInt64), &pSwapchainImageCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pSwapchainImageCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (UInt64));
				var refpSwapchainImages = new NativeReference ((int)(size * pSwapchainImageCount));
				var ptrpSwapchainImages = refpSwapchainImages.Handle;
				result = Interop.NativeMethods.vkGetSwapchainImagesKHR (this.m, swapchain != null ? swapchain.m : default(UInt64), &pSwapchainImageCount, (UInt64*)ptrpSwapchainImages);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pSwapchainImageCount <= 0)
					return null;
				var arr = new Image [pSwapchainImageCount];
				for (int i = 0; i < pSwapchainImageCount; i++) {
					arr [i] = new Image ();
					arr [i].m = ((UInt64*)ptrpSwapchainImages) [i];
				}

				return arr;
			}
		}

		public UInt32 AcquireNextImageKHR (SwapchainKhr swapchain, UInt64 timeout, Semaphore semaphore = null, Fence fence = null)
		{
			Result result;
			UInt32 pImageIndex;
			unsafe {
				pImageIndex = new UInt32 ();
				result = Interop.NativeMethods.vkAcquireNextImageKHR (this.m, swapchain != null ? swapchain.m : default(UInt64), timeout, semaphore != null ? semaphore.m : default(UInt64), fence != null ? fence.m : default(UInt64), &pImageIndex);
				if (result != Result.Success)
					throw new ResultException (result);

				return pImageIndex;
			}
		}

		public void DebugMarkerSetObjectNameEXT (DebugMarkerObjectNameInfoExt pNameInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkDebugMarkerSetObjectNameEXT (this.m, pNameInfo != null ? pNameInfo.m : (Interop.DebugMarkerObjectNameInfoExt*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void DebugMarkerSetObjectTagEXT (DebugMarkerObjectTagInfoExt pTagInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkDebugMarkerSetObjectTagEXT (this.m, pTagInfo != null ? pTagInfo.m : (Interop.DebugMarkerObjectTagInfoExt*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public IndirectCommandsLayoutNvx CreateIndirectCommandsLayoutNVX (IndirectCommandsLayoutCreateInfoNvx pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			IndirectCommandsLayoutNvx pIndirectCommandsLayout;
			unsafe {
				pIndirectCommandsLayout = new IndirectCommandsLayoutNvx ();

				fixed (UInt64* ptrpIndirectCommandsLayout = &pIndirectCommandsLayout.m) {
					result = Interop.NativeMethods.vkCreateIndirectCommandsLayoutNVX (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.IndirectCommandsLayoutCreateInfoNvx*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpIndirectCommandsLayout);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pIndirectCommandsLayout;
			}
		}

		public void DestroyIndirectCommandsLayoutNVX (IndirectCommandsLayoutNvx indirectCommandsLayout, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyIndirectCommandsLayoutNVX (this.m, indirectCommandsLayout != null ? indirectCommandsLayout.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public ObjectTableNvx CreateObjectTableNVX (ObjectTableCreateInfoNvx pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			ObjectTableNvx pObjectTable;
			unsafe {
				pObjectTable = new ObjectTableNvx ();

				fixed (UInt64* ptrpObjectTable = &pObjectTable.m) {
					result = Interop.NativeMethods.vkCreateObjectTableNVX (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.ObjectTableCreateInfoNvx*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpObjectTable);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pObjectTable;
			}
		}

		public void DestroyObjectTableNVX (ObjectTableNvx objectTable, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyObjectTableNVX (this.m, objectTable != null ? objectTable.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public void RegisterObjectsNVX (ObjectTableNvx objectTable, ObjectTableEntryNvx[] ppObjectTableEntries, UInt32[] pObjectIndices)
		{
			Result result;
			unsafe {
				var arrayppObjectTableEntries = ppObjectTableEntries == null ? IntPtr.Zero : Marshal.AllocHGlobal (ppObjectTableEntries.Length*sizeof (ObjectTableEntryNvx));
				var lenppObjectTableEntries = ppObjectTableEntries == null ? 0 : ppObjectTableEntries.Length;
				if (ppObjectTableEntries != null)
					for (int i = 0; i < ppObjectTableEntries.Length; i++)
						((ObjectTableEntryNvx*)arrayppObjectTableEntries) [i] = (ppObjectTableEntries [i]);
				var arraypObjectIndices = pObjectIndices == null ? IntPtr.Zero : Marshal.AllocHGlobal (pObjectIndices.Length*sizeof (UInt32));
				var lenpObjectIndices = pObjectIndices == null ? 0 : pObjectIndices.Length;
				if (pObjectIndices != null)
					for (int i = 0; i < pObjectIndices.Length; i++)
						((UInt32*)arraypObjectIndices) [i] = (pObjectIndices [i]);
				result = Interop.NativeMethods.vkRegisterObjectsNVX (this.m, objectTable != null ? objectTable.m : default(UInt64), (uint)lenpObjectIndices, (ObjectTableEntryNvx*)arrayppObjectTableEntries, (UInt32*)arraypObjectIndices);
				Marshal.FreeHGlobal (arrayppObjectTableEntries);
				Marshal.FreeHGlobal (arraypObjectIndices);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void RegisterObjectsNVX (ObjectTableNvx objectTable, ObjectTableEntryNvx? ppObjectTableEntrie, UInt32? pObjectIndice)
		{
			Result result;
			unsafe {
				ObjectTableEntryNvx valppObjectTableEntrie = ppObjectTableEntrie ?? default(ObjectTableEntryNvx);
				ObjectTableEntryNvx* ptrppObjectTableEntrie = ppObjectTableEntrie != null ? &valppObjectTableEntrie : (ObjectTableEntryNvx*)IntPtr.Zero;
				UInt32 valpObjectIndice = pObjectIndice ?? default(UInt32);
				UInt32* ptrpObjectIndice = pObjectIndice != null ? &valpObjectIndice : (UInt32*)IntPtr.Zero;
				result = Interop.NativeMethods.vkRegisterObjectsNVX (this.m, objectTable != null ? objectTable.m : default(UInt64), (UInt32)(pObjectIndice != null ? 1 : 0), ptrppObjectTableEntrie, ptrpObjectIndice);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void UnregisterObjectsNVX (ObjectTableNvx objectTable, ObjectEntryTypeNvx[] pObjectEntryTypes, UInt32[] pObjectIndices)
		{
			Result result;
			unsafe {
				var arraypObjectEntryTypes = pObjectEntryTypes == null ? IntPtr.Zero : Marshal.AllocHGlobal (pObjectEntryTypes.Length*sizeof (ObjectEntryTypeNvx));
				var lenpObjectEntryTypes = pObjectEntryTypes == null ? 0 : pObjectEntryTypes.Length;
				if (pObjectEntryTypes != null)
					for (int i = 0; i < pObjectEntryTypes.Length; i++)
						((ObjectEntryTypeNvx*)arraypObjectEntryTypes) [i] = (pObjectEntryTypes [i]);
				var arraypObjectIndices = pObjectIndices == null ? IntPtr.Zero : Marshal.AllocHGlobal (pObjectIndices.Length*sizeof (UInt32));
				var lenpObjectIndices = pObjectIndices == null ? 0 : pObjectIndices.Length;
				if (pObjectIndices != null)
					for (int i = 0; i < pObjectIndices.Length; i++)
						((UInt32*)arraypObjectIndices) [i] = (pObjectIndices [i]);
				result = Interop.NativeMethods.vkUnregisterObjectsNVX (this.m, objectTable != null ? objectTable.m : default(UInt64), (uint)lenpObjectIndices, (ObjectEntryTypeNvx*)arraypObjectEntryTypes, (UInt32*)arraypObjectIndices);
				Marshal.FreeHGlobal (arraypObjectEntryTypes);
				Marshal.FreeHGlobal (arraypObjectIndices);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void UnregisterObjectsNVX (ObjectTableNvx objectTable, ObjectEntryTypeNvx pObjectEntryType, UInt32? pObjectIndice)
		{
			Result result;
			unsafe {
				UInt32 valpObjectIndice = pObjectIndice ?? default(UInt32);
				UInt32* ptrpObjectIndice = pObjectIndice != null ? &valpObjectIndice : (UInt32*)IntPtr.Zero;
				result = Interop.NativeMethods.vkUnregisterObjectsNVX (this.m, objectTable != null ? objectTable.m : default(UInt64), (UInt32)(pObjectIndice != null ? 1 : 0), &pObjectEntryType, ptrpObjectIndice);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void TrimCommandPool (CommandPool commandPool, UInt32 flags = 0)
		{
			unsafe {
				Interop.NativeMethods.vkTrimCommandPool (this.m, commandPool != null ? commandPool.m : default(UInt64), flags);
			}
		}

		[Obsolete ("TrimCommandPoolKHR is deprecated, please use TrimCommandPool instead.")]
		public void TrimCommandPoolKHR (CommandPool commandPool, UInt32 flags = 0)
		{
			unsafe {
				Interop.NativeMethods.vkTrimCommandPoolKHR (this.m, commandPool != null ? commandPool.m : default(UInt64), flags);
			}
		}

		public IntPtr GetMemoryWin32HandleKHR (MemoryGetWin32HandleInfoKhr pGetWin32HandleInfo)
		{
			Result result;
			IntPtr pHandle;
			unsafe {
				pHandle = new IntPtr ();
				result = Interop.NativeMethods.vkGetMemoryWin32HandleKHR (this.m, pGetWin32HandleInfo != null ? pGetWin32HandleInfo.m : (Interop.MemoryGetWin32HandleInfoKhr*)default(IntPtr), &pHandle);
				if (result != Result.Success)
					throw new ResultException (result);

				return pHandle;
			}
		}

		public MemoryWin32HandlePropertiesKhr GetMemoryWin32HandlePropertiesKHR (ExternalMemoryHandleTypeFlags handleType, IntPtr handle)
		{
			Result result;
			MemoryWin32HandlePropertiesKhr pMemoryWin32HandleProperties;
			unsafe {
				pMemoryWin32HandleProperties = new MemoryWin32HandlePropertiesKhr ();
				result = Interop.NativeMethods.vkGetMemoryWin32HandlePropertiesKHR (this.m, handleType, handle, pMemoryWin32HandleProperties != null ? pMemoryWin32HandleProperties.m : (Interop.MemoryWin32HandlePropertiesKhr*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);

				return pMemoryWin32HandleProperties;
			}
		}

		public int GetMemoryFdKHR (MemoryGetFdInfoKhr pGetFdInfo)
		{
			Result result;
			int pFd;
			unsafe {
				pFd = new int ();
				result = Interop.NativeMethods.vkGetMemoryFdKHR (this.m, pGetFdInfo != null ? pGetFdInfo.m : (Interop.MemoryGetFdInfoKhr*)default(IntPtr), &pFd);
				if (result != Result.Success)
					throw new ResultException (result);

				return pFd;
			}
		}

		public MemoryFdPropertiesKhr GetMemoryFdPropertiesKHR (ExternalMemoryHandleTypeFlags handleType, int fd)
		{
			Result result;
			MemoryFdPropertiesKhr pMemoryFdProperties;
			unsafe {
				pMemoryFdProperties = new MemoryFdPropertiesKhr ();
				result = Interop.NativeMethods.vkGetMemoryFdPropertiesKHR (this.m, handleType, fd, pMemoryFdProperties != null ? pMemoryFdProperties.m : (Interop.MemoryFdPropertiesKhr*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);

				return pMemoryFdProperties;
			}
		}

		public IntPtr GetSemaphoreWin32HandleKHR (SemaphoreGetWin32HandleInfoKhr pGetWin32HandleInfo)
		{
			Result result;
			IntPtr pHandle;
			unsafe {
				pHandle = new IntPtr ();
				result = Interop.NativeMethods.vkGetSemaphoreWin32HandleKHR (this.m, pGetWin32HandleInfo != null ? pGetWin32HandleInfo.m : (Interop.SemaphoreGetWin32HandleInfoKhr*)default(IntPtr), &pHandle);
				if (result != Result.Success)
					throw new ResultException (result);

				return pHandle;
			}
		}

		public int GetSemaphoreFdKHR (SemaphoreGetFdInfoKhr pGetFdInfo)
		{
			Result result;
			int pFd;
			unsafe {
				pFd = new int ();
				result = Interop.NativeMethods.vkGetSemaphoreFdKHR (this.m, pGetFdInfo != null ? pGetFdInfo.m : (Interop.SemaphoreGetFdInfoKhr*)default(IntPtr), &pFd);
				if (result != Result.Success)
					throw new ResultException (result);

				return pFd;
			}
		}

		public void ImportSemaphoreFdKHR (ImportSemaphoreFdInfoKhr pImportSemaphoreFdInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkImportSemaphoreFdKHR (this.m, pImportSemaphoreFdInfo != null ? pImportSemaphoreFdInfo.m : (Interop.ImportSemaphoreFdInfoKhr*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public IntPtr GetFenceWin32HandleKHR (FenceGetWin32HandleInfoKhr pGetWin32HandleInfo)
		{
			Result result;
			IntPtr pHandle;
			unsafe {
				pHandle = new IntPtr ();
				result = Interop.NativeMethods.vkGetFenceWin32HandleKHR (this.m, pGetWin32HandleInfo != null ? pGetWin32HandleInfo.m : (Interop.FenceGetWin32HandleInfoKhr*)default(IntPtr), &pHandle);
				if (result != Result.Success)
					throw new ResultException (result);

				return pHandle;
			}
		}

		public int GetFenceFdKHR (FenceGetFdInfoKhr pGetFdInfo)
		{
			Result result;
			int pFd;
			unsafe {
				pFd = new int ();
				result = Interop.NativeMethods.vkGetFenceFdKHR (this.m, pGetFdInfo != null ? pGetFdInfo.m : (Interop.FenceGetFdInfoKhr*)default(IntPtr), &pFd);
				if (result != Result.Success)
					throw new ResultException (result);

				return pFd;
			}
		}

		public void ImportFenceFdKHR (ImportFenceFdInfoKhr pImportFenceFdInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkImportFenceFdKHR (this.m, pImportFenceFdInfo != null ? pImportFenceFdInfo.m : (Interop.ImportFenceFdInfoKhr*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void DisplayPowerControlEXT (DisplayKhr display, DisplayPowerInfoExt pDisplayPowerInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkDisplayPowerControlEXT (this.m, display != null ? display.m : default(UInt64), pDisplayPowerInfo != null ? pDisplayPowerInfo.m : (Interop.DisplayPowerInfoExt*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public Fence RegisterDeviceEventEXT (DeviceEventInfoExt pDeviceEventInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			Fence pFence;
			unsafe {
				pFence = new Fence ();

				fixed (UInt64* ptrpFence = &pFence.m) {
					result = Interop.NativeMethods.vkRegisterDeviceEventEXT (this.m, pDeviceEventInfo != null ? pDeviceEventInfo.m : (Interop.DeviceEventInfoExt*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpFence);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pFence;
			}
		}

		public Fence RegisterDisplayEventEXT (DisplayKhr display, DisplayEventInfoExt pDisplayEventInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			Fence pFence;
			unsafe {
				pFence = new Fence ();

				fixed (UInt64* ptrpFence = &pFence.m) {
					result = Interop.NativeMethods.vkRegisterDisplayEventEXT (this.m, display != null ? display.m : default(UInt64), pDisplayEventInfo != null ? pDisplayEventInfo.m : (Interop.DisplayEventInfoExt*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpFence);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pFence;
			}
		}

		public UInt64 GetSwapchainCounterEXT (SwapchainKhr swapchain, SurfaceCounterFlagsExt counter)
		{
			Result result;
			UInt64 pCounterValue;
			unsafe {
				pCounterValue = new UInt64 ();
				result = Interop.NativeMethods.vkGetSwapchainCounterEXT (this.m, swapchain != null ? swapchain.m : default(UInt64), counter, &pCounterValue);
				if (result != Result.Success)
					throw new ResultException (result);

				return pCounterValue;
			}
		}

		public PeerMemoryFeatureFlags GetGroupPeerMemoryFeatures (UInt32 heapIndex, UInt32 localDeviceIndex, UInt32 remoteDeviceIndex)
		{
			PeerMemoryFeatureFlags pPeerMemoryFeatures;
			unsafe {
				pPeerMemoryFeatures = new PeerMemoryFeatureFlags ();
				Interop.NativeMethods.vkGetDeviceGroupPeerMemoryFeatures (this.m, heapIndex, localDeviceIndex, remoteDeviceIndex, &pPeerMemoryFeatures);

				return pPeerMemoryFeatures;
			}
		}

		[Obsolete ("GetGroupPeerMemoryFeaturesKHR is deprecated, please use GetGroupPeerMemoryFeatures instead.")]
		public PeerMemoryFeatureFlags GetGroupPeerMemoryFeaturesKHR (UInt32 heapIndex, UInt32 localDeviceIndex, UInt32 remoteDeviceIndex)
		{
			PeerMemoryFeatureFlags pPeerMemoryFeatures;
			unsafe {
				pPeerMemoryFeatures = new PeerMemoryFeatureFlags ();
				Interop.NativeMethods.vkGetDeviceGroupPeerMemoryFeaturesKHR (this.m, heapIndex, localDeviceIndex, remoteDeviceIndex, &pPeerMemoryFeatures);

				return pPeerMemoryFeatures;
			}
		}

		public void BindBufferMemory2 (BindBufferMemoryInfo[] pBindInfos)
		{
			Result result;
			unsafe {
				var arraypBindInfos = pBindInfos == null ? IntPtr.Zero : Marshal.AllocHGlobal (pBindInfos.Length*sizeof (Interop.BindBufferMemoryInfo));
				var lenpBindInfos = pBindInfos == null ? 0 : pBindInfos.Length;
				if (pBindInfos != null)
					for (int i = 0; i < pBindInfos.Length; i++)
						((Interop.BindBufferMemoryInfo*)arraypBindInfos) [i] = *(pBindInfos [i].m);
				result = Interop.NativeMethods.vkBindBufferMemory2 (this.m, (uint)lenpBindInfos, (Interop.BindBufferMemoryInfo*)arraypBindInfos);
				Marshal.FreeHGlobal (arraypBindInfos);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void BindBufferMemory2 (BindBufferMemoryInfo pBindInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkBindBufferMemory2 (this.m, (UInt32)(pBindInfo != null ? 1 : 0), pBindInfo != null ? pBindInfo.m : (Interop.BindBufferMemoryInfo*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		[Obsolete ("BindBufferMemory2KHR is deprecated, please use BindBufferMemory2 instead.")]
		public void BindBufferMemory2KHR (BindBufferMemoryInfo[] pBindInfos)
		{
			Result result;
			unsafe {
				var arraypBindInfos = pBindInfos == null ? IntPtr.Zero : Marshal.AllocHGlobal (pBindInfos.Length*sizeof (Interop.BindBufferMemoryInfo));
				var lenpBindInfos = pBindInfos == null ? 0 : pBindInfos.Length;
				if (pBindInfos != null)
					for (int i = 0; i < pBindInfos.Length; i++)
						((Interop.BindBufferMemoryInfo*)arraypBindInfos) [i] = *(pBindInfos [i].m);
				result = Interop.NativeMethods.vkBindBufferMemory2KHR (this.m, (uint)lenpBindInfos, (Interop.BindBufferMemoryInfo*)arraypBindInfos);
				Marshal.FreeHGlobal (arraypBindInfos);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		[Obsolete ("BindBufferMemory2KHR is deprecated, please use BindBufferMemory2 instead.")]
		public void BindBufferMemory2KHR (BindBufferMemoryInfo pBindInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkBindBufferMemory2KHR (this.m, (UInt32)(pBindInfo != null ? 1 : 0), pBindInfo != null ? pBindInfo.m : (Interop.BindBufferMemoryInfo*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void BindImageMemory2 (BindImageMemoryInfo[] pBindInfos)
		{
			Result result;
			unsafe {
				var arraypBindInfos = pBindInfos == null ? IntPtr.Zero : Marshal.AllocHGlobal (pBindInfos.Length*sizeof (Interop.BindImageMemoryInfo));
				var lenpBindInfos = pBindInfos == null ? 0 : pBindInfos.Length;
				if (pBindInfos != null)
					for (int i = 0; i < pBindInfos.Length; i++)
						((Interop.BindImageMemoryInfo*)arraypBindInfos) [i] = *(pBindInfos [i].m);
				result = Interop.NativeMethods.vkBindImageMemory2 (this.m, (uint)lenpBindInfos, (Interop.BindImageMemoryInfo*)arraypBindInfos);
				Marshal.FreeHGlobal (arraypBindInfos);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void BindImageMemory2 (BindImageMemoryInfo pBindInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkBindImageMemory2 (this.m, (UInt32)(pBindInfo != null ? 1 : 0), pBindInfo != null ? pBindInfo.m : (Interop.BindImageMemoryInfo*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		[Obsolete ("BindImageMemory2KHR is deprecated, please use BindImageMemory2 instead.")]
		public void BindImageMemory2KHR (BindImageMemoryInfo[] pBindInfos)
		{
			Result result;
			unsafe {
				var arraypBindInfos = pBindInfos == null ? IntPtr.Zero : Marshal.AllocHGlobal (pBindInfos.Length*sizeof (Interop.BindImageMemoryInfo));
				var lenpBindInfos = pBindInfos == null ? 0 : pBindInfos.Length;
				if (pBindInfos != null)
					for (int i = 0; i < pBindInfos.Length; i++)
						((Interop.BindImageMemoryInfo*)arraypBindInfos) [i] = *(pBindInfos [i].m);
				result = Interop.NativeMethods.vkBindImageMemory2KHR (this.m, (uint)lenpBindInfos, (Interop.BindImageMemoryInfo*)arraypBindInfos);
				Marshal.FreeHGlobal (arraypBindInfos);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		[Obsolete ("BindImageMemory2KHR is deprecated, please use BindImageMemory2 instead.")]
		public void BindImageMemory2KHR (BindImageMemoryInfo pBindInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkBindImageMemory2KHR (this.m, (UInt32)(pBindInfo != null ? 1 : 0), pBindInfo != null ? pBindInfo.m : (Interop.BindImageMemoryInfo*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public DeviceGroupPresentCapabilitiesKhr GetGroupPresentCapabilitiesKHR ()
		{
			Result result;
			DeviceGroupPresentCapabilitiesKhr pDeviceGroupPresentCapabilities;
			unsafe {
				pDeviceGroupPresentCapabilities = new DeviceGroupPresentCapabilitiesKhr ();
				result = Interop.NativeMethods.vkGetDeviceGroupPresentCapabilitiesKHR (this.m, pDeviceGroupPresentCapabilities != null ? pDeviceGroupPresentCapabilities.m : (Interop.DeviceGroupPresentCapabilitiesKhr*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);

				return pDeviceGroupPresentCapabilities;
			}
		}

		public DeviceGroupPresentModeFlagsKhr GetGroupSurfacePresentModesKHR (SurfaceKhr surface)
		{
			Result result;
			DeviceGroupPresentModeFlagsKhr pModes;
			unsafe {
				pModes = new DeviceGroupPresentModeFlagsKhr ();
				result = Interop.NativeMethods.vkGetDeviceGroupSurfacePresentModesKHR (this.m, surface != null ? surface.m : default(UInt64), &pModes);
				if (result != Result.Success)
					throw new ResultException (result);

				return pModes;
			}
		}

		public UInt32 AcquireNextImage2KHR (AcquireNextImageInfoKhr pAcquireInfo)
		{
			Result result;
			UInt32 pImageIndex;
			unsafe {
				pImageIndex = new UInt32 ();
				result = Interop.NativeMethods.vkAcquireNextImage2KHR (this.m, pAcquireInfo != null ? pAcquireInfo.m : (Interop.AcquireNextImageInfoKhr*)default(IntPtr), &pImageIndex);
				if (result != Result.Success)
					throw new ResultException (result);

				return pImageIndex;
			}
		}

		public DescriptorUpdateTemplate CreateDescriptorUpdateTemplate (DescriptorUpdateTemplateCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			DescriptorUpdateTemplate pDescriptorUpdateTemplate;
			unsafe {
				pDescriptorUpdateTemplate = new DescriptorUpdateTemplate ();

				fixed (UInt64* ptrpDescriptorUpdateTemplate = &pDescriptorUpdateTemplate.m) {
					result = Interop.NativeMethods.vkCreateDescriptorUpdateTemplate (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.DescriptorUpdateTemplateCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpDescriptorUpdateTemplate);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pDescriptorUpdateTemplate;
			}
		}

		[Obsolete ("CreateDescriptorUpdateTemplateKHR is deprecated, please use CreateDescriptorUpdateTemplate instead.")]
		public DescriptorUpdateTemplate CreateDescriptorUpdateTemplateKHR (DescriptorUpdateTemplateCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			DescriptorUpdateTemplate pDescriptorUpdateTemplate;
			unsafe {
				pDescriptorUpdateTemplate = new DescriptorUpdateTemplate ();

				fixed (UInt64* ptrpDescriptorUpdateTemplate = &pDescriptorUpdateTemplate.m) {
					result = Interop.NativeMethods.vkCreateDescriptorUpdateTemplateKHR (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.DescriptorUpdateTemplateCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpDescriptorUpdateTemplate);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pDescriptorUpdateTemplate;
			}
		}

		public void DestroyDescriptorUpdateTemplate (DescriptorUpdateTemplate descriptorUpdateTemplate = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyDescriptorUpdateTemplate (this.m, descriptorUpdateTemplate != null ? descriptorUpdateTemplate.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		[Obsolete ("DestroyDescriptorUpdateTemplateKHR is deprecated, please use DestroyDescriptorUpdateTemplate instead.")]
		public void DestroyDescriptorUpdateTemplateKHR (DescriptorUpdateTemplate descriptorUpdateTemplate = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyDescriptorUpdateTemplateKHR (this.m, descriptorUpdateTemplate != null ? descriptorUpdateTemplate.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public void UpdateDescriptorSetWithTemplate (DescriptorSet descriptorSet, DescriptorUpdateTemplate descriptorUpdateTemplate, IntPtr pData)
		{
			unsafe {
				Interop.NativeMethods.vkUpdateDescriptorSetWithTemplate (this.m, descriptorSet != null ? descriptorSet.m : default(UInt64), descriptorUpdateTemplate != null ? descriptorUpdateTemplate.m : default(UInt64), pData);
			}
		}

		[Obsolete ("UpdateDescriptorSetWithTemplateKHR is deprecated, please use UpdateDescriptorSetWithTemplate instead.")]
		public void UpdateDescriptorSetWithTemplateKHR (DescriptorSet descriptorSet, DescriptorUpdateTemplate descriptorUpdateTemplate, IntPtr pData)
		{
			unsafe {
				Interop.NativeMethods.vkUpdateDescriptorSetWithTemplateKHR (this.m, descriptorSet != null ? descriptorSet.m : default(UInt64), descriptorUpdateTemplate != null ? descriptorUpdateTemplate.m : default(UInt64), pData);
			}
		}

		public void SetHdrMetadataEXT (SwapchainKhr[] pSwapchains, HdrMetadataExt[] pMetadata)
		{
			unsafe {
				var arraypSwapchains = pSwapchains == null ? IntPtr.Zero : Marshal.AllocHGlobal (pSwapchains.Length*sizeof (UInt64));
				var lenpSwapchains = pSwapchains == null ? 0 : pSwapchains.Length;
				if (pSwapchains != null)
					for (int i = 0; i < pSwapchains.Length; i++)
						((UInt64*)arraypSwapchains) [i] = (pSwapchains [i].m);
				var arraypMetadata = pMetadata == null ? IntPtr.Zero : Marshal.AllocHGlobal (pMetadata.Length*sizeof (Interop.HdrMetadataExt));
				var lenpMetadata = pMetadata == null ? 0 : pMetadata.Length;
				if (pMetadata != null)
					for (int i = 0; i < pMetadata.Length; i++)
						((Interop.HdrMetadataExt*)arraypMetadata) [i] = *(pMetadata [i].m);
				Interop.NativeMethods.vkSetHdrMetadataEXT (this.m, (uint)lenpMetadata, (UInt64*)arraypSwapchains, (Interop.HdrMetadataExt*)arraypMetadata);
				Marshal.FreeHGlobal (arraypSwapchains);
				Marshal.FreeHGlobal (arraypMetadata);
			}
		}

		public void SetHdrMetadataEXT (SwapchainKhr pSwapchain, HdrMetadataExt pMetadata)
		{
			unsafe {
				fixed (UInt64* ptrpSwapchain = &pSwapchain.m) {
					Interop.NativeMethods.vkSetHdrMetadataEXT (this.m, (UInt32)(pMetadata != null ? 1 : 0), ptrpSwapchain, pMetadata != null ? pMetadata.m : (Interop.HdrMetadataExt*)default(IntPtr));
				}
			}
		}

		public void GetSwapchainStatusKHR (SwapchainKhr swapchain)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkGetSwapchainStatusKHR (this.m, swapchain != null ? swapchain.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public RefreshCycleDurationGoogle GetRefreshCycleDurationGOOGLE (SwapchainKhr swapchain)
		{
			Result result;
			RefreshCycleDurationGoogle pDisplayTimingProperties;
			unsafe {
				pDisplayTimingProperties = new RefreshCycleDurationGoogle ();
				result = Interop.NativeMethods.vkGetRefreshCycleDurationGOOGLE (this.m, swapchain != null ? swapchain.m : default(UInt64), &pDisplayTimingProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				return pDisplayTimingProperties;
			}
		}

		public PastPresentationTimingGoogle[] GetPastPresentationTimingGOOGLE (SwapchainKhr swapchain)
		{
			Result result;
			unsafe {
				UInt32 pPresentationTimingCount;
				result = Interop.NativeMethods.vkGetPastPresentationTimingGOOGLE (this.m, swapchain != null ? swapchain.m : default(UInt64), &pPresentationTimingCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPresentationTimingCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (PastPresentationTimingGoogle));
				var refpPresentationTimings = new NativeReference ((int)(size * pPresentationTimingCount));
				var ptrpPresentationTimings = refpPresentationTimings.Handle;
				result = Interop.NativeMethods.vkGetPastPresentationTimingGOOGLE (this.m, swapchain != null ? swapchain.m : default(UInt64), &pPresentationTimingCount, (PastPresentationTimingGoogle*)ptrpPresentationTimings);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPresentationTimingCount <= 0)
					return null;
				var arr = new PastPresentationTimingGoogle [pPresentationTimingCount];
				for (int i = 0; i < pPresentationTimingCount; i++) {
					arr [i] = (((PastPresentationTimingGoogle*)ptrpPresentationTimings) [i]);
				}

				return arr;
			}
		}

		public MemoryRequirements2 GetBufferMemoryRequirements2 (BufferMemoryRequirementsInfo2 pInfo)
		{
			MemoryRequirements2 pMemoryRequirements;
			unsafe {
				pMemoryRequirements = new MemoryRequirements2 ();
				Interop.NativeMethods.vkGetBufferMemoryRequirements2 (this.m, pInfo != null ? pInfo.m : (Interop.BufferMemoryRequirementsInfo2*)default(IntPtr), pMemoryRequirements != null ? pMemoryRequirements.m : (Interop.MemoryRequirements2*)default(IntPtr));

				return pMemoryRequirements;
			}
		}

		[Obsolete ("GetBufferMemoryRequirements2KHR is deprecated, please use GetBufferMemoryRequirements2 instead.")]
		public MemoryRequirements2 GetBufferMemoryRequirements2KHR (BufferMemoryRequirementsInfo2 pInfo)
		{
			MemoryRequirements2 pMemoryRequirements;
			unsafe {
				pMemoryRequirements = new MemoryRequirements2 ();
				Interop.NativeMethods.vkGetBufferMemoryRequirements2KHR (this.m, pInfo != null ? pInfo.m : (Interop.BufferMemoryRequirementsInfo2*)default(IntPtr), pMemoryRequirements != null ? pMemoryRequirements.m : (Interop.MemoryRequirements2*)default(IntPtr));

				return pMemoryRequirements;
			}
		}

		public MemoryRequirements2 GetImageMemoryRequirements2 (ImageMemoryRequirementsInfo2 pInfo)
		{
			MemoryRequirements2 pMemoryRequirements;
			unsafe {
				pMemoryRequirements = new MemoryRequirements2 ();
				Interop.NativeMethods.vkGetImageMemoryRequirements2 (this.m, pInfo != null ? pInfo.m : (Interop.ImageMemoryRequirementsInfo2*)default(IntPtr), pMemoryRequirements != null ? pMemoryRequirements.m : (Interop.MemoryRequirements2*)default(IntPtr));

				return pMemoryRequirements;
			}
		}

		[Obsolete ("GetImageMemoryRequirements2KHR is deprecated, please use GetImageMemoryRequirements2 instead.")]
		public MemoryRequirements2 GetImageMemoryRequirements2KHR (ImageMemoryRequirementsInfo2 pInfo)
		{
			MemoryRequirements2 pMemoryRequirements;
			unsafe {
				pMemoryRequirements = new MemoryRequirements2 ();
				Interop.NativeMethods.vkGetImageMemoryRequirements2KHR (this.m, pInfo != null ? pInfo.m : (Interop.ImageMemoryRequirementsInfo2*)default(IntPtr), pMemoryRequirements != null ? pMemoryRequirements.m : (Interop.MemoryRequirements2*)default(IntPtr));

				return pMemoryRequirements;
			}
		}

		public SparseImageMemoryRequirements2[] GetImageSparseMemoryRequirements2 (ImageSparseMemoryRequirementsInfo2 pInfo)
		{
			unsafe {
				UInt32 pSparseMemoryRequirementCount;
				Interop.NativeMethods.vkGetImageSparseMemoryRequirements2 (this.m, pInfo != null ? pInfo.m : (Interop.ImageSparseMemoryRequirementsInfo2*)default(IntPtr), &pSparseMemoryRequirementCount, null);
				if (pSparseMemoryRequirementCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.SparseImageMemoryRequirements2));
				var refpSparseMemoryRequirements = new NativeReference ((int)(size * pSparseMemoryRequirementCount));
				var ptrpSparseMemoryRequirements = refpSparseMemoryRequirements.Handle;
				Interop.NativeMethods.vkGetImageSparseMemoryRequirements2 (this.m, pInfo != null ? pInfo.m : (Interop.ImageSparseMemoryRequirementsInfo2*)default(IntPtr), &pSparseMemoryRequirementCount, (Interop.SparseImageMemoryRequirements2*)ptrpSparseMemoryRequirements);

				if (pSparseMemoryRequirementCount <= 0)
					return null;
				var arr = new SparseImageMemoryRequirements2 [pSparseMemoryRequirementCount];
				for (int i = 0; i < pSparseMemoryRequirementCount; i++) {
					arr [i] = new SparseImageMemoryRequirements2 (new NativePointer (refpSparseMemoryRequirements, (IntPtr)(&((Interop.SparseImageMemoryRequirements2*)ptrpSparseMemoryRequirements) [i])));
				}

				return arr;
			}
		}

		[Obsolete ("GetImageSparseMemoryRequirements2KHR is deprecated, please use GetImageSparseMemoryRequirements2 instead.")]
		public SparseImageMemoryRequirements2[] GetImageSparseMemoryRequirements2KHR (ImageSparseMemoryRequirementsInfo2 pInfo)
		{
			unsafe {
				UInt32 pSparseMemoryRequirementCount;
				Interop.NativeMethods.vkGetImageSparseMemoryRequirements2KHR (this.m, pInfo != null ? pInfo.m : (Interop.ImageSparseMemoryRequirementsInfo2*)default(IntPtr), &pSparseMemoryRequirementCount, null);
				if (pSparseMemoryRequirementCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.SparseImageMemoryRequirements2));
				var refpSparseMemoryRequirements = new NativeReference ((int)(size * pSparseMemoryRequirementCount));
				var ptrpSparseMemoryRequirements = refpSparseMemoryRequirements.Handle;
				Interop.NativeMethods.vkGetImageSparseMemoryRequirements2KHR (this.m, pInfo != null ? pInfo.m : (Interop.ImageSparseMemoryRequirementsInfo2*)default(IntPtr), &pSparseMemoryRequirementCount, (Interop.SparseImageMemoryRequirements2*)ptrpSparseMemoryRequirements);

				if (pSparseMemoryRequirementCount <= 0)
					return null;
				var arr = new SparseImageMemoryRequirements2 [pSparseMemoryRequirementCount];
				for (int i = 0; i < pSparseMemoryRequirementCount; i++) {
					arr [i] = new SparseImageMemoryRequirements2 (new NativePointer (refpSparseMemoryRequirements, (IntPtr)(&((Interop.SparseImageMemoryRequirements2*)ptrpSparseMemoryRequirements) [i])));
				}

				return arr;
			}
		}

		public SamplerYcbcrConversion CreateSamplerYcbcrConversion (SamplerYcbcrConversionCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			SamplerYcbcrConversion pYcbcrConversion;
			unsafe {
				pYcbcrConversion = new SamplerYcbcrConversion ();

				fixed (UInt64* ptrpYcbcrConversion = &pYcbcrConversion.m) {
					result = Interop.NativeMethods.vkCreateSamplerYcbcrConversion (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.SamplerYcbcrConversionCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpYcbcrConversion);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pYcbcrConversion;
			}
		}

		[Obsolete ("CreateSamplerYcbcrConversionKHR is deprecated, please use CreateSamplerYcbcrConversion instead.")]
		public SamplerYcbcrConversion CreateSamplerYcbcrConversionKHR (SamplerYcbcrConversionCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			SamplerYcbcrConversion pYcbcrConversion;
			unsafe {
				pYcbcrConversion = new SamplerYcbcrConversion ();

				fixed (UInt64* ptrpYcbcrConversion = &pYcbcrConversion.m) {
					result = Interop.NativeMethods.vkCreateSamplerYcbcrConversionKHR (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.SamplerYcbcrConversionCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpYcbcrConversion);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pYcbcrConversion;
			}
		}

		public void DestroySamplerYcbcrConversion (SamplerYcbcrConversion ycbcrConversion = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroySamplerYcbcrConversion (this.m, ycbcrConversion != null ? ycbcrConversion.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		[Obsolete ("DestroySamplerYcbcrConversionKHR is deprecated, please use DestroySamplerYcbcrConversion instead.")]
		public void DestroySamplerYcbcrConversionKHR (SamplerYcbcrConversion ycbcrConversion = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroySamplerYcbcrConversionKHR (this.m, ycbcrConversion != null ? ycbcrConversion.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public Queue GetQueue2 (DeviceQueueInfo2 pQueueInfo)
		{
			Queue pQueue;
			unsafe {
				pQueue = new Queue ();

				fixed (IntPtr* ptrpQueue = &pQueue.m) {
					Interop.NativeMethods.vkGetDeviceQueue2 (this.m, pQueueInfo != null ? pQueueInfo.m : (Interop.DeviceQueueInfo2*)default(IntPtr), ptrpQueue);
				}

				return pQueue;
			}
		}

		public ValidationCacheExt CreateValidationCacheEXT (ValidationCacheCreateInfoExt pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			ValidationCacheExt pValidationCache;
			unsafe {
				pValidationCache = new ValidationCacheExt ();

				fixed (UInt64* ptrpValidationCache = &pValidationCache.m) {
					result = Interop.NativeMethods.vkCreateValidationCacheEXT (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.ValidationCacheCreateInfoExt*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpValidationCache);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pValidationCache;
			}
		}

		public void DestroyValidationCacheEXT (ValidationCacheExt validationCache = null, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyValidationCacheEXT (this.m, validationCache != null ? validationCache.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public void GetValidationCacheDataEXT (ValidationCacheExt validationCache, out UIntPtr pDataSize, IntPtr pData = default(IntPtr))
		{
			Result result;
			unsafe {
				fixed (UIntPtr* ptrpDataSize = &pDataSize) {
					result = Interop.NativeMethods.vkGetValidationCacheDataEXT (this.m, validationCache != null ? validationCache.m : default(UInt64), ptrpDataSize, pData);
				}
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void MergeValidationCachesEXT (ValidationCacheExt dstCache, ValidationCacheExt[] pSrcCaches)
		{
			Result result;
			unsafe {
				var arraypSrcCaches = pSrcCaches == null ? IntPtr.Zero : Marshal.AllocHGlobal (pSrcCaches.Length*sizeof (UInt64));
				var lenpSrcCaches = pSrcCaches == null ? 0 : pSrcCaches.Length;
				if (pSrcCaches != null)
					for (int i = 0; i < pSrcCaches.Length; i++)
						((UInt64*)arraypSrcCaches) [i] = (pSrcCaches [i].m);
				result = Interop.NativeMethods.vkMergeValidationCachesEXT (this.m, dstCache != null ? dstCache.m : default(UInt64), (uint)lenpSrcCaches, (UInt64*)arraypSrcCaches);
				Marshal.FreeHGlobal (arraypSrcCaches);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void MergeValidationCachesEXT (ValidationCacheExt dstCache, ValidationCacheExt pSrcCache)
		{
			Result result;
			unsafe {
				fixed (UInt64* ptrpSrcCache = &pSrcCache.m) {
					result = Interop.NativeMethods.vkMergeValidationCachesEXT (this.m, dstCache != null ? dstCache.m : default(UInt64), (UInt32)(pSrcCache != null ? 1 : 0), ptrpSrcCache);
				}
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public DescriptorSetLayoutSupport GetDescriptorSetLayoutSupport (DescriptorSetLayoutCreateInfo pCreateInfo)
		{
			DescriptorSetLayoutSupport pSupport;
			unsafe {
				pSupport = new DescriptorSetLayoutSupport ();
				Interop.NativeMethods.vkGetDescriptorSetLayoutSupport (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.DescriptorSetLayoutCreateInfo*)default(IntPtr), pSupport != null ? pSupport.m : (Interop.DescriptorSetLayoutSupport*)default(IntPtr));

				return pSupport;
			}
		}

		[Obsolete ("GetDescriptorSetLayoutSupportKHR is deprecated, please use GetDescriptorSetLayoutSupport instead.")]
		public DescriptorSetLayoutSupport GetDescriptorSetLayoutSupportKHR (DescriptorSetLayoutCreateInfo pCreateInfo)
		{
			DescriptorSetLayoutSupport pSupport;
			unsafe {
				pSupport = new DescriptorSetLayoutSupport ();
				Interop.NativeMethods.vkGetDescriptorSetLayoutSupportKHR (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.DescriptorSetLayoutCreateInfo*)default(IntPtr), pSupport != null ? pSupport.m : (Interop.DescriptorSetLayoutSupport*)default(IntPtr));

				return pSupport;
			}
		}

		public int GetSwapchainGrallocUsageANDROID (Format format, ImageUsageFlags imageUsage)
		{
			Result result;
			int grallocUsage;
			unsafe {
				grallocUsage = new int ();
				result = Interop.NativeMethods.vkGetSwapchainGrallocUsageANDROID (this.m, format, imageUsage, &grallocUsage);
				if (result != Result.Success)
					throw new ResultException (result);

				return grallocUsage;
			}
		}

		public void AcquireImageANDROID (Image image, int nativeFenceFd, Semaphore semaphore, Fence fence)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkAcquireImageANDROID (this.m, image != null ? image.m : default(UInt64), nativeFenceFd, semaphore != null ? semaphore.m : default(UInt64), fence != null ? fence.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void GetShaderInfoAMD (Pipeline pipeline, ShaderStageFlags shaderStage, ShaderInfoTypeAmd infoType, out UIntPtr pInfoSize, IntPtr pInfo = default(IntPtr))
		{
			Result result;
			unsafe {
				fixed (UIntPtr* ptrpInfoSize = &pInfoSize) {
					result = Interop.NativeMethods.vkGetShaderInfoAMD (this.m, pipeline != null ? pipeline.m : default(UInt64), shaderStage, infoType, ptrpInfoSize, pInfo);
				}
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void SetLocalDimmingAMD (SwapchainKhr swapChain, Bool32 localDimmingEnable)
		{
			unsafe {
				Interop.NativeMethods.vkSetLocalDimmingAMD (this.m, swapChain != null ? swapChain.m : default(UInt64), localDimmingEnable);
			}
		}

		public void GetCalibratedTimestampsEXT (CalibratedTimestampInfoExt[] pTimestampInfos, out UInt64 pTimestamps, out UInt64 pMaxDeviation)
		{
			Result result;
			unsafe {
				fixed (UInt64* ptrpTimestamps = &pTimestamps) {
					fixed (UInt64* ptrpMaxDeviation = &pMaxDeviation) {
						var arraypTimestampInfos = pTimestampInfos == null ? IntPtr.Zero : Marshal.AllocHGlobal (pTimestampInfos.Length*sizeof (Interop.CalibratedTimestampInfoExt));
						var lenpTimestampInfos = pTimestampInfos == null ? 0 : pTimestampInfos.Length;
						if (pTimestampInfos != null)
							for (int i = 0; i < pTimestampInfos.Length; i++)
								((Interop.CalibratedTimestampInfoExt*)arraypTimestampInfos) [i] = *(pTimestampInfos [i].m);
						result = Interop.NativeMethods.vkGetCalibratedTimestampsEXT (this.m, (uint)lenpTimestampInfos, (Interop.CalibratedTimestampInfoExt*)arraypTimestampInfos, ptrpTimestamps, ptrpMaxDeviation);
						Marshal.FreeHGlobal (arraypTimestampInfos);
					}
				}
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void GetCalibratedTimestampsEXT (CalibratedTimestampInfoExt pTimestampInfo, out UInt64 pTimestamp, out UInt64 pMaxDeviation)
		{
			Result result;
			unsafe {
				fixed (UInt64* ptrpTimestamp = &pTimestamp) {
					fixed (UInt64* ptrpMaxDeviation = &pMaxDeviation) {
						result = Interop.NativeMethods.vkGetCalibratedTimestampsEXT (this.m, (UInt32)(pTimestampInfo != null ? 1 : 0), pTimestampInfo != null ? pTimestampInfo.m : (Interop.CalibratedTimestampInfoExt*)default(IntPtr), ptrpTimestamp, ptrpMaxDeviation);
					}
				}
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void SetDebugUtilsObjectNameEXT (DebugUtilsObjectNameInfoExt pNameInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkSetDebugUtilsObjectNameEXT (this.m, pNameInfo != null ? pNameInfo.m : (Interop.DebugUtilsObjectNameInfoExt*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void SetDebugUtilsObjectTagEXT (DebugUtilsObjectTagInfoExt pTagInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkSetDebugUtilsObjectTagEXT (this.m, pTagInfo != null ? pTagInfo.m : (Interop.DebugUtilsObjectTagInfoExt*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public MemoryHostPointerPropertiesExt GetMemoryHostPointerPropertiesEXT (ExternalMemoryHandleTypeFlags handleType, IntPtr pHostPointer)
		{
			Result result;
			MemoryHostPointerPropertiesExt pMemoryHostPointerProperties;
			unsafe {
				pMemoryHostPointerProperties = new MemoryHostPointerPropertiesExt ();
				result = Interop.NativeMethods.vkGetMemoryHostPointerPropertiesEXT (this.m, handleType, pHostPointer, pMemoryHostPointerProperties != null ? pMemoryHostPointerProperties.m : (Interop.MemoryHostPointerPropertiesExt*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);

				return pMemoryHostPointerProperties;
			}
		}

		public RenderPass CreateRenderPass2KHR (RenderPassCreateInfo2Khr pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			RenderPass pRenderPass;
			unsafe {
				pRenderPass = new RenderPass ();

				fixed (UInt64* ptrpRenderPass = &pRenderPass.m) {
					result = Interop.NativeMethods.vkCreateRenderPass2KHR (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.RenderPassCreateInfo2Khr*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpRenderPass);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pRenderPass;
			}
		}

		public void CompileDeferredNV (Pipeline pipeline, UInt32 shader)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkCompileDeferredNV (this.m, pipeline != null ? pipeline.m : default(UInt64), shader);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public AccelerationStructureNv CreateAccelerationStructureNV (AccelerationStructureCreateInfoNv pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			AccelerationStructureNv pAccelerationStructure;
			unsafe {
				pAccelerationStructure = new AccelerationStructureNv ();

				fixed (UInt64* ptrpAccelerationStructure = &pAccelerationStructure.m) {
					result = Interop.NativeMethods.vkCreateAccelerationStructureNV (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.AccelerationStructureCreateInfoNv*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpAccelerationStructure);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pAccelerationStructure;
			}
		}

		public void DestroyAccelerationStructureNV (AccelerationStructureNv accelerationStructure, AllocationCallbacks pAllocator = null)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyAccelerationStructureNV (this.m, accelerationStructure != null ? accelerationStructure.m : default(UInt64), pAllocator != null ? pAllocator.m : null);
			}
		}

		public void BindAccelerationStructureMemoryNV (BindAccelerationStructureMemoryInfoNv[] pBindInfos)
		{
			Result result;
			unsafe {
				var arraypBindInfos = pBindInfos == null ? IntPtr.Zero : Marshal.AllocHGlobal (pBindInfos.Length*sizeof (Interop.BindAccelerationStructureMemoryInfoNv));
				var lenpBindInfos = pBindInfos == null ? 0 : pBindInfos.Length;
				if (pBindInfos != null)
					for (int i = 0; i < pBindInfos.Length; i++)
						((Interop.BindAccelerationStructureMemoryInfoNv*)arraypBindInfos) [i] = *(pBindInfos [i].m);
				result = Interop.NativeMethods.vkBindAccelerationStructureMemoryNV (this.m, (uint)lenpBindInfos, (Interop.BindAccelerationStructureMemoryInfoNv*)arraypBindInfos);
				Marshal.FreeHGlobal (arraypBindInfos);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void BindAccelerationStructureMemoryNV (BindAccelerationStructureMemoryInfoNv pBindInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkBindAccelerationStructureMemoryNV (this.m, (UInt32)(pBindInfo != null ? 1 : 0), pBindInfo != null ? pBindInfo.m : (Interop.BindAccelerationStructureMemoryInfoNv*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public IntPtr GetRayTracingShaderGroupHandlesNV (Pipeline pipeline, UInt32 firstGroup, UInt32 groupCount, UIntPtr dataSize)
		{
			Result result;
			IntPtr pData;
			unsafe {
				pData = new IntPtr ();
				result = Interop.NativeMethods.vkGetRayTracingShaderGroupHandlesNV (this.m, pipeline != null ? pipeline.m : default(UInt64), firstGroup, groupCount, dataSize, pData);
				if (result != Result.Success)
					throw new ResultException (result);

				return pData;
			}
		}

		public IntPtr GetAccelerationStructureHandleNV (AccelerationStructureNv accelerationStructure, UIntPtr dataSize)
		{
			Result result;
			IntPtr pData;
			unsafe {
				pData = new IntPtr ();
				result = Interop.NativeMethods.vkGetAccelerationStructureHandleNV (this.m, accelerationStructure != null ? accelerationStructure.m : default(UInt64), dataSize, pData);
				if (result != Result.Success)
					throw new ResultException (result);

				return pData;
			}
		}

		public Pipeline[] CreateRayTracingPipelinesNV (PipelineCache pipelineCache, RayTracingPipelineCreateInfoNv[] pCreateInfos, AllocationCallbacks pAllocator = null)
		{
			Result result;
			unsafe {
				if (pCreateInfos.Length <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (UInt64));
				var refpPipelines = new NativeReference ((int)(size * pCreateInfos.Length));
				var ptrpPipelines = refpPipelines.Handle;
				var arraypCreateInfos = pCreateInfos == null ? IntPtr.Zero : Marshal.AllocHGlobal (pCreateInfos.Length*sizeof (Interop.RayTracingPipelineCreateInfoNv));
				var lenpCreateInfos = pCreateInfos == null ? 0 : pCreateInfos.Length;
				if (pCreateInfos != null)
					for (int i = 0; i < pCreateInfos.Length; i++)
						((Interop.RayTracingPipelineCreateInfoNv*)arraypCreateInfos) [i] = *(pCreateInfos [i].m);
				result = Interop.NativeMethods.vkCreateRayTracingPipelinesNV (this.m, pipelineCache != null ? pipelineCache.m : default(UInt64), (uint)lenpCreateInfos, (Interop.RayTracingPipelineCreateInfoNv*)arraypCreateInfos, pAllocator != null ? pAllocator.m : null, (UInt64*)ptrpPipelines);
				Marshal.FreeHGlobal (arraypCreateInfos);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pCreateInfos.Length <= 0)
					return null;
				var arr = new Pipeline [pCreateInfos.Length];
				for (int i = 0; i < pCreateInfos.Length; i++) {
					arr [i] = new Pipeline ();
					arr [i].m = ((UInt64*)ptrpPipelines) [i];
				}

				return arr;
			}
		}

		public ImageDrmFormatModifierPropertiesExt GetImageDrmFormatModifierPropertiesEXT (Image image)
		{
			Result result;
			ImageDrmFormatModifierPropertiesExt pProperties;
			unsafe {
				pProperties = new ImageDrmFormatModifierPropertiesExt ();
				result = Interop.NativeMethods.vkGetImageDrmFormatModifierPropertiesEXT (this.m, image != null ? image.m : default(UInt64), pProperties != null ? pProperties.m : (Interop.ImageDrmFormatModifierPropertiesExt*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);

				return pProperties;
			}
		}

		public DeviceAddress GetBufferDeviceAddressEXT (BufferDeviceAddressInfoExt pInfo)
		{
			unsafe {
				return Interop.NativeMethods.vkGetBufferDeviceAddressEXT (this.m, pInfo != null ? pInfo.m : (Interop.BufferDeviceAddressInfoExt*)default(IntPtr));
			}
		}

		public UInt32 GetImageViewHandleNVX (ImageViewHandleInfoNvx pInfo)
		{
			unsafe {
				return Interop.NativeMethods.vkGetImageViewHandleNVX (this.m, pInfo != null ? pInfo.m : (Interop.ImageViewHandleInfoNvx*)default(IntPtr));
			}
		}

		public DeviceGroupPresentModeFlagsKhr GetGroupSurfacePresentModes2EXT (PhysicalDeviceSurfaceInfo2Khr pSurfaceInfo)
		{
			Result result;
			DeviceGroupPresentModeFlagsKhr pModes;
			unsafe {
				pModes = new DeviceGroupPresentModeFlagsKhr ();
				result = Interop.NativeMethods.vkGetDeviceGroupSurfacePresentModes2EXT (this.m, pSurfaceInfo != null ? pSurfaceInfo.m : (Interop.PhysicalDeviceSurfaceInfo2Khr*)default(IntPtr), &pModes);
				if (result != Result.Success)
					throw new ResultException (result);

				return pModes;
			}
		}

		public void AcquireFullScreenExclusiveModeEXT (SwapchainKhr swapchain)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkAcquireFullScreenExclusiveModeEXT (this.m, swapchain != null ? swapchain.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void ReleaseFullScreenExclusiveModeEXT (SwapchainKhr swapchain)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkReleaseFullScreenExclusiveModeEXT (this.m, swapchain != null ? swapchain.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void InitializePerformanceApiINTEL (InitializePerformanceApiInfoIntel pInitializeInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkInitializePerformanceApiINTEL (this.m, pInitializeInfo != null ? pInitializeInfo.m : (Interop.InitializePerformanceApiInfoIntel*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void UninitializePerformanceApiINTEL ()
		{
			unsafe {
				Interop.NativeMethods.vkUninitializePerformanceApiINTEL (this.m);
			}
		}

		public PerformanceConfigurationIntel AcquirePerformanceConfigurationINTEL (PerformanceConfigurationAcquireInfoIntel pAcquireInfo)
		{
			Result result;
			PerformanceConfigurationIntel pConfiguration;
			unsafe {
				pConfiguration = new PerformanceConfigurationIntel ();

				fixed (UInt64* ptrpConfiguration = &pConfiguration.m) {
					result = Interop.NativeMethods.vkAcquirePerformanceConfigurationINTEL (this.m, pAcquireInfo != null ? pAcquireInfo.m : (Interop.PerformanceConfigurationAcquireInfoIntel*)default(IntPtr), ptrpConfiguration);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pConfiguration;
			}
		}

		public void ReleasePerformanceConfigurationINTEL (PerformanceConfigurationIntel configuration)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkReleasePerformanceConfigurationINTEL (this.m, configuration != null ? configuration.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public PerformanceValueIntel GetPerformanceParameterINTEL (PerformanceParameterTypeIntel parameter)
		{
			Result result;
			PerformanceValueIntel pValue;
			unsafe {
				pValue = new PerformanceValueIntel ();
				result = Interop.NativeMethods.vkGetPerformanceParameterINTEL (this.m, parameter, pValue != null ? pValue.m : (Interop.PerformanceValueIntel*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);

				return pValue;
			}
		}
	}

	public partial class Queue : IMarshalling
	{
		internal Queue() {}

		internal IntPtr m;

		IntPtr IMarshalling.Handle {
			get {
				return m;
			}
		}

		public void Submit (SubmitInfo[] pSubmits, Fence fence = null)
		{
			Result result;
			unsafe {
				var arraypSubmits = pSubmits == null ? IntPtr.Zero : Marshal.AllocHGlobal (pSubmits.Length*sizeof (Interop.SubmitInfo));
				var lenpSubmits = pSubmits == null ? 0 : pSubmits.Length;
				if (pSubmits != null)
					for (int i = 0; i < pSubmits.Length; i++)
						((Interop.SubmitInfo*)arraypSubmits) [i] = *(pSubmits [i].m);
				result = Interop.NativeMethods.vkQueueSubmit (this.m, (uint)lenpSubmits, (Interop.SubmitInfo*)arraypSubmits, fence != null ? fence.m : default(UInt64));
				Marshal.FreeHGlobal (arraypSubmits);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void Submit (SubmitInfo pSubmit, Fence fence = null)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkQueueSubmit (this.m, (UInt32)(pSubmit != null ? 1 : 0), pSubmit != null ? pSubmit.m : (Interop.SubmitInfo*)default(IntPtr), fence != null ? fence.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void WaitIdle ()
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkQueueWaitIdle (this.m);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void BindSparse (BindSparseInfo[] pBindInfo, Fence fence = null)
		{
			Result result;
			unsafe {
				var arraypBindInfo = pBindInfo == null ? IntPtr.Zero : Marshal.AllocHGlobal (pBindInfo.Length*sizeof (Interop.BindSparseInfo));
				var lenpBindInfo = pBindInfo == null ? 0 : pBindInfo.Length;
				if (pBindInfo != null)
					for (int i = 0; i < pBindInfo.Length; i++)
						((Interop.BindSparseInfo*)arraypBindInfo) [i] = *(pBindInfo [i].m);
				result = Interop.NativeMethods.vkQueueBindSparse (this.m, (uint)lenpBindInfo, (Interop.BindSparseInfo*)arraypBindInfo, fence != null ? fence.m : default(UInt64));
				Marshal.FreeHGlobal (arraypBindInfo);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void BindSparse (BindSparseInfo pBindInfo, Fence fence = null)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkQueueBindSparse (this.m, (UInt32)(pBindInfo != null ? 1 : 0), pBindInfo != null ? pBindInfo.m : (Interop.BindSparseInfo*)default(IntPtr), fence != null ? fence.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void PresentKHR (PresentInfoKhr pPresentInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkQueuePresentKHR (this.m, pPresentInfo != null ? pPresentInfo.m : (Interop.PresentInfoKhr*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public int SignalReleaseImageANDROID (UInt32 waitSemaphoreCount, Semaphore pWaitSemaphores, Image image)
		{
			Result result;
			int pNativeFenceFd;
			unsafe {
				fixed (UInt64* ptrpWaitSemaphores = &pWaitSemaphores.m) {
					pNativeFenceFd = new int ();
					result = Interop.NativeMethods.vkQueueSignalReleaseImageANDROID (this.m, waitSemaphoreCount, ptrpWaitSemaphores, image != null ? image.m : default(UInt64), &pNativeFenceFd);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pNativeFenceFd;
			}
		}

		public void BeginDebugUtilsLabelEXT (DebugUtilsLabelExt pLabelInfo)
		{
			unsafe {
				Interop.NativeMethods.vkQueueBeginDebugUtilsLabelEXT (this.m, pLabelInfo != null ? pLabelInfo.m : (Interop.DebugUtilsLabelExt*)default(IntPtr));
			}
		}

		public void EndDebugUtilsLabelEXT ()
		{
			unsafe {
				Interop.NativeMethods.vkQueueEndDebugUtilsLabelEXT (this.m);
			}
		}

		public void InsertDebugUtilsLabelEXT (DebugUtilsLabelExt pLabelInfo)
		{
			unsafe {
				Interop.NativeMethods.vkQueueInsertDebugUtilsLabelEXT (this.m, pLabelInfo != null ? pLabelInfo.m : (Interop.DebugUtilsLabelExt*)default(IntPtr));
			}
		}

		public CheckpointDataNv[] GetCheckpointDataNV ()
		{
			unsafe {
				UInt32 pCheckpointDataCount;
				Interop.NativeMethods.vkGetQueueCheckpointDataNV (this.m, &pCheckpointDataCount, null);
				if (pCheckpointDataCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.CheckpointDataNv));
				var refpCheckpointData = new NativeReference ((int)(size * pCheckpointDataCount));
				var ptrpCheckpointData = refpCheckpointData.Handle;
				Interop.NativeMethods.vkGetQueueCheckpointDataNV (this.m, &pCheckpointDataCount, (Interop.CheckpointDataNv*)ptrpCheckpointData);

				if (pCheckpointDataCount <= 0)
					return null;
				var arr = new CheckpointDataNv [pCheckpointDataCount];
				for (int i = 0; i < pCheckpointDataCount; i++) {
					arr [i] = new CheckpointDataNv (new NativePointer (refpCheckpointData, (IntPtr)(&((Interop.CheckpointDataNv*)ptrpCheckpointData) [i])));
				}

				return arr;
			}
		}

		public void SetPerformanceConfigurationINTEL (PerformanceConfigurationIntel configuration)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkQueueSetPerformanceConfigurationINTEL (this.m, configuration != null ? configuration.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}
	}

	public partial class CommandBuffer : IMarshalling
	{
		internal CommandBuffer() {}

		internal IntPtr m;

		IntPtr IMarshalling.Handle {
			get {
				return m;
			}
		}

		public void Begin (CommandBufferBeginInfo pBeginInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkBeginCommandBuffer (this.m, pBeginInfo != null ? pBeginInfo.m : (Interop.CommandBufferBeginInfo*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void End ()
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkEndCommandBuffer (this.m);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void Reset (CommandBufferResetFlags flags = (CommandBufferResetFlags)0)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkResetCommandBuffer (this.m, flags);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void CmdBindPipeline (PipelineBindPoint pipelineBindPoint, Pipeline pipeline)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBindPipeline (this.m, pipelineBindPoint, pipeline != null ? pipeline.m : default(UInt64));
			}
		}

		public void CmdSetViewport (UInt32 firstViewport, Viewport[] pViewports)
		{
			unsafe {
				var arraypViewports = pViewports == null ? IntPtr.Zero : Marshal.AllocHGlobal (pViewports.Length*sizeof (Viewport));
				var lenpViewports = pViewports == null ? 0 : pViewports.Length;
				if (pViewports != null)
					for (int i = 0; i < pViewports.Length; i++)
						((Viewport*)arraypViewports) [i] = (pViewports [i]);
				Interop.NativeMethods.vkCmdSetViewport (this.m, firstViewport, (uint)lenpViewports, (Viewport*)arraypViewports);
				Marshal.FreeHGlobal (arraypViewports);
			}
		}

		public void CmdSetViewport (UInt32 firstViewport, Viewport? pViewport)
		{
			unsafe {
				Viewport valpViewport = pViewport ?? default(Viewport);
				Viewport* ptrpViewport = pViewport != null ? &valpViewport : (Viewport*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdSetViewport (this.m, firstViewport, (UInt32)(pViewport != null ? 1 : 0), ptrpViewport);
			}
		}

		public void CmdSetScissor (UInt32 firstScissor, Rect2D[] pScissors)
		{
			unsafe {
				var arraypScissors = pScissors == null ? IntPtr.Zero : Marshal.AllocHGlobal (pScissors.Length*sizeof (Rect2D));
				var lenpScissors = pScissors == null ? 0 : pScissors.Length;
				if (pScissors != null)
					for (int i = 0; i < pScissors.Length; i++)
						((Rect2D*)arraypScissors) [i] = (pScissors [i]);
				Interop.NativeMethods.vkCmdSetScissor (this.m, firstScissor, (uint)lenpScissors, (Rect2D*)arraypScissors);
				Marshal.FreeHGlobal (arraypScissors);
			}
		}

		public void CmdSetScissor (UInt32 firstScissor, Rect2D? pScissor)
		{
			unsafe {
				Rect2D valpScissor = pScissor ?? default(Rect2D);
				Rect2D* ptrpScissor = pScissor != null ? &valpScissor : (Rect2D*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdSetScissor (this.m, firstScissor, (UInt32)(pScissor != null ? 1 : 0), ptrpScissor);
			}
		}

		public void CmdSetLineWidth (float lineWidth)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetLineWidth (this.m, lineWidth);
			}
		}

		public void CmdSetDepthBias (float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetDepthBias (this.m, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
			}
		}

		public void CmdSetBlendConstants (float blendConstants)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetBlendConstants (this.m, blendConstants);
			}
		}

		public void CmdSetDepthBounds (float minDepthBounds, float maxDepthBounds)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetDepthBounds (this.m, minDepthBounds, maxDepthBounds);
			}
		}

		public void CmdSetStencilCompareMask (StencilFaceFlags faceMask, UInt32 compareMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetStencilCompareMask (this.m, faceMask, compareMask);
			}
		}

		public void CmdSetStencilWriteMask (StencilFaceFlags faceMask, UInt32 writeMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetStencilWriteMask (this.m, faceMask, writeMask);
			}
		}

		public void CmdSetStencilReference (StencilFaceFlags faceMask, UInt32 reference)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetStencilReference (this.m, faceMask, reference);
			}
		}

		public void CmdBindDescriptorSets (PipelineBindPoint pipelineBindPoint, PipelineLayout layout, UInt32 firstSet, DescriptorSet[] pDescriptorSets, UInt32[] pDynamicOffsets)
		{
			unsafe {
				var arraypDescriptorSets = pDescriptorSets == null ? IntPtr.Zero : Marshal.AllocHGlobal (pDescriptorSets.Length*sizeof (UInt64));
				var lenpDescriptorSets = pDescriptorSets == null ? 0 : pDescriptorSets.Length;
				if (pDescriptorSets != null)
					for (int i = 0; i < pDescriptorSets.Length; i++)
						((UInt64*)arraypDescriptorSets) [i] = (pDescriptorSets [i].m);
				var arraypDynamicOffsets = pDynamicOffsets == null ? IntPtr.Zero : Marshal.AllocHGlobal (pDynamicOffsets.Length*sizeof (UInt32));
				var lenpDynamicOffsets = pDynamicOffsets == null ? 0 : pDynamicOffsets.Length;
				if (pDynamicOffsets != null)
					for (int i = 0; i < pDynamicOffsets.Length; i++)
						((UInt32*)arraypDynamicOffsets) [i] = (pDynamicOffsets [i]);
				Interop.NativeMethods.vkCmdBindDescriptorSets (this.m, pipelineBindPoint, layout != null ? layout.m : default(UInt64), firstSet, (uint)lenpDescriptorSets, (UInt64*)arraypDescriptorSets, (uint)lenpDynamicOffsets, (UInt32*)arraypDynamicOffsets);
				Marshal.FreeHGlobal (arraypDescriptorSets);
				Marshal.FreeHGlobal (arraypDynamicOffsets);
			}
		}

		public void CmdBindDescriptorSet (PipelineBindPoint pipelineBindPoint, PipelineLayout layout, UInt32 firstSet, DescriptorSet pDescriptorSet, UInt32? pDynamicOffset)
		{
			unsafe {
				fixed (UInt64* ptrpDescriptorSet = &pDescriptorSet.m) {
					UInt32 valpDynamicOffset = pDynamicOffset ?? default(UInt32);
					UInt32* ptrpDynamicOffset = pDynamicOffset != null ? &valpDynamicOffset : (UInt32*)IntPtr.Zero;
					Interop.NativeMethods.vkCmdBindDescriptorSets (this.m, pipelineBindPoint, layout != null ? layout.m : default(UInt64), firstSet, (UInt32)(pDescriptorSet != null ? 1 : 0), ptrpDescriptorSet, (UInt32)(pDynamicOffset != null ? 1 : 0), ptrpDynamicOffset);
				}
			}
		}

		public void CmdBindIndexBuffer (Buffer buffer, DeviceSize offset, IndexType indexType)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBindIndexBuffer (this.m, buffer != null ? buffer.m : default(UInt64), offset, indexType);
			}
		}

		public void CmdBindVertexBuffers (UInt32 firstBinding, Buffer[] pBuffers, DeviceSize[] pOffsets)
		{
			unsafe {
				var arraypBuffers = pBuffers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pBuffers.Length*sizeof (UInt64));
				var lenpBuffers = pBuffers == null ? 0 : pBuffers.Length;
				if (pBuffers != null)
					for (int i = 0; i < pBuffers.Length; i++)
						((UInt64*)arraypBuffers) [i] = (pBuffers [i].m);
				var arraypOffsets = pOffsets == null ? IntPtr.Zero : Marshal.AllocHGlobal (pOffsets.Length*sizeof (DeviceSize));
				var lenpOffsets = pOffsets == null ? 0 : pOffsets.Length;
				if (pOffsets != null)
					for (int i = 0; i < pOffsets.Length; i++)
						((DeviceSize*)arraypOffsets) [i] = (pOffsets [i]);
				Interop.NativeMethods.vkCmdBindVertexBuffers (this.m, firstBinding, (uint)lenpOffsets, (UInt64*)arraypBuffers, (DeviceSize*)arraypOffsets);
				Marshal.FreeHGlobal (arraypBuffers);
				Marshal.FreeHGlobal (arraypOffsets);
			}
		}

		public void CmdBindVertexBuffer (UInt32 firstBinding, Buffer pBuffer, DeviceSize pOffset)
		{
			unsafe {
				fixed (UInt64* ptrpBuffer = &pBuffer.m) {
					Interop.NativeMethods.vkCmdBindVertexBuffers (this.m, firstBinding, (UInt32)(pOffset != null ? 1 : 0), ptrpBuffer, &pOffset);
				}
			}
		}

		public void CmdDraw (UInt32 vertexCount, UInt32 instanceCount, UInt32 firstVertex, UInt32 firstInstance)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDraw (this.m, vertexCount, instanceCount, firstVertex, firstInstance);
			}
		}

		public void CmdDrawIndexed (UInt32 indexCount, UInt32 instanceCount, UInt32 firstIndex, Int32 vertexOffset, UInt32 firstInstance)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndexed (this.m, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
			}
		}

		public void CmdDrawIndirect (Buffer buffer, DeviceSize offset, UInt32 drawCount, UInt32 stride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndirect (this.m, buffer != null ? buffer.m : default(UInt64), offset, drawCount, stride);
			}
		}

		public void CmdDrawIndexedIndirect (Buffer buffer, DeviceSize offset, UInt32 drawCount, UInt32 stride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndexedIndirect (this.m, buffer != null ? buffer.m : default(UInt64), offset, drawCount, stride);
			}
		}

		public void CmdDispatch (UInt32 groupCountX, UInt32 groupCountY, UInt32 groupCountZ)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDispatch (this.m, groupCountX, groupCountY, groupCountZ);
			}
		}

		public void CmdDispatchIndirect (Buffer buffer, DeviceSize offset)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDispatchIndirect (this.m, buffer != null ? buffer.m : default(UInt64), offset);
			}
		}

		public void CmdCopyBuffer (Buffer srcBuffer, Buffer dstBuffer, BufferCopy[] pRegions)
		{
			unsafe {
				var arraypRegions = pRegions == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRegions.Length*sizeof (BufferCopy));
				var lenpRegions = pRegions == null ? 0 : pRegions.Length;
				if (pRegions != null)
					for (int i = 0; i < pRegions.Length; i++)
						((BufferCopy*)arraypRegions) [i] = (pRegions [i]);
				Interop.NativeMethods.vkCmdCopyBuffer (this.m, srcBuffer != null ? srcBuffer.m : default(UInt64), dstBuffer != null ? dstBuffer.m : default(UInt64), (uint)lenpRegions, (BufferCopy*)arraypRegions);
				Marshal.FreeHGlobal (arraypRegions);
			}
		}

		public void CmdCopyBuffer (Buffer srcBuffer, Buffer dstBuffer, BufferCopy? pRegion)
		{
			unsafe {
				BufferCopy valpRegion = pRegion ?? default(BufferCopy);
				BufferCopy* ptrpRegion = pRegion != null ? &valpRegion : (BufferCopy*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdCopyBuffer (this.m, srcBuffer != null ? srcBuffer.m : default(UInt64), dstBuffer != null ? dstBuffer.m : default(UInt64), (UInt32)(pRegion != null ? 1 : 0), ptrpRegion);
			}
		}

		public void CmdCopyImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, ImageCopy[] pRegions)
		{
			unsafe {
				var arraypRegions = pRegions == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRegions.Length*sizeof (ImageCopy));
				var lenpRegions = pRegions == null ? 0 : pRegions.Length;
				if (pRegions != null)
					for (int i = 0; i < pRegions.Length; i++)
						((ImageCopy*)arraypRegions) [i] = (pRegions [i]);
				Interop.NativeMethods.vkCmdCopyImage (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (uint)lenpRegions, (ImageCopy*)arraypRegions);
				Marshal.FreeHGlobal (arraypRegions);
			}
		}

		public void CmdCopyImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, ImageCopy? pRegion)
		{
			unsafe {
				ImageCopy valpRegion = pRegion ?? default(ImageCopy);
				ImageCopy* ptrpRegion = pRegion != null ? &valpRegion : (ImageCopy*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdCopyImage (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (UInt32)(pRegion != null ? 1 : 0), ptrpRegion);
			}
		}

		public void CmdBlitImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, ImageBlit[] pRegions, Filter filter)
		{
			unsafe {
				var arraypRegions = pRegions == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRegions.Length*sizeof (Interop.ImageBlit));
				var lenpRegions = pRegions == null ? 0 : pRegions.Length;
				if (pRegions != null)
					for (int i = 0; i < pRegions.Length; i++)
						((Interop.ImageBlit*)arraypRegions) [i] = *(pRegions [i].m);
				Interop.NativeMethods.vkCmdBlitImage (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (uint)lenpRegions, (Interop.ImageBlit*)arraypRegions, filter);
				Marshal.FreeHGlobal (arraypRegions);
			}
		}

		public void CmdBlitImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, ImageBlit pRegion, Filter filter)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBlitImage (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (UInt32)(pRegion != null ? 1 : 0), pRegion != null ? pRegion.m : (Interop.ImageBlit*)default(IntPtr), filter);
			}
		}

		public void CmdCopyBufferToImage (Buffer srcBuffer, Image dstImage, ImageLayout dstImageLayout, BufferImageCopy[] pRegions)
		{
			unsafe {
				var arraypRegions = pRegions == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRegions.Length*sizeof (BufferImageCopy));
				var lenpRegions = pRegions == null ? 0 : pRegions.Length;
				if (pRegions != null)
					for (int i = 0; i < pRegions.Length; i++)
						((BufferImageCopy*)arraypRegions) [i] = (pRegions [i]);
				Interop.NativeMethods.vkCmdCopyBufferToImage (this.m, srcBuffer != null ? srcBuffer.m : default(UInt64), dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (uint)lenpRegions, (BufferImageCopy*)arraypRegions);
				Marshal.FreeHGlobal (arraypRegions);
			}
		}

		public void CmdCopyBufferToImage (Buffer srcBuffer, Image dstImage, ImageLayout dstImageLayout, BufferImageCopy? pRegion)
		{
			unsafe {
				BufferImageCopy valpRegion = pRegion ?? default(BufferImageCopy);
				BufferImageCopy* ptrpRegion = pRegion != null ? &valpRegion : (BufferImageCopy*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdCopyBufferToImage (this.m, srcBuffer != null ? srcBuffer.m : default(UInt64), dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (UInt32)(pRegion != null ? 1 : 0), ptrpRegion);
			}
		}

		public void CmdCopyImageToBuffer (Image srcImage, ImageLayout srcImageLayout, Buffer dstBuffer, BufferImageCopy[] pRegions)
		{
			unsafe {
				var arraypRegions = pRegions == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRegions.Length*sizeof (BufferImageCopy));
				var lenpRegions = pRegions == null ? 0 : pRegions.Length;
				if (pRegions != null)
					for (int i = 0; i < pRegions.Length; i++)
						((BufferImageCopy*)arraypRegions) [i] = (pRegions [i]);
				Interop.NativeMethods.vkCmdCopyImageToBuffer (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstBuffer != null ? dstBuffer.m : default(UInt64), (uint)lenpRegions, (BufferImageCopy*)arraypRegions);
				Marshal.FreeHGlobal (arraypRegions);
			}
		}

		public void CmdCopyImageToBuffer (Image srcImage, ImageLayout srcImageLayout, Buffer dstBuffer, BufferImageCopy? pRegion)
		{
			unsafe {
				BufferImageCopy valpRegion = pRegion ?? default(BufferImageCopy);
				BufferImageCopy* ptrpRegion = pRegion != null ? &valpRegion : (BufferImageCopy*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdCopyImageToBuffer (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstBuffer != null ? dstBuffer.m : default(UInt64), (UInt32)(pRegion != null ? 1 : 0), ptrpRegion);
			}
		}

		public void CmdUpdateBuffer (Buffer dstBuffer, DeviceSize dstOffset, DeviceSize dataSize, IntPtr pData)
		{
			unsafe {
				Interop.NativeMethods.vkCmdUpdateBuffer (this.m, dstBuffer != null ? dstBuffer.m : default(UInt64), dstOffset, dataSize, pData);
			}
		}

		public void CmdFillBuffer (Buffer dstBuffer, DeviceSize dstOffset, DeviceSize size, UInt32 data)
		{
			unsafe {
				Interop.NativeMethods.vkCmdFillBuffer (this.m, dstBuffer != null ? dstBuffer.m : default(UInt64), dstOffset, size, data);
			}
		}

		public void CmdClearColorImage (Image image, ImageLayout imageLayout, ClearColorValue pColor, ImageSubresourceRange[] pRanges)
		{
			unsafe {
				var arraypRanges = pRanges == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRanges.Length*sizeof (ImageSubresourceRange));
				var lenpRanges = pRanges == null ? 0 : pRanges.Length;
				if (pRanges != null)
					for (int i = 0; i < pRanges.Length; i++)
						((ImageSubresourceRange*)arraypRanges) [i] = (pRanges [i]);
				Interop.NativeMethods.vkCmdClearColorImage (this.m, image != null ? image.m : default(UInt64), imageLayout, pColor != null ? pColor.m : (Interop.ClearColorValue*)default(IntPtr), (uint)lenpRanges, (ImageSubresourceRange*)arraypRanges);
				Marshal.FreeHGlobal (arraypRanges);
			}
		}

		public void CmdClearColorImage (Image image, ImageLayout imageLayout, ClearColorValue pColor, ImageSubresourceRange? pRange)
		{
			unsafe {
				ImageSubresourceRange valpRange = pRange ?? default(ImageSubresourceRange);
				ImageSubresourceRange* ptrpRange = pRange != null ? &valpRange : (ImageSubresourceRange*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdClearColorImage (this.m, image != null ? image.m : default(UInt64), imageLayout, pColor != null ? pColor.m : (Interop.ClearColorValue*)default(IntPtr), (UInt32)(pRange != null ? 1 : 0), ptrpRange);
			}
		}

		public void CmdClearDepthStencilImage (Image image, ImageLayout imageLayout, ClearDepthStencilValue pDepthStencil, ImageSubresourceRange[] pRanges)
		{
			unsafe {
				var arraypRanges = pRanges == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRanges.Length*sizeof (ImageSubresourceRange));
				var lenpRanges = pRanges == null ? 0 : pRanges.Length;
				if (pRanges != null)
					for (int i = 0; i < pRanges.Length; i++)
						((ImageSubresourceRange*)arraypRanges) [i] = (pRanges [i]);
				Interop.NativeMethods.vkCmdClearDepthStencilImage (this.m, image != null ? image.m : default(UInt64), imageLayout, &pDepthStencil, (uint)lenpRanges, (ImageSubresourceRange*)arraypRanges);
				Marshal.FreeHGlobal (arraypRanges);
			}
		}

		public void CmdClearDepthStencilImage (Image image, ImageLayout imageLayout, ClearDepthStencilValue pDepthStencil, ImageSubresourceRange? pRange)
		{
			unsafe {
				ImageSubresourceRange valpRange = pRange ?? default(ImageSubresourceRange);
				ImageSubresourceRange* ptrpRange = pRange != null ? &valpRange : (ImageSubresourceRange*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdClearDepthStencilImage (this.m, image != null ? image.m : default(UInt64), imageLayout, &pDepthStencil, (UInt32)(pRange != null ? 1 : 0), ptrpRange);
			}
		}

		public void CmdClearAttachments (ClearAttachment[] pAttachments, ClearRect[] pRects)
		{
			unsafe {
				var arraypAttachments = pAttachments == null ? IntPtr.Zero : Marshal.AllocHGlobal (pAttachments.Length*sizeof (Interop.ClearAttachment));
				var lenpAttachments = pAttachments == null ? 0 : pAttachments.Length;
				if (pAttachments != null)
					for (int i = 0; i < pAttachments.Length; i++)
						((Interop.ClearAttachment*)arraypAttachments) [i] = *(pAttachments [i].m);
				var arraypRects = pRects == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRects.Length*sizeof (ClearRect));
				var lenpRects = pRects == null ? 0 : pRects.Length;
				if (pRects != null)
					for (int i = 0; i < pRects.Length; i++)
						((ClearRect*)arraypRects) [i] = (pRects [i]);
				Interop.NativeMethods.vkCmdClearAttachments (this.m, (uint)lenpAttachments, (Interop.ClearAttachment*)arraypAttachments, (uint)lenpRects, (ClearRect*)arraypRects);
				Marshal.FreeHGlobal (arraypAttachments);
				Marshal.FreeHGlobal (arraypRects);
			}
		}

		public void CmdClearAttachment (ClearAttachment pAttachment, ClearRect? pRect)
		{
			unsafe {
				ClearRect valpRect = pRect ?? default(ClearRect);
				ClearRect* ptrpRect = pRect != null ? &valpRect : (ClearRect*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdClearAttachments (this.m, (UInt32)(pAttachment != null ? 1 : 0), pAttachment != null ? pAttachment.m : (Interop.ClearAttachment*)default(IntPtr), (UInt32)(pRect != null ? 1 : 0), ptrpRect);
			}
		}

		public void CmdResolveImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, ImageResolve[] pRegions)
		{
			unsafe {
				var arraypRegions = pRegions == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRegions.Length*sizeof (ImageResolve));
				var lenpRegions = pRegions == null ? 0 : pRegions.Length;
				if (pRegions != null)
					for (int i = 0; i < pRegions.Length; i++)
						((ImageResolve*)arraypRegions) [i] = (pRegions [i]);
				Interop.NativeMethods.vkCmdResolveImage (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (uint)lenpRegions, (ImageResolve*)arraypRegions);
				Marshal.FreeHGlobal (arraypRegions);
			}
		}

		public void CmdResolveImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, ImageResolve? pRegion)
		{
			unsafe {
				ImageResolve valpRegion = pRegion ?? default(ImageResolve);
				ImageResolve* ptrpRegion = pRegion != null ? &valpRegion : (ImageResolve*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdResolveImage (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (UInt32)(pRegion != null ? 1 : 0), ptrpRegion);
			}
		}

		public void CmdSetEvent (Event @event, PipelineStageFlags stageMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetEvent (this.m, @event != null ? @event.m : default(UInt64), stageMask);
			}
		}

		public void CmdResetEvent (Event @event, PipelineStageFlags stageMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdResetEvent (this.m, @event != null ? @event.m : default(UInt64), stageMask);
			}
		}

		public void CmdWaitEvents (Event[] pEvents, PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, MemoryBarrier[] pMemoryBarriers, BufferMemoryBarrier[] pBufferMemoryBarriers, ImageMemoryBarrier[] pImageMemoryBarriers)
		{
			unsafe {
				var arraypEvents = pEvents == null ? IntPtr.Zero : Marshal.AllocHGlobal (pEvents.Length*sizeof (UInt64));
				var lenpEvents = pEvents == null ? 0 : pEvents.Length;
				if (pEvents != null)
					for (int i = 0; i < pEvents.Length; i++)
						((UInt64*)arraypEvents) [i] = (pEvents [i].m);
				var arraypMemoryBarriers = pMemoryBarriers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pMemoryBarriers.Length*sizeof (Interop.MemoryBarrier));
				var lenpMemoryBarriers = pMemoryBarriers == null ? 0 : pMemoryBarriers.Length;
				if (pMemoryBarriers != null)
					for (int i = 0; i < pMemoryBarriers.Length; i++)
						((Interop.MemoryBarrier*)arraypMemoryBarriers) [i] = *(pMemoryBarriers [i].m);
				var arraypBufferMemoryBarriers = pBufferMemoryBarriers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pBufferMemoryBarriers.Length*sizeof (Interop.BufferMemoryBarrier));
				var lenpBufferMemoryBarriers = pBufferMemoryBarriers == null ? 0 : pBufferMemoryBarriers.Length;
				if (pBufferMemoryBarriers != null)
					for (int i = 0; i < pBufferMemoryBarriers.Length; i++)
						((Interop.BufferMemoryBarrier*)arraypBufferMemoryBarriers) [i] = *(pBufferMemoryBarriers [i].m);
				var arraypImageMemoryBarriers = pImageMemoryBarriers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pImageMemoryBarriers.Length*sizeof (Interop.ImageMemoryBarrier));
				var lenpImageMemoryBarriers = pImageMemoryBarriers == null ? 0 : pImageMemoryBarriers.Length;
				if (pImageMemoryBarriers != null)
					for (int i = 0; i < pImageMemoryBarriers.Length; i++)
						((Interop.ImageMemoryBarrier*)arraypImageMemoryBarriers) [i] = *(pImageMemoryBarriers [i].m);
				Interop.NativeMethods.vkCmdWaitEvents (this.m, (uint)lenpEvents, (UInt64*)arraypEvents, srcStageMask, dstStageMask, (uint)lenpMemoryBarriers, (Interop.MemoryBarrier*)arraypMemoryBarriers, (uint)lenpBufferMemoryBarriers, (Interop.BufferMemoryBarrier*)arraypBufferMemoryBarriers, (uint)lenpImageMemoryBarriers, (Interop.ImageMemoryBarrier*)arraypImageMemoryBarriers);
				Marshal.FreeHGlobal (arraypEvents);
				Marshal.FreeHGlobal (arraypMemoryBarriers);
				Marshal.FreeHGlobal (arraypBufferMemoryBarriers);
				Marshal.FreeHGlobal (arraypImageMemoryBarriers);
			}
		}

		public void CmdWaitEvent (Event pEvent, PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, MemoryBarrier pMemoryBarrier, BufferMemoryBarrier pBufferMemoryBarrier, ImageMemoryBarrier pImageMemoryBarrier)
		{
			unsafe {
				fixed (UInt64* ptrpEvent = &pEvent.m) {
					Interop.NativeMethods.vkCmdWaitEvents (this.m, (UInt32)(pEvent != null ? 1 : 0), ptrpEvent, srcStageMask, dstStageMask, (UInt32)(pMemoryBarrier != null ? 1 : 0), pMemoryBarrier != null ? pMemoryBarrier.m : (Interop.MemoryBarrier*)default(IntPtr), (UInt32)(pBufferMemoryBarrier != null ? 1 : 0), pBufferMemoryBarrier != null ? pBufferMemoryBarrier.m : (Interop.BufferMemoryBarrier*)default(IntPtr), (UInt32)(pImageMemoryBarrier != null ? 1 : 0), pImageMemoryBarrier != null ? pImageMemoryBarrier.m : (Interop.ImageMemoryBarrier*)default(IntPtr));
				}
			}
		}

		public void CmdPipelineBarrier (PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, DependencyFlags dependencyFlags, MemoryBarrier[] pMemoryBarriers, BufferMemoryBarrier[] pBufferMemoryBarriers, ImageMemoryBarrier[] pImageMemoryBarriers)
		{
			unsafe {
				var arraypMemoryBarriers = pMemoryBarriers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pMemoryBarriers.Length*sizeof (Interop.MemoryBarrier));
				var lenpMemoryBarriers = pMemoryBarriers == null ? 0 : pMemoryBarriers.Length;
				if (pMemoryBarriers != null)
					for (int i = 0; i < pMemoryBarriers.Length; i++)
						((Interop.MemoryBarrier*)arraypMemoryBarriers) [i] = *(pMemoryBarriers [i].m);
				var arraypBufferMemoryBarriers = pBufferMemoryBarriers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pBufferMemoryBarriers.Length*sizeof (Interop.BufferMemoryBarrier));
				var lenpBufferMemoryBarriers = pBufferMemoryBarriers == null ? 0 : pBufferMemoryBarriers.Length;
				if (pBufferMemoryBarriers != null)
					for (int i = 0; i < pBufferMemoryBarriers.Length; i++)
						((Interop.BufferMemoryBarrier*)arraypBufferMemoryBarriers) [i] = *(pBufferMemoryBarriers [i].m);
				var arraypImageMemoryBarriers = pImageMemoryBarriers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pImageMemoryBarriers.Length*sizeof (Interop.ImageMemoryBarrier));
				var lenpImageMemoryBarriers = pImageMemoryBarriers == null ? 0 : pImageMemoryBarriers.Length;
				if (pImageMemoryBarriers != null)
					for (int i = 0; i < pImageMemoryBarriers.Length; i++)
						((Interop.ImageMemoryBarrier*)arraypImageMemoryBarriers) [i] = *(pImageMemoryBarriers [i].m);
				Interop.NativeMethods.vkCmdPipelineBarrier (this.m, srcStageMask, dstStageMask, dependencyFlags, (uint)lenpMemoryBarriers, (Interop.MemoryBarrier*)arraypMemoryBarriers, (uint)lenpBufferMemoryBarriers, (Interop.BufferMemoryBarrier*)arraypBufferMemoryBarriers, (uint)lenpImageMemoryBarriers, (Interop.ImageMemoryBarrier*)arraypImageMemoryBarriers);
				Marshal.FreeHGlobal (arraypMemoryBarriers);
				Marshal.FreeHGlobal (arraypBufferMemoryBarriers);
				Marshal.FreeHGlobal (arraypImageMemoryBarriers);
			}
		}

		public void CmdPipelineBarrier (PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, DependencyFlags dependencyFlag, MemoryBarrier pMemoryBarrier, BufferMemoryBarrier pBufferMemoryBarrier, ImageMemoryBarrier pImageMemoryBarrier)
		{
			unsafe {
				Interop.NativeMethods.vkCmdPipelineBarrier (this.m, srcStageMask, dstStageMask, dependencyFlag, (UInt32)(pMemoryBarrier != null ? 1 : 0), pMemoryBarrier != null ? pMemoryBarrier.m : (Interop.MemoryBarrier*)default(IntPtr), (UInt32)(pBufferMemoryBarrier != null ? 1 : 0), pBufferMemoryBarrier != null ? pBufferMemoryBarrier.m : (Interop.BufferMemoryBarrier*)default(IntPtr), (UInt32)(pImageMemoryBarrier != null ? 1 : 0), pImageMemoryBarrier != null ? pImageMemoryBarrier.m : (Interop.ImageMemoryBarrier*)default(IntPtr));
			}
		}

		public void CmdBeginQuery (QueryPool queryPool, UInt32 query, QueryControlFlags flags = (QueryControlFlags)0)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBeginQuery (this.m, queryPool != null ? queryPool.m : default(UInt64), query, flags);
			}
		}

		public void CmdEndQuery (QueryPool queryPool, UInt32 query)
		{
			unsafe {
				Interop.NativeMethods.vkCmdEndQuery (this.m, queryPool != null ? queryPool.m : default(UInt64), query);
			}
		}

		public void CmdBeginConditionalRenderingEXT (ConditionalRenderingBeginInfoExt pConditionalRenderingBegin)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBeginConditionalRenderingEXT (this.m, pConditionalRenderingBegin != null ? pConditionalRenderingBegin.m : (Interop.ConditionalRenderingBeginInfoExt*)default(IntPtr));
			}
		}

		public void CmdEndConditionalRenderingEXT ()
		{
			unsafe {
				Interop.NativeMethods.vkCmdEndConditionalRenderingEXT (this.m);
			}
		}

		public void CmdResetQueryPool (QueryPool queryPool, UInt32 firstQuery, UInt32 queryCount)
		{
			unsafe {
				Interop.NativeMethods.vkCmdResetQueryPool (this.m, queryPool != null ? queryPool.m : default(UInt64), firstQuery, queryCount);
			}
		}

		public void CmdWriteTimestamp (PipelineStageFlags pipelineStage, QueryPool queryPool, UInt32 query)
		{
			unsafe {
				Interop.NativeMethods.vkCmdWriteTimestamp (this.m, pipelineStage, queryPool != null ? queryPool.m : default(UInt64), query);
			}
		}

		public void CmdCopyQueryPoolResults (QueryPool queryPool, UInt32 firstQuery, UInt32 queryCount, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize stride, QueryResultFlags flags = (QueryResultFlags)0)
		{
			unsafe {
				Interop.NativeMethods.vkCmdCopyQueryPoolResults (this.m, queryPool != null ? queryPool.m : default(UInt64), firstQuery, queryCount, dstBuffer != null ? dstBuffer.m : default(UInt64), dstOffset, stride, flags);
			}
		}

		public void CmdPushConstants (PipelineLayout layout, ShaderStageFlags stageFlags, UInt32 offset, UInt32 size, IntPtr pValues)
		{
			unsafe {
				Interop.NativeMethods.vkCmdPushConstants (this.m, layout != null ? layout.m : default(UInt64), stageFlags, offset, size, pValues);
			}
		}

		public void CmdBeginRenderPass (RenderPassBeginInfo pRenderPassBegin, SubpassContents contents)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBeginRenderPass (this.m, pRenderPassBegin != null ? pRenderPassBegin.m : (Interop.RenderPassBeginInfo*)default(IntPtr), contents);
			}
		}

		public void CmdNextSubpass (SubpassContents contents)
		{
			unsafe {
				Interop.NativeMethods.vkCmdNextSubpass (this.m, contents);
			}
		}

		public void CmdEndRenderPass ()
		{
			unsafe {
				Interop.NativeMethods.vkCmdEndRenderPass (this.m);
			}
		}

		public void CmdExecuteCommands (CommandBuffer[] pCommandBuffers)
		{
			unsafe {
				var arraypCommandBuffers = pCommandBuffers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pCommandBuffers.Length*sizeof (IntPtr));
				var lenpCommandBuffers = pCommandBuffers == null ? 0 : pCommandBuffers.Length;
				if (pCommandBuffers != null)
					for (int i = 0; i < pCommandBuffers.Length; i++)
						((IntPtr*)arraypCommandBuffers) [i] = (pCommandBuffers [i].m);
				Interop.NativeMethods.vkCmdExecuteCommands (this.m, (uint)lenpCommandBuffers, (IntPtr*)arraypCommandBuffers);
				Marshal.FreeHGlobal (arraypCommandBuffers);
			}
		}

		public void CmdExecuteCommand (CommandBuffer pCommandBuffer)
		{
			unsafe {
				fixed (IntPtr* ptrpCommandBuffer = &pCommandBuffer.m) {
					Interop.NativeMethods.vkCmdExecuteCommands (this.m, (UInt32)(pCommandBuffer != null ? 1 : 0), ptrpCommandBuffer);
				}
			}
		}

		public void CmdDebugMarkerBeginEXT (DebugMarkerMarkerInfoExt pMarkerInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDebugMarkerBeginEXT (this.m, pMarkerInfo != null ? pMarkerInfo.m : (Interop.DebugMarkerMarkerInfoExt*)default(IntPtr));
			}
		}

		public void CmdDebugMarkerEndEXT ()
		{
			unsafe {
				Interop.NativeMethods.vkCmdDebugMarkerEndEXT (this.m);
			}
		}

		public void CmdDebugMarkerInsertEXT (DebugMarkerMarkerInfoExt pMarkerInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDebugMarkerInsertEXT (this.m, pMarkerInfo != null ? pMarkerInfo.m : (Interop.DebugMarkerMarkerInfoExt*)default(IntPtr));
			}
		}

		public void CmdProcessCommandsNVX (CmdProcessCommandsInfoNvx pProcessCommandsInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdProcessCommandsNVX (this.m, pProcessCommandsInfo != null ? pProcessCommandsInfo.m : (Interop.CmdProcessCommandsInfoNvx*)default(IntPtr));
			}
		}

		public void CmdReserveSpaceForCommandsNVX (CmdReserveSpaceForCommandsInfoNvx pReserveSpaceInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdReserveSpaceForCommandsNVX (this.m, pReserveSpaceInfo != null ? pReserveSpaceInfo.m : (Interop.CmdReserveSpaceForCommandsInfoNvx*)default(IntPtr));
			}
		}

		public void CmdPushDescriptorSetKHR (PipelineBindPoint pipelineBindPoint, PipelineLayout layout, UInt32 set, WriteDescriptorSet[] pDescriptorWrites)
		{
			unsafe {
				var arraypDescriptorWrites = pDescriptorWrites == null ? IntPtr.Zero : Marshal.AllocHGlobal (pDescriptorWrites.Length*sizeof (Interop.WriteDescriptorSet));
				var lenpDescriptorWrites = pDescriptorWrites == null ? 0 : pDescriptorWrites.Length;
				if (pDescriptorWrites != null)
					for (int i = 0; i < pDescriptorWrites.Length; i++)
						((Interop.WriteDescriptorSet*)arraypDescriptorWrites) [i] = *(pDescriptorWrites [i].m);
				Interop.NativeMethods.vkCmdPushDescriptorSetKHR (this.m, pipelineBindPoint, layout != null ? layout.m : default(UInt64), set, (uint)lenpDescriptorWrites, (Interop.WriteDescriptorSet*)arraypDescriptorWrites);
				Marshal.FreeHGlobal (arraypDescriptorWrites);
			}
		}

		public void CmdPushDescriptorSetKHR (PipelineBindPoint pipelineBindPoint, PipelineLayout layout, UInt32 set, WriteDescriptorSet pDescriptorWrite)
		{
			unsafe {
				Interop.NativeMethods.vkCmdPushDescriptorSetKHR (this.m, pipelineBindPoint, layout != null ? layout.m : default(UInt64), set, (UInt32)(pDescriptorWrite != null ? 1 : 0), pDescriptorWrite != null ? pDescriptorWrite.m : (Interop.WriteDescriptorSet*)default(IntPtr));
			}
		}

		public void CmdSetDeviceMask (UInt32 deviceMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetDeviceMask (this.m, deviceMask);
			}
		}

		[Obsolete ("CmdSetDeviceMaskKHR is deprecated, please use CmdSetDeviceMask instead.")]
		public void CmdSetDeviceMaskKHR (UInt32 deviceMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetDeviceMaskKHR (this.m, deviceMask);
			}
		}

		public void CmdDispatchBase (UInt32 baseGroupX, UInt32 baseGroupY, UInt32 baseGroupZ, UInt32 groupCountX, UInt32 groupCountY, UInt32 groupCountZ)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDispatchBase (this.m, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
			}
		}

		[Obsolete ("CmdDispatchBaseKHR is deprecated, please use CmdDispatchBase instead.")]
		public void CmdDispatchBaseKHR (UInt32 baseGroupX, UInt32 baseGroupY, UInt32 baseGroupZ, UInt32 groupCountX, UInt32 groupCountY, UInt32 groupCountZ)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDispatchBaseKHR (this.m, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
			}
		}

		public void CmdPushDescriptorSetWithTemplateKHR (DescriptorUpdateTemplate descriptorUpdateTemplate, PipelineLayout layout, UInt32 set, IntPtr pData)
		{
			unsafe {
				Interop.NativeMethods.vkCmdPushDescriptorSetWithTemplateKHR (this.m, descriptorUpdateTemplate != null ? descriptorUpdateTemplate.m : default(UInt64), layout != null ? layout.m : default(UInt64), set, pData);
			}
		}

		public void CmdSetViewportWScalingNV (UInt32 firstViewport, ViewportWScalingNv[] pViewportWScalings)
		{
			unsafe {
				var arraypViewportWScalings = pViewportWScalings == null ? IntPtr.Zero : Marshal.AllocHGlobal (pViewportWScalings.Length*sizeof (ViewportWScalingNv));
				var lenpViewportWScalings = pViewportWScalings == null ? 0 : pViewportWScalings.Length;
				if (pViewportWScalings != null)
					for (int i = 0; i < pViewportWScalings.Length; i++)
						((ViewportWScalingNv*)arraypViewportWScalings) [i] = (pViewportWScalings [i]);
				Interop.NativeMethods.vkCmdSetViewportWScalingNV (this.m, firstViewport, (uint)lenpViewportWScalings, (ViewportWScalingNv*)arraypViewportWScalings);
				Marshal.FreeHGlobal (arraypViewportWScalings);
			}
		}

		public void CmdSetViewportWScalingNV (UInt32 firstViewport, ViewportWScalingNv? pViewportWScaling)
		{
			unsafe {
				ViewportWScalingNv valpViewportWScaling = pViewportWScaling ?? default(ViewportWScalingNv);
				ViewportWScalingNv* ptrpViewportWScaling = pViewportWScaling != null ? &valpViewportWScaling : (ViewportWScalingNv*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdSetViewportWScalingNV (this.m, firstViewport, (UInt32)(pViewportWScaling != null ? 1 : 0), ptrpViewportWScaling);
			}
		}

		public void CmdSetDiscardRectangleEXT (UInt32 firstDiscardRectangle, Rect2D[] pDiscardRectangles)
		{
			unsafe {
				var arraypDiscardRectangles = pDiscardRectangles == null ? IntPtr.Zero : Marshal.AllocHGlobal (pDiscardRectangles.Length*sizeof (Rect2D));
				var lenpDiscardRectangles = pDiscardRectangles == null ? 0 : pDiscardRectangles.Length;
				if (pDiscardRectangles != null)
					for (int i = 0; i < pDiscardRectangles.Length; i++)
						((Rect2D*)arraypDiscardRectangles) [i] = (pDiscardRectangles [i]);
				Interop.NativeMethods.vkCmdSetDiscardRectangleEXT (this.m, firstDiscardRectangle, (uint)lenpDiscardRectangles, (Rect2D*)arraypDiscardRectangles);
				Marshal.FreeHGlobal (arraypDiscardRectangles);
			}
		}

		public void CmdSetDiscardRectangleEXT (UInt32 firstDiscardRectangle, Rect2D? pDiscardRectangle)
		{
			unsafe {
				Rect2D valpDiscardRectangle = pDiscardRectangle ?? default(Rect2D);
				Rect2D* ptrpDiscardRectangle = pDiscardRectangle != null ? &valpDiscardRectangle : (Rect2D*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdSetDiscardRectangleEXT (this.m, firstDiscardRectangle, (UInt32)(pDiscardRectangle != null ? 1 : 0), ptrpDiscardRectangle);
			}
		}

		public void CmdSetSampleLocationsEXT (SampleLocationsInfoExt pSampleLocationsInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetSampleLocationsEXT (this.m, pSampleLocationsInfo != null ? pSampleLocationsInfo.m : (Interop.SampleLocationsInfoExt*)default(IntPtr));
			}
		}

		public void CmdBeginDebugUtilsLabelEXT (DebugUtilsLabelExt pLabelInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBeginDebugUtilsLabelEXT (this.m, pLabelInfo != null ? pLabelInfo.m : (Interop.DebugUtilsLabelExt*)default(IntPtr));
			}
		}

		public void CmdEndDebugUtilsLabelEXT ()
		{
			unsafe {
				Interop.NativeMethods.vkCmdEndDebugUtilsLabelEXT (this.m);
			}
		}

		public void CmdInsertDebugUtilsLabelEXT (DebugUtilsLabelExt pLabelInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdInsertDebugUtilsLabelEXT (this.m, pLabelInfo != null ? pLabelInfo.m : (Interop.DebugUtilsLabelExt*)default(IntPtr));
			}
		}

		public void CmdWriteBufferMarkerAMD (PipelineStageFlags pipelineStage, Buffer dstBuffer, DeviceSize dstOffset, UInt32 marker)
		{
			unsafe {
				Interop.NativeMethods.vkCmdWriteBufferMarkerAMD (this.m, pipelineStage, dstBuffer != null ? dstBuffer.m : default(UInt64), dstOffset, marker);
			}
		}

		public void CmdBeginRenderPass2KHR (RenderPassBeginInfo pRenderPassBegin, SubpassBeginInfoKhr pSubpassBeginInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBeginRenderPass2KHR (this.m, pRenderPassBegin != null ? pRenderPassBegin.m : (Interop.RenderPassBeginInfo*)default(IntPtr), pSubpassBeginInfo != null ? pSubpassBeginInfo.m : (Interop.SubpassBeginInfoKhr*)default(IntPtr));
			}
		}

		public void CmdNextSubpass2KHR (SubpassBeginInfoKhr pSubpassBeginInfo, SubpassEndInfoKhr pSubpassEndInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdNextSubpass2KHR (this.m, pSubpassBeginInfo != null ? pSubpassBeginInfo.m : (Interop.SubpassBeginInfoKhr*)default(IntPtr), pSubpassEndInfo != null ? pSubpassEndInfo.m : (Interop.SubpassEndInfoKhr*)default(IntPtr));
			}
		}

		public void CmdEndRenderPass2KHR (SubpassEndInfoKhr pSubpassEndInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdEndRenderPass2KHR (this.m, pSubpassEndInfo != null ? pSubpassEndInfo.m : (Interop.SubpassEndInfoKhr*)default(IntPtr));
			}
		}

		public void CmdDrawIndirectCountKHR (Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, UInt32 maxDrawCount, UInt32 stride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndirectCountKHR (this.m, buffer != null ? buffer.m : default(UInt64), offset, countBuffer != null ? countBuffer.m : default(UInt64), countBufferOffset, maxDrawCount, stride);
			}
		}

		[Obsolete ("CmdDrawIndirectCountAMD is deprecated, please use CmdDrawIndirectCountKHR instead.")]
		public void CmdDrawIndirectCountAMD (Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, UInt32 maxDrawCount, UInt32 stride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndirectCountAMD (this.m, buffer != null ? buffer.m : default(UInt64), offset, countBuffer != null ? countBuffer.m : default(UInt64), countBufferOffset, maxDrawCount, stride);
			}
		}

		public void CmdDrawIndexedIndirectCountKHR (Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, UInt32 maxDrawCount, UInt32 stride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndexedIndirectCountKHR (this.m, buffer != null ? buffer.m : default(UInt64), offset, countBuffer != null ? countBuffer.m : default(UInt64), countBufferOffset, maxDrawCount, stride);
			}
		}

		[Obsolete ("CmdDrawIndexedIndirectCountAMD is deprecated, please use CmdDrawIndexedIndirectCountKHR instead.")]
		public void CmdDrawIndexedIndirectCountAMD (Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, UInt32 maxDrawCount, UInt32 stride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndexedIndirectCountAMD (this.m, buffer != null ? buffer.m : default(UInt64), offset, countBuffer != null ? countBuffer.m : default(UInt64), countBufferOffset, maxDrawCount, stride);
			}
		}

		public void CmdSetCheckpointNV (IntPtr pCheckpointMarker)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetCheckpointNV (this.m, pCheckpointMarker);
			}
		}

		public void CmdBindTransformFeedbackBuffersEXT (UInt32 firstBinding, Buffer[] pBuffers, DeviceSize[] pOffsets, DeviceSize[] pSizes = null)
		{
			unsafe {
				var arraypBuffers = pBuffers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pBuffers.Length*sizeof (UInt64));
				var lenpBuffers = pBuffers == null ? 0 : pBuffers.Length;
				if (pBuffers != null)
					for (int i = 0; i < pBuffers.Length; i++)
						((UInt64*)arraypBuffers) [i] = (pBuffers [i].m);
				var arraypOffsets = pOffsets == null ? IntPtr.Zero : Marshal.AllocHGlobal (pOffsets.Length*sizeof (DeviceSize));
				var lenpOffsets = pOffsets == null ? 0 : pOffsets.Length;
				if (pOffsets != null)
					for (int i = 0; i < pOffsets.Length; i++)
						((DeviceSize*)arraypOffsets) [i] = (pOffsets [i]);
				var arraypSizes = pSizes == null ? IntPtr.Zero : Marshal.AllocHGlobal (pSizes.Length*sizeof (DeviceSize));
				var lenpSizes = pSizes == null ? 0 : pSizes.Length;
				if (pSizes != null)
					for (int i = 0; i < pSizes.Length; i++)
						((DeviceSize*)arraypSizes) [i] = (pSizes [i]);
				Interop.NativeMethods.vkCmdBindTransformFeedbackBuffersEXT (this.m, firstBinding, (uint)lenpSizes, (UInt64*)arraypBuffers, (DeviceSize*)arraypOffsets, (DeviceSize*)arraypSizes);
				Marshal.FreeHGlobal (arraypBuffers);
				Marshal.FreeHGlobal (arraypOffsets);
				Marshal.FreeHGlobal (arraypSizes);
			}
		}

		public void CmdBeginTransformFeedbackEXT (UInt32 firstCounterBuffer, Buffer[] pCounterBuffers, DeviceSize[] pCounterBufferOffsets = null)
		{
			unsafe {
				var arraypCounterBuffers = pCounterBuffers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pCounterBuffers.Length*sizeof (UInt64));
				var lenpCounterBuffers = pCounterBuffers == null ? 0 : pCounterBuffers.Length;
				if (pCounterBuffers != null)
					for (int i = 0; i < pCounterBuffers.Length; i++)
						((UInt64*)arraypCounterBuffers) [i] = (pCounterBuffers [i].m);
				var arraypCounterBufferOffsets = pCounterBufferOffsets == null ? IntPtr.Zero : Marshal.AllocHGlobal (pCounterBufferOffsets.Length*sizeof (DeviceSize));
				var lenpCounterBufferOffsets = pCounterBufferOffsets == null ? 0 : pCounterBufferOffsets.Length;
				if (pCounterBufferOffsets != null)
					for (int i = 0; i < pCounterBufferOffsets.Length; i++)
						((DeviceSize*)arraypCounterBufferOffsets) [i] = (pCounterBufferOffsets [i]);
				Interop.NativeMethods.vkCmdBeginTransformFeedbackEXT (this.m, firstCounterBuffer, (uint)lenpCounterBufferOffsets, (UInt64*)arraypCounterBuffers, (DeviceSize*)arraypCounterBufferOffsets);
				Marshal.FreeHGlobal (arraypCounterBuffers);
				Marshal.FreeHGlobal (arraypCounterBufferOffsets);
			}
		}

		public void CmdEndTransformFeedbackEXT (UInt32 firstCounterBuffer, Buffer[] pCounterBuffers, DeviceSize[] pCounterBufferOffsets = null)
		{
			unsafe {
				var arraypCounterBuffers = pCounterBuffers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pCounterBuffers.Length*sizeof (UInt64));
				var lenpCounterBuffers = pCounterBuffers == null ? 0 : pCounterBuffers.Length;
				if (pCounterBuffers != null)
					for (int i = 0; i < pCounterBuffers.Length; i++)
						((UInt64*)arraypCounterBuffers) [i] = (pCounterBuffers [i].m);
				var arraypCounterBufferOffsets = pCounterBufferOffsets == null ? IntPtr.Zero : Marshal.AllocHGlobal (pCounterBufferOffsets.Length*sizeof (DeviceSize));
				var lenpCounterBufferOffsets = pCounterBufferOffsets == null ? 0 : pCounterBufferOffsets.Length;
				if (pCounterBufferOffsets != null)
					for (int i = 0; i < pCounterBufferOffsets.Length; i++)
						((DeviceSize*)arraypCounterBufferOffsets) [i] = (pCounterBufferOffsets [i]);
				Interop.NativeMethods.vkCmdEndTransformFeedbackEXT (this.m, firstCounterBuffer, (uint)lenpCounterBufferOffsets, (UInt64*)arraypCounterBuffers, (DeviceSize*)arraypCounterBufferOffsets);
				Marshal.FreeHGlobal (arraypCounterBuffers);
				Marshal.FreeHGlobal (arraypCounterBufferOffsets);
			}
		}

		public void CmdBeginQueryIndexedEXT (QueryPool queryPool, UInt32 query, QueryControlFlags flags, UInt32 index)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBeginQueryIndexedEXT (this.m, queryPool != null ? queryPool.m : default(UInt64), query, flags, index);
			}
		}

		public void CmdEndQueryIndexedEXT (QueryPool queryPool, UInt32 query, UInt32 index)
		{
			unsafe {
				Interop.NativeMethods.vkCmdEndQueryIndexedEXT (this.m, queryPool != null ? queryPool.m : default(UInt64), query, index);
			}
		}

		public void CmdDrawIndirectByteCountEXT (UInt32 instanceCount, UInt32 firstInstance, Buffer counterBuffer, DeviceSize counterBufferOffset, UInt32 counterOffset, UInt32 vertexStride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndirectByteCountEXT (this.m, instanceCount, firstInstance, counterBuffer != null ? counterBuffer.m : default(UInt64), counterBufferOffset, counterOffset, vertexStride);
			}
		}

		public void CmdSetExclusiveScissorNV (UInt32 firstExclusiveScissor, Rect2D[] pExclusiveScissors)
		{
			unsafe {
				var arraypExclusiveScissors = pExclusiveScissors == null ? IntPtr.Zero : Marshal.AllocHGlobal (pExclusiveScissors.Length*sizeof (Rect2D));
				var lenpExclusiveScissors = pExclusiveScissors == null ? 0 : pExclusiveScissors.Length;
				if (pExclusiveScissors != null)
					for (int i = 0; i < pExclusiveScissors.Length; i++)
						((Rect2D*)arraypExclusiveScissors) [i] = (pExclusiveScissors [i]);
				Interop.NativeMethods.vkCmdSetExclusiveScissorNV (this.m, firstExclusiveScissor, (uint)lenpExclusiveScissors, (Rect2D*)arraypExclusiveScissors);
				Marshal.FreeHGlobal (arraypExclusiveScissors);
			}
		}

		public void CmdSetExclusiveScissorNV (UInt32 firstExclusiveScissor, Rect2D? pExclusiveScissor)
		{
			unsafe {
				Rect2D valpExclusiveScissor = pExclusiveScissor ?? default(Rect2D);
				Rect2D* ptrpExclusiveScissor = pExclusiveScissor != null ? &valpExclusiveScissor : (Rect2D*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdSetExclusiveScissorNV (this.m, firstExclusiveScissor, (UInt32)(pExclusiveScissor != null ? 1 : 0), ptrpExclusiveScissor);
			}
		}

		public void CmdBindShadingRateImageNV (ImageView imageView, ImageLayout imageLayout)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBindShadingRateImageNV (this.m, imageView != null ? imageView.m : default(UInt64), imageLayout);
			}
		}

		public void CmdSetViewportShadingRatePaletteNV (UInt32 firstViewport, ShadingRatePaletteNv[] pShadingRatePalettes)
		{
			unsafe {
				var arraypShadingRatePalettes = pShadingRatePalettes == null ? IntPtr.Zero : Marshal.AllocHGlobal (pShadingRatePalettes.Length*sizeof (Interop.ShadingRatePaletteNv));
				var lenpShadingRatePalettes = pShadingRatePalettes == null ? 0 : pShadingRatePalettes.Length;
				if (pShadingRatePalettes != null)
					for (int i = 0; i < pShadingRatePalettes.Length; i++)
						((Interop.ShadingRatePaletteNv*)arraypShadingRatePalettes) [i] = *(pShadingRatePalettes [i].m);
				Interop.NativeMethods.vkCmdSetViewportShadingRatePaletteNV (this.m, firstViewport, (uint)lenpShadingRatePalettes, (Interop.ShadingRatePaletteNv*)arraypShadingRatePalettes);
				Marshal.FreeHGlobal (arraypShadingRatePalettes);
			}
		}

		public void CmdSetViewportShadingRatePaletteNV (UInt32 firstViewport, ShadingRatePaletteNv pShadingRatePalette)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetViewportShadingRatePaletteNV (this.m, firstViewport, (UInt32)(pShadingRatePalette != null ? 1 : 0), pShadingRatePalette != null ? pShadingRatePalette.m : (Interop.ShadingRatePaletteNv*)default(IntPtr));
			}
		}

		public void CmdSetCoarseSampleOrderNV (CoarseSampleOrderTypeNv sampleOrderType, CoarseSampleOrderCustomNv[] pCustomSampleOrders)
		{
			unsafe {
				var arraypCustomSampleOrders = pCustomSampleOrders == null ? IntPtr.Zero : Marshal.AllocHGlobal (pCustomSampleOrders.Length*sizeof (Interop.CoarseSampleOrderCustomNv));
				var lenpCustomSampleOrders = pCustomSampleOrders == null ? 0 : pCustomSampleOrders.Length;
				if (pCustomSampleOrders != null)
					for (int i = 0; i < pCustomSampleOrders.Length; i++)
						((Interop.CoarseSampleOrderCustomNv*)arraypCustomSampleOrders) [i] = *(pCustomSampleOrders [i].m);
				Interop.NativeMethods.vkCmdSetCoarseSampleOrderNV (this.m, sampleOrderType, (uint)lenpCustomSampleOrders, (Interop.CoarseSampleOrderCustomNv*)arraypCustomSampleOrders);
				Marshal.FreeHGlobal (arraypCustomSampleOrders);
			}
		}

		public void CmdSetCoarseSampleOrderNV (CoarseSampleOrderTypeNv sampleOrderType, CoarseSampleOrderCustomNv pCustomSampleOrder)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetCoarseSampleOrderNV (this.m, sampleOrderType, (UInt32)(pCustomSampleOrder != null ? 1 : 0), pCustomSampleOrder != null ? pCustomSampleOrder.m : (Interop.CoarseSampleOrderCustomNv*)default(IntPtr));
			}
		}

		public void CmdDrawMeshTasksNV (UInt32 taskCount, UInt32 firstTask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawMeshTasksNV (this.m, taskCount, firstTask);
			}
		}

		public void CmdDrawMeshTasksIndirectNV (Buffer buffer, DeviceSize offset, UInt32 drawCount, UInt32 stride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawMeshTasksIndirectNV (this.m, buffer != null ? buffer.m : default(UInt64), offset, drawCount, stride);
			}
		}

		public void CmdDrawMeshTasksIndirectCountNV (Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, UInt32 maxDrawCount, UInt32 stride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawMeshTasksIndirectCountNV (this.m, buffer != null ? buffer.m : default(UInt64), offset, countBuffer != null ? countBuffer.m : default(UInt64), countBufferOffset, maxDrawCount, stride);
			}
		}

		public void CmdCopyAccelerationStructureNV (AccelerationStructureNv dst, AccelerationStructureNv src, CopyAccelerationStructureModeNv mode)
		{
			unsafe {
				Interop.NativeMethods.vkCmdCopyAccelerationStructureNV (this.m, dst != null ? dst.m : default(UInt64), src != null ? src.m : default(UInt64), mode);
			}
		}

		public void CmdWriteAccelerationStructuresPropertiesNV (AccelerationStructureNv[] pAccelerationStructures, QueryType queryType, QueryPool queryPool, UInt32 firstQuery)
		{
			unsafe {
				var arraypAccelerationStructures = pAccelerationStructures == null ? IntPtr.Zero : Marshal.AllocHGlobal (pAccelerationStructures.Length*sizeof (UInt64));
				var lenpAccelerationStructures = pAccelerationStructures == null ? 0 : pAccelerationStructures.Length;
				if (pAccelerationStructures != null)
					for (int i = 0; i < pAccelerationStructures.Length; i++)
						((UInt64*)arraypAccelerationStructures) [i] = (pAccelerationStructures [i].m);
				Interop.NativeMethods.vkCmdWriteAccelerationStructuresPropertiesNV (this.m, (uint)lenpAccelerationStructures, (UInt64*)arraypAccelerationStructures, queryType, queryPool != null ? queryPool.m : default(UInt64), firstQuery);
				Marshal.FreeHGlobal (arraypAccelerationStructures);
			}
		}

		public void CmdWriteAccelerationStructuresPropertiesNV (AccelerationStructureNv pAccelerationStructure, QueryType queryType, QueryPool queryPool, UInt32 firstQuery)
		{
			unsafe {
				fixed (UInt64* ptrpAccelerationStructure = &pAccelerationStructure.m) {
					Interop.NativeMethods.vkCmdWriteAccelerationStructuresPropertiesNV (this.m, (UInt32)(pAccelerationStructure != null ? 1 : 0), ptrpAccelerationStructure, queryType, queryPool != null ? queryPool.m : default(UInt64), firstQuery);
				}
			}
		}

		public void CmdBuildAccelerationStructureNV (AccelerationStructureInfoNv pInfo, Buffer instanceData, DeviceSize instanceOffset, Bool32 update, AccelerationStructureNv dst, AccelerationStructureNv src, Buffer scratch, DeviceSize scratchOffset)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBuildAccelerationStructureNV (this.m, pInfo != null ? pInfo.m : (Interop.AccelerationStructureInfoNv*)default(IntPtr), instanceData != null ? instanceData.m : default(UInt64), instanceOffset, update, dst != null ? dst.m : default(UInt64), src != null ? src.m : default(UInt64), scratch != null ? scratch.m : default(UInt64), scratchOffset);
			}
		}

		public void CmdTraceRaysNV (Buffer raygenShaderBindingTableBuffer, DeviceSize raygenShaderBindingOffset, Buffer missShaderBindingTableBuffer, DeviceSize missShaderBindingOffset, DeviceSize missShaderBindingStride, Buffer hitShaderBindingTableBuffer, DeviceSize hitShaderBindingOffset, DeviceSize hitShaderBindingStride, Buffer callableShaderBindingTableBuffer, DeviceSize callableShaderBindingOffset, DeviceSize callableShaderBindingStride, UInt32 width, UInt32 height, UInt32 depth)
		{
			unsafe {
				Interop.NativeMethods.vkCmdTraceRaysNV (this.m, raygenShaderBindingTableBuffer != null ? raygenShaderBindingTableBuffer.m : default(UInt64), raygenShaderBindingOffset, missShaderBindingTableBuffer != null ? missShaderBindingTableBuffer.m : default(UInt64), missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer != null ? hitShaderBindingTableBuffer.m : default(UInt64), hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer != null ? callableShaderBindingTableBuffer.m : default(UInt64), callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
			}
		}

		public void CmdSetPerformanceMarkerINTEL (PerformanceMarkerInfoIntel pMarkerInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkCmdSetPerformanceMarkerINTEL (this.m, pMarkerInfo != null ? pMarkerInfo.m : (Interop.PerformanceMarkerInfoIntel*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void CmdSetPerformanceStreamMarkerINTEL (PerformanceStreamMarkerInfoIntel pMarkerInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkCmdSetPerformanceStreamMarkerINTEL (this.m, pMarkerInfo != null ? pMarkerInfo.m : (Interop.PerformanceStreamMarkerInfoIntel*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void CmdSetPerformanceOverrideINTEL (PerformanceOverrideInfoIntel pOverrideInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkCmdSetPerformanceOverrideINTEL (this.m, pOverrideInfo != null ? pOverrideInfo.m : (Interop.PerformanceOverrideInfoIntel*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}
	}

	public partial class DeviceMemory : INonDispatchableHandleMarshalling
	{
		internal DeviceMemory() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class CommandPool : INonDispatchableHandleMarshalling
	{
		internal CommandPool() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class Buffer : INonDispatchableHandleMarshalling
	{
		internal Buffer() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class BufferView : INonDispatchableHandleMarshalling
	{
		internal BufferView() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class Image : INonDispatchableHandleMarshalling
	{
		internal Image() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class ImageView : INonDispatchableHandleMarshalling
	{
		internal ImageView() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class ShaderModule : INonDispatchableHandleMarshalling
	{
		internal ShaderModule() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class Pipeline : INonDispatchableHandleMarshalling
	{
		internal Pipeline() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class PipelineLayout : INonDispatchableHandleMarshalling
	{
		internal PipelineLayout() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class Sampler : INonDispatchableHandleMarshalling
	{
		internal Sampler() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class DescriptorSet : INonDispatchableHandleMarshalling
	{
		internal DescriptorSet() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class DescriptorSetLayout : INonDispatchableHandleMarshalling
	{
		internal DescriptorSetLayout() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class DescriptorPool : INonDispatchableHandleMarshalling
	{
		internal DescriptorPool() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class Fence : INonDispatchableHandleMarshalling
	{
		internal Fence() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class Semaphore : INonDispatchableHandleMarshalling
	{
		internal Semaphore() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class Event : INonDispatchableHandleMarshalling
	{
		internal Event() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class QueryPool : INonDispatchableHandleMarshalling
	{
		internal QueryPool() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class Framebuffer : INonDispatchableHandleMarshalling
	{
		internal Framebuffer() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class RenderPass : INonDispatchableHandleMarshalling
	{
		internal RenderPass() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class PipelineCache : INonDispatchableHandleMarshalling
	{
		internal PipelineCache() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class ObjectTableNvx : INonDispatchableHandleMarshalling
	{
		internal ObjectTableNvx() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class IndirectCommandsLayoutNvx : INonDispatchableHandleMarshalling
	{
		internal IndirectCommandsLayoutNvx() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class DescriptorUpdateTemplate : INonDispatchableHandleMarshalling
	{
		internal DescriptorUpdateTemplate() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class DescriptorUpdateTemplateKhr : INonDispatchableHandleMarshalling
	{
		internal DescriptorUpdateTemplateKhr() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class SamplerYcbcrConversion : INonDispatchableHandleMarshalling
	{
		internal SamplerYcbcrConversion() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class SamplerYcbcrConversionKhr : INonDispatchableHandleMarshalling
	{
		internal SamplerYcbcrConversionKhr() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class ValidationCacheExt : INonDispatchableHandleMarshalling
	{
		internal ValidationCacheExt() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class AccelerationStructureNv : INonDispatchableHandleMarshalling
	{
		internal AccelerationStructureNv() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class PerformanceConfigurationIntel : INonDispatchableHandleMarshalling
	{
		internal PerformanceConfigurationIntel() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class DisplayKhr : INonDispatchableHandleMarshalling
	{
		internal DisplayKhr() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class DisplayModeKhr : INonDispatchableHandleMarshalling
	{
		internal DisplayModeKhr() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class SurfaceKhr : INonDispatchableHandleMarshalling
	{
		internal SurfaceKhr() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class SwapchainKhr : INonDispatchableHandleMarshalling
	{
		internal SwapchainKhr() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class DebugReportCallbackExt : INonDispatchableHandleMarshalling
	{
		internal DebugReportCallbackExt() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}

	public partial class DebugUtilsMessengerExt : INonDispatchableHandleMarshalling
	{
		internal DebugUtilsMessengerExt() {}

		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}
}
