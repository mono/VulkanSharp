/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;

namespace Vulkan
{
	/*internal*/public static partial class Commands
	{
		public static Result EnumerateInstanceLayerProperties (out LayerProperties[] Properties)
		{
            Result result;
            uint propertyCount = 0;

            unsafe
            {
                UInt32* ptrPropertyCount = &propertyCount;
                LayerProperties tmp = new LayerProperties();
                // First call get the count of layers
                result = Interop.NativeMethods.vkEnumerateInstanceLayerProperties(ptrPropertyCount, tmp.m);

                if (result != Result.Success)
                {
                    Properties = null;
                    return result;
                }

                if(propertyCount <= 0)
                {
                    Properties = new LayerProperties[0];
                    return result;
                }

                Properties = MarshalHelper.CreateArray<LayerProperties>(propertyCount, LayerProperties.SizeOf, (ptr) => { return new LayerProperties(ptr); });
                
                // TODO : this is not tested as i get 0 as layer count
                result = Interop.NativeMethods.vkEnumerateInstanceLayerProperties(ptrPropertyCount, Properties[0].m);

                return result;
            }
        }

		public static Result EnumerateInstanceExtensionProperties (string pLayerName, out UInt32 PropertyCount, out ExtensionProperties Properties)
		{
			unsafe {
				fixed (UInt32* ptrPropertyCount = &PropertyCount) {
					Properties = new ExtensionProperties ();
					return Interop.NativeMethods.vkEnumerateInstanceExtensionProperties (pLayerName, ptrPropertyCount, Properties.m);
				}
			}
		}
	}
}
